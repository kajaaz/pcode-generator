0x23786  TEST RDX,RDX
0x23789  JNZ 0x23796
<L0> (entry=0x23786):
	instruction(0x23786)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RDX & RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23789)
	$U1:1 = !ZF
	if $U1:1 jump 0x23796:8

0x207e2  CALL 0x14700
<L0> (entry=0x207e2):
	$U1:8 = 0x207e7:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x14700:8

0x2bffd  MOV byte ptr [RDI],CL
0x2bfff  RET
<L0> (entry=0x2bffd):
	instruction(0x2bffd)
	$U1:1 = CL
	ram[RDI] = $U1:1
	instruction(0x2bfff)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x20520  MOV RBP,qword ptr [RDX + 0x8]
0x20524  NOP dword ptr [RAX]
0x20528  MOV RAX,qword ptr [RDX + 0x10]
0x2052c  ADD RDX,0x10
0x20530  TEST RAX,RAX
0x20533  JNZ 0x20508
<L0> (entry=0x20520):
	instruction(0x20520)
	$U1:8 = RDX + 0x8:8
	RBP = ram[$U1:8]
	instruction(0x20524)
	instruction(0x20528)
	$U1:8 = RDX + 0x10:8
	RAX = ram[$U1:8]
	instruction(0x2052c)
	CF = RDX carry 0x10:8
	OF = RDX scarry 0x10:8
	RDX = RDX + 0x10:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x20530)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x20533)
	$U1:1 = !ZF
	if $U1:1 jump 0x20508:8

0x43b4  TEST RDX,RDX
0x43b7  JZ 0x43c6
<L0> (entry=0x43b4):
	instruction(0x43b4)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RDX & RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x43b7)
	if ZF jump 0x43c6:8

0x1ec32  SUB RAX,0x1
0x1ec36  ADD RDX,0x10
0x1ec3a  TEST RSI,RAX
0x1ec3d  JZ 0x1ec5d
<L0> (entry=0x1ec32):
	instruction(0x1ec32)
	CF = RAX < 0x1:8
	OF = RAX sborrow 0x1:8
	RAX = RAX - 0x1:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ec36)
	CF = RDX carry 0x10:8
	OF = RDX scarry 0x10:8
	RDX = RDX + 0x10:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ec3a)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RSI & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1ec3d)
	if ZF jump 0x1ec5d:8

0xe990  ENDBR64
0xe994  PUSH R15
0xe996  MOV R15,RCX
0xe999  PUSH R14
0xe99b  PUSH R13
0xe99d  PUSH R12
0xe99f  MOV R12,RSI
0xe9a2  PUSH RBP
0xe9a3  MOV RBP,RDI
0xe9a6  PUSH RBX
0xe9a7  MOV RBX,R9
0xe9aa  SUB RSP,0x38
0xe9ae  MOV dword ptr [RSP + 0x10],EDX
0xe9b2  MOV dword ptr [RSP + 0x2c],R8D
0xe9b7  TEST R8D,0x21000000
0xe9be  JNZ 0xed38
<L0> (entry=0xe990):
	instruction(0xe990)
	instruction(0xe994)
	$U1:8 = R15
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xe996)
	R15 = RCX
	instruction(0xe999)
	$U1:8 = R14
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xe99b)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xe99d)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xe99f)
	R12 = RSI
	instruction(0xe9a2)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xe9a3)
	RBP = RDI
	instruction(0xe9a6)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xe9a7)
	RBX = R9
	instruction(0xe9aa)
	CF = RSP < 0x38:8
	OF = RSP sborrow 0x38:8
	RSP = RSP - 0x38:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xe9ae)
	$U1:8 = 0x10:8 + RSP
	$U2:4 = EDX
	ram[$U1:8] = $U2:4
	instruction(0xe9b2)
	$U1:8 = 0x2c:8 + RSP
	$U2:4 = R8D
	ram[$U1:8] = $U2:4
	instruction(0xe9b7)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = R8D & 0x21000000:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xe9be)
	$U1:1 = !ZF
	if $U1:1 jump 0xed38:8

0x5b06  MOV RBX,RAX
0x5b09  TEST RAX,RAX
0x5b0c  JZ 0x5b70
<L0> (entry=0x5b06):
	instruction(0x5b06)
	RBX = RAX
	instruction(0x5b09)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x5b0c)
	if ZF jump 0x5b70:8

0xe6a9  TEST EAX,EAX
0xe6ab  JZ 0xe6d8
<L0> (entry=0xe6a9):
	instruction(0xe6a9)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xe6ab)
	if ZF jump 0xe6d8:8

0x1b370  LEA R14,[RSP + 0xb0]
0x1b378  LEA RCX,[RSP + 0x90]
0x1b380  LEA RSI,[RSP + 0x8c]
0x1b388  LEA RDI,[RSP + 0x88]
0x1b390  MOV RDX,R14
0x1b393  CALL 0x195e0
<L0> (entry=0x1b370):
	instruction(0x1b370)
	$U1:8 = 0xb0:8 + RSP
	R14 = $U1:8
	instruction(0x1b378)
	$U1:8 = 0x90:8 + RSP
	RCX = $U1:8
	instruction(0x1b380)
	$U1:8 = 0x8c:8 + RSP
	RSI = $U1:8
	instruction(0x1b388)
	$U1:8 = 0x88:8 + RSP
	RDI = $U1:8
	instruction(0x1b390)
	RDX = R14
	instruction(0x1b393)
	$U1:8 = 0x1b398:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x195e0:8

0x52c5  MOV qword ptr [RBX + R13*0x8],0x0
0x52cd  OR byte ptr [R14 + 0x31e],0x10
0x52d5  MOV qword ptr [R14 + 0x3d0],RBX
0x52dc  TEST R15,R15
0x52df  JZ 0x52f4
<L0> (entry=0x52c5):
	instruction(0x52c5)
	$U2:8 = R13 * 0x8:8
	$U1:8 = RBX + $U2:8
	$U3:8 = 0x0:8
	ram[$U1:8] = $U3:8
	instruction(0x52cd)
	$U4:8 = R14 + 0x31e:8
	CF = 0x0:1
	OF = 0x0:1
	$U5:1 = ram[$U4:8]
	$U6:1 = $U5:1 | 0x10:1
	ram[$U4:8] = $U6:1
	$U7:1 = ram[$U4:8]
	SF = $U7:1 s< 0x0:1
	$U8:1 = ram[$U4:8]
	ZF = $U8:1 == 0x0:1
	$U9:1 = ram[$U4:8]
	$U1:1 = $U9:1 & 0xff:1
	$U2:1 = count_ones($U1:1)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x52d5)
	$U1:8 = R14 + 0x3d0:8
	$U2:8 = RBX
	ram[$U1:8] = $U2:8
	instruction(0x52dc)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R15 & R15
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x52df)
	if ZF jump 0x52f4:8

0x80d5  SUB RAX,R14
0x80d8  MOV qword ptr [RBP + -0xd0],RAX
0x80df  LEA RAX,[0x3aae0]
0x80e6  TEST byte ptr [RAX],0x1
0x80e9  JNZ 0x82e8
<L0> (entry=0x80d5):
	instruction(0x80d5)
	CF = RAX < R14
	OF = RAX sborrow R14
	RAX = RAX - R14
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x80d8)
	$U1:8 = RBP + 0xffffffffffffff30:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x80df)
	RAX = 0x3aae0:8
	instruction(0x80e6)
	CF = 0x0:1
	OF = 0x0:1
	$U5:1 = ram[RAX]
	$U1:1 = $U5:1 & 0x1:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x80e9)
	$U1:1 = !ZF
	if $U1:1 jump 0x82e8:8

0x1e803  AND EAX,0xfff
0x1e808  SUB RSP,RAX
0x1e80b  TEST RAX,RAX
0x1e80e  JNZ 0x1ee3d
<L0> (entry=0x1e803):
	instruction(0x1e803)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX & 0xfff:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e808)
	CF = RSP < RAX
	OF = RSP sborrow RAX
	RSP = RSP - RAX
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e80b)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e80e)
	$U1:1 = !ZF
	if $U1:1 jump 0x1ee3d:8

0x22176  ADD qword ptr [RAX + 0x8],R12
0x2217a  MOV RAX,qword ptr [0x3bb68]
0x22181  TEST RAX,RAX
0x22184  JZ 0x2218a
<L0> (entry=0x22176):
	instruction(0x22176)
	$U4:8 = RAX + 0x8:8
	$U5:8 = ram[$U4:8]
	CF = $U5:8 carry R12
	$U6:8 = ram[$U4:8]
	OF = $U6:8 scarry R12
	$U7:8 = ram[$U4:8]
	$U8:8 = $U7:8 + R12
	ram[$U4:8] = $U8:8
	$U9:8 = ram[$U4:8]
	SF = $U9:8 s< 0x0:8
	$U10:8 = ram[$U4:8]
	ZF = $U10:8 == 0x0:8
	$U11:8 = ram[$U4:8]
	$U1:8 = $U11:8 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2217a)
	RAX = ram[0x3bb68:8]
	instruction(0x22181)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x22184)
	if ZF jump 0x2218a:8

0x1ef76  MOV ECX,0x1
0x1ef7b  MOV EAX,0x2
0x1ef80  JMP 0x1edd0
<L0> (entry=0x1ef76):
	instruction(0x1ef76)
	RCX = 0x1:8
	instruction(0x1ef7b)
	RAX = 0x2:8
	instruction(0x1ef80)
	jump 0x1edd0:8

0x54d8  MOV RDI,RBX
0x54db  CALL 0x2bfb0
<L0> (entry=0x54d8):
	instruction(0x54d8)
	RDI = RBX
	instruction(0x54db)
	$U1:8 = 0x54e0:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2bfb0:8

0x1aa42  MOV RDX,qword ptr [RSP + 0xb0]
0x1aa4a  MOV RAX,qword ptr [RSP + 0x40]
0x1aa4f  CMP RDX,R13
0x1aa52  JLE 0x1aa59
<L0> (entry=0x1aa42):
	instruction(0x1aa42)
	$U1:8 = 0xb0:8 + RSP
	RDX = ram[$U1:8]
	instruction(0x1aa4a)
	$U1:8 = 0x40:8 + RSP
	RAX = ram[$U1:8]
	instruction(0x1aa4f)
	CF = RDX < R13
	OF = RDX sborrow R13
	$U1:8 = RDX - R13
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1aa52)
	$U2:1 = OF != SF
	$U1:1 = ZF || $U2:1
	if $U1:1 jump 0x1aa59:8

0x79dd  MOV RDX,0x10102464c457f
0x79e7  CMP qword ptr [R13 + 0x8],RDX
0x79eb  JNZ 0x7df0
<L0> (entry=0x79dd):
	instruction(0x79dd)
	RDX = 0x10102464c457f:8
	instruction(0x79e7)
	$U5:8 = R13 + 0x8:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < RDX
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow RDX
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x79eb)
	$U1:1 = !ZF
	if $U1:1 jump 0x7df0:8

0x22146  ADD qword ptr [RAX + 0x8],R12
0x2214a  MOV RAX,qword ptr [0x3bb48]
0x22151  TEST RAX,RAX
0x22154  JZ 0x2215a
<L0> (entry=0x22146):
	instruction(0x22146)
	$U4:8 = RAX + 0x8:8
	$U5:8 = ram[$U4:8]
	CF = $U5:8 carry R12
	$U6:8 = ram[$U4:8]
	OF = $U6:8 scarry R12
	$U7:8 = ram[$U4:8]
	$U8:8 = $U7:8 + R12
	ram[$U4:8] = $U8:8
	$U9:8 = ram[$U4:8]
	SF = $U9:8 s< 0x0:8
	$U10:8 = ram[$U4:8]
	ZF = $U10:8 == 0x0:8
	$U11:8 = ram[$U4:8]
	$U1:8 = $U11:8 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2214a)
	RAX = ram[0x3bb48:8]
	instruction(0x22151)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x22154)
	if ZF jump 0x2215a:8

0x223f6  JA 0x22450
<L0> (entry=0x223f6):
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x22450:8

0x207b8  MOV R12D,dword ptr [RDX + 0x8]
0x207bc  MOV RAX,qword ptr [RDX + 0x10]
0x207c0  ADD RDX,0x10
0x207c4  TEST RAX,RAX
0x207c7  JNZ 0x20508
<L0> (entry=0x207b8):
	instruction(0x207b8)
	$U1:8 = RDX + 0x8:8
	R12D = ram[$U1:8]
	R12 = zext(R12D)
	instruction(0x207bc)
	$U1:8 = RDX + 0x10:8
	RAX = ram[$U1:8]
	instruction(0x207c0)
	CF = RDX carry 0x10:8
	OF = RDX scarry 0x10:8
	RDX = RDX + 0x10:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x207c4)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x207c7)
	$U1:1 = !ZF
	if $U1:1 jump 0x20508:8

0x7b5d  CMP RDX,0xffff
0x7b64  JA 0x7cc0
<L0> (entry=0x7b5d):
	instruction(0x7b5d)
	CF = RDX < 0xffff:8
	OF = RDX sborrow 0xffff:8
	$U1:8 = RDX - 0xffff:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7b64)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x7cc0:8

0x20508  SUB RAX,0x3
0x2050c  CMP RAX,0x30
0x20510  JA 0x20528
<L0> (entry=0x20508):
	instruction(0x20508)
	CF = RAX < 0x3:8
	OF = RAX sborrow 0x3:8
	RAX = RAX - 0x3:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2050c)
	CF = RAX < 0x30:8
	OF = RAX sborrow 0x30:8
	$U1:8 = RAX - 0x30:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x20510)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x20528:8

0x1a9cc  XOR EDX,EDX
0x1a9ce  MOV RSI,R14
0x1a9d1  MOV EDI,0x4
0x1a9d6  CALL 0x18d70
<L0> (entry=0x1a9cc):
	instruction(0x1a9cc)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX ^ EDX
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a9ce)
	RSI = R14
	instruction(0x1a9d1)
	RDI = 0x4:8
	instruction(0x1a9d6)
	$U1:8 = 0x1a9db:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x18d70:8

0x1e8f4  MOV RAX,qword ptr [RBP + -0x58]
0x1e8f8  CMP qword ptr [RBP + -0x80],0x1
0x1e8fd  MOV RAX,qword ptr [RAX + 0x8]
0x1e901  MOV qword ptr [RBP + -0xb0],RAX
0x1e908  MOV RCX,RAX
0x1e90b  MOV RAX,qword ptr [RBP + -0xd8]
0x1e912  JZ 0x1ed4a
<L0> (entry=0x1e8f4):
	instruction(0x1e8f4)
	$U1:8 = RBP + 0xffffffffffffffa8:8
	RAX = ram[$U1:8]
	instruction(0x1e8f8)
	$U5:8 = RBP + 0xffffffffffffff80:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x1:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x1:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x1:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e8fd)
	$U1:8 = RAX + 0x8:8
	RAX = ram[$U1:8]
	instruction(0x1e901)
	$U1:8 = RBP + 0xffffffffffffff50:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1e908)
	RCX = RAX
	instruction(0x1e90b)
	$U1:8 = RBP + 0xffffffffffffff28:8
	RAX = ram[$U1:8]
	instruction(0x1e912)
	if ZF jump 0x1ed4a:8

0x278d0  ENDBR64
0x278d4  MOV R10D,ECX
0x278d7  MOV EAX,0x106
0x278dc  SYSCALL
<L0> (entry=0x278d0):
	instruction(0x278d0)
	instruction(0x278d4)
	R10D = ECX
	R10 = zext(R10D)
	instruction(0x278d7)
	RAX = 0x106:8
	instruction(0x278dc)
	RCX = 0x278de:8
	$U1:1 = NT & 0x1:1
	$U2:8 = zext($U1:1)
	$U3:8 = 0x4000:8 * $U2:8
	$U4:1 = OF & 0x1:1
	$U5:8 = zext($U4:1)
	$U6:8 = 0x800:8 * $U5:8
	$U7:8 = $U3:8 | $U6:8
	$U8:1 = DF & 0x1:1
	$U9:8 = zext($U8:1)
	$U10:8 = 0x400:8 * $U9:8
	$U11:8 = $U7:8 | $U10:8
	$U12:1 = IF & 0x1:1
	$U13:8 = zext($U12:1)
	$U14:8 = 0x200:8 * $U13:8
	$U15:8 = $U11:8 | $U14:8
	$U16:1 = TF & 0x1:1
	$U17:8 = zext($U16:1)
	$U18:8 = 0x100:8 * $U17:8
	$U19:8 = $U15:8 | $U18:8
	$U20:1 = SF & 0x1:1
	$U21:8 = zext($U20:1)
	$U22:8 = 0x80:8 * $U21:8
	$U23:8 = $U19:8 | $U22:8
	$U24:1 = ZF & 0x1:1
	$U25:8 = zext($U24:1)
	$U26:8 = 0x40:8 * $U25:8
	$U27:8 = $U23:8 | $U26:8
	$U28:1 = AF & 0x1:1
	$U29:8 = zext($U28:1)
	$U30:8 = 0x10:8 * $U29:8
	$U31:8 = $U27:8 | $U30:8
	$U32:1 = PF & 0x1:1
	$U33:8 = zext($U32:1)
	$U34:8 = 0x4:8 * $U33:8
	$U35:8 = $U31:8 | $U34:8
	$U36:1 = CF & 0x1:1
	$U37:8 = zext($U36:1)
	$U38:8 = 0x1:8 * $U37:8
	R11 = $U35:8 | $U38:8
	NEXT_PC = 0x278de:8
	exception(0x101:4, 0x0:4)

0x23337  TEST ECX,ECX
0x23339  JZ 0x23380
<L0> (entry=0x23337):
	instruction(0x23337)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = ECX & ECX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23339)
	if ZF jump 0x23380:8

0x221dd  MOV RSI,qword ptr [0x3bb78]
0x221e4  CMP qword ptr [RSI + 0x8],0x18
0x221e9  JNZ 0x226bd
<L0> (entry=0x221dd):
	instruction(0x221dd)
	RSI = ram[0x3bb78:8]
	instruction(0x221e4)
	$U5:8 = RSI + 0x8:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x18:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x18:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x18:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x221e9)
	$U1:1 = !ZF
	if $U1:1 jump 0x226bd:8

0x236f0  CMP RCX,qword ptr [R15 + 0x368]
0x236f7  JBE 0x23700
<L0> (entry=0x236f0):
	instruction(0x236f0)
	$U5:8 = R15 + 0x368:8
	$U6:8 = ram[$U5:8]
	CF = RCX < $U6:8
	$U7:8 = ram[$U5:8]
	OF = RCX sborrow $U7:8
	$U8:8 = ram[$U5:8]
	$U1:8 = RCX - $U8:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x236f7)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x23700:8

0x23444  MOV EAX,dword ptr [RDX]
0x23446  CMP EAX,0x4
0x23449  JNZ 0x23420
<L0> (entry=0x23444):
	instruction(0x23444)
	EAX = ram[RDX]
	RAX = zext(EAX)
	instruction(0x23446)
	CF = EAX < 0x4:4
	OF = EAX sborrow 0x4:4
	$U1:4 = EAX - 0x4:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23449)
	$U1:1 = !ZF
	if $U1:1 jump 0x23420:8

0x2c010  MOV RCX,qword ptr [RSI + RDX*0x1 + -0x8]
0x2c015  MOV RSI,qword ptr [RSI]
0x2c018  MOV qword ptr [RDI],RSI
0x2c01b  MOV qword ptr [RDI + RDX*0x1 + -0x8],RCX
0x2c020  RET
<L0> (entry=0x2c010):
	instruction(0x2c010)
	$U2:8 = 0xfffffffffffffff8:8 + RSI
	$U3:8 = RDX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	RCX = ram[$U1:8]
	instruction(0x2c015)
	RSI = ram[RSI]
	instruction(0x2c018)
	$U1:8 = RSI
	ram[RDI] = $U1:8
	instruction(0x2c01b)
	$U2:8 = 0xfffffffffffffff8:8 + RDI
	$U3:8 = RDX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	$U4:8 = RCX
	ram[$U1:8] = $U4:8
	instruction(0x2c020)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x233bc  MOV EAX,dword ptr [R12 + -0x38]
0x233c1  SUB R12,0x38
0x233c5  CMP EAX,0x4
0x233c8  JNZ 0x23398
<L0> (entry=0x233bc):
	instruction(0x233bc)
	$U1:8 = 0xffffffffffffffc8:8 + R12
	EAX = ram[$U1:8]
	RAX = zext(EAX)
	instruction(0x233c1)
	CF = R12 < 0x38:8
	OF = R12 sborrow 0x38:8
	R12 = R12 - 0x38:8
	SF = R12 s< 0x0:8
	ZF = R12 == 0x0:8
	$U1:8 = R12 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x233c5)
	CF = EAX < 0x4:4
	OF = EAX sborrow 0x4:4
	$U1:4 = EAX - 0x4:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x233c8)
	$U1:1 = !ZF
	if $U1:1 jump 0x23398:8

0xe600  ENDBR64
0xe604  PUSH R13
0xe606  XOR EAX,EAX
0xe608  MOV R13D,EDX
0xe60b  PUSH R12
0xe60d  MOV R12,-0x1
0xe614  PUSH RBP
0xe615  PUSH RBX
0xe616  MOV RBX,RSI
0xe619  MOV ESI,0x80000
0xe61e  SUB RSP,0x98
0xe625  CALL 0x27ae0
<L0> (entry=0xe600):
	instruction(0xe600)
	instruction(0xe604)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xe606)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xe608)
	R13D = EDX
	R13 = zext(R13D)
	instruction(0xe60b)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xe60d)
	R12 = 0xffffffffffffffff:8
	instruction(0xe614)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xe615)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xe616)
	RBX = RSI
	instruction(0xe619)
	RSI = 0x80000:8
	instruction(0xe61e)
	CF = RSP < 0x98:8
	OF = RSP sborrow 0x98:8
	RSP = RSP - 0x98:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xe625)
	$U1:8 = 0xe62a:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x27ae0:8

0x188a0  MOV RSI,RAX
0x188a3  MOV R11,RDI
0x188a6  CMP RCX,RDI
0x188a9  JBE 0x1893f
<L0> (entry=0x188a0):
	instruction(0x188a0)
	RSI = RAX
	instruction(0x188a3)
	R11 = RDI
	instruction(0x188a6)
	CF = RCX < RDI
	OF = RCX sborrow RDI
	$U1:8 = RCX - RDI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x188a9)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x1893f:8

0x8250  TEST R15,R15
0x8253  JZ 0x8279
<L0> (entry=0x8250):
	instruction(0x8250)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R15 & R15
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x8253)
	if ZF jump 0x8279:8

0x1afdf  MOV EDI,0xc3
0x1afe4  MOV qword ptr [RSP + 0x60],RAX
0x1afe9  CALL 0x19f10
<L0> (entry=0x1afdf):
	instruction(0x1afdf)
	RDI = 0xc3:8
	instruction(0x1afe4)
	$U1:8 = 0x60:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1afe9)
	$U1:8 = 0x1afee:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x19f10:8

0x10f84  MOV EDI,0x2
0x10f89  LEA RCX,[RSP + 0x8]
0x10f8e  MOV RDX,R10
0x10f91  XOR ESI,ESI
0x10f93  LEA RAX,[RSP + 0xe0]
0x10f9b  MOV dword ptr [RSP + 0x8],0x8
0x10fa3  MOV qword ptr [RSP + 0x10],RAX
0x10fa8  LEA RAX,[RSP + 0x20]
0x10fad  MOV dword ptr [RSP + 0xc],0x30
0x10fb5  MOV qword ptr [RSP + 0x18],RAX
0x10fba  CALL 0x104c0
<L0> (entry=0x10f84):
	instruction(0x10f84)
	RDI = 0x2:8
	instruction(0x10f89)
	$U1:8 = 0x8:8 + RSP
	RCX = $U1:8
	instruction(0x10f8e)
	RDX = R10
	instruction(0x10f91)
	CF = 0x0:1
	OF = 0x0:1
	ESI = ESI ^ ESI
	RSI = zext(ESI)
	SF = ESI s< 0x0:4
	ZF = ESI == 0x0:4
	$U1:4 = ESI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x10f93)
	$U1:8 = 0xe0:8 + RSP
	RAX = $U1:8
	instruction(0x10f9b)
	$U1:8 = 0x8:8 + RSP
	$U2:4 = 0x8:4
	ram[$U1:8] = $U2:4
	instruction(0x10fa3)
	$U1:8 = 0x10:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x10fa8)
	$U1:8 = 0x20:8 + RSP
	RAX = $U1:8
	instruction(0x10fad)
	$U1:8 = 0xc:8 + RSP
	$U2:4 = 0x30:4
	ram[$U1:8] = $U2:4
	instruction(0x10fb5)
	$U1:8 = 0x18:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x10fba)
	$U1:8 = 0x10fbf:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x104c0:8

0xb541  MOV qword ptr [RSP + 0x20],0x0
0xb54a  MOV R11D,dword ptr [0x3ae78]
0xb551  TEST R11D,R11D
0xb554  JNZ 0xb9ec
<L0> (entry=0xb541):
	instruction(0xb541)
	$U1:8 = 0x20:8 + RSP
	$U2:8 = 0x0:8
	ram[$U1:8] = $U2:8
	instruction(0xb54a)
	R11D = ram[0x3ae78:8]
	R11 = zext(R11D)
	instruction(0xb551)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = R11D & R11D
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb554)
	$U1:1 = !ZF
	if $U1:1 jump 0xb9ec:8

0x104e5  LEA RDI,[RBP + -0x43c]
0x104ec  MOV R13D,ESI
0x104ef  XOR ESI,ESI
0x104f1  MOV RBX,RDX
0x104f4  MOV qword ptr [RBP + -0x448],RDI
0x104fb  MOV R9D,R13D
0x104fe  XOR R12D,R12D
0x10501  LEA R14,[0x30cd0]
0x10508  MOV qword ptr [RBP + -0x450],RCX
0x1050f  MOV R13D,ESI
0x10512  MOV R15,-0x3333333333333333
0x1051c  NOP dword ptr [RAX]
0x10520  CMP R9D,0x1
0x10524  JZ 0x105ff
<L0> (entry=0x104e5):
	instruction(0x104e5)
	$U1:8 = RBP + 0xfffffffffffffbc4:8
	RDI = $U1:8
	instruction(0x104ec)
	R13D = ESI
	R13 = zext(R13D)
	instruction(0x104ef)
	CF = 0x0:1
	OF = 0x0:1
	ESI = ESI ^ ESI
	RSI = zext(ESI)
	SF = ESI s< 0x0:4
	ZF = ESI == 0x0:4
	$U1:4 = ESI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x104f1)
	RBX = RDX
	instruction(0x104f4)
	$U1:8 = RBP + 0xfffffffffffffbb8:8
	$U2:8 = RDI
	ram[$U1:8] = $U2:8
	instruction(0x104fb)
	R9D = R13D
	R9 = zext(R9D)
	instruction(0x104fe)
	CF = 0x0:1
	OF = 0x0:1
	R12D = R12D ^ R12D
	R12 = zext(R12D)
	SF = R12D s< 0x0:4
	ZF = R12D == 0x0:4
	$U1:4 = R12D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x10501)
	R14 = 0x30cd0:8
	instruction(0x10508)
	$U1:8 = RBP + 0xfffffffffffffbb0:8
	$U2:8 = RCX
	ram[$U1:8] = $U2:8
	instruction(0x1050f)
	R13D = ESI
	R13 = zext(R13D)
	instruction(0x10512)
	R15 = 0xcccccccccccccccd:8
	instruction(0x1051c)
	instruction(0x10520)
	CF = R9D < 0x1:4
	OF = R9D sborrow 0x1:4
	$U1:4 = R9D - 0x1:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x10524)
	if ZF jump 0x105ff:8

0x4fee  TEST byte ptr [0x3aae1],0x8
0x4ff5  JNZ 0x56ac
<L0> (entry=0x4fee):
	instruction(0x4fee)
	CF = 0x0:1
	OF = 0x0:1
	$U5:1 = ram[0x3aae1:8]
	$U1:1 = $U5:1 & 0x8:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x4ff5)
	$U1:1 = !ZF
	if $U1:1 jump 0x56ac:8

0x220da  CMP RAX,0x22
0x220de  JBE 0x220c9
<L0> (entry=0x220da):
	instruction(0x220da)
	CF = RAX < 0x22:8
	OF = RAX sborrow 0x22:8
	$U1:8 = RAX - 0x22:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x220de)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x220c9:8

0x1e69a  CMP RBX,qword ptr [RBP + -0x88]
0x1e6a1  JNZ 0x1efce
<L0> (entry=0x1e69a):
	instruction(0x1e69a)
	$U5:8 = RBP + 0xffffffffffffff78:8
	$U6:8 = ram[$U5:8]
	CF = RBX < $U6:8
	$U7:8 = ram[$U5:8]
	OF = RBX sborrow $U7:8
	$U8:8 = ram[$U5:8]
	$U1:8 = RBX - $U8:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e6a1)
	$U1:1 = !ZF
	if $U1:1 jump 0x1efce:8

0xb410  ENDBR64
0xb414  PUSH R15
0xb416  PUSH R14
0xb418  PUSH R13
0xb41a  PUSH R12
0xb41c  PUSH RBP
0xb41d  PUSH RBX
0xb41e  SUB RSP,0x3c8
0xb425  MOV dword ptr [RSP + 0xc],EDX
0xb429  MOV dword ptr [RSP + 0x18],ECX
0xb42d  TEST R9,R9
0xb430  JS 0xbf37
<L0> (entry=0xb410):
	instruction(0xb410)
	instruction(0xb414)
	$U1:8 = R15
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xb416)
	$U1:8 = R14
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xb418)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xb41a)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xb41c)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xb41d)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xb41e)
	CF = RSP < 0x3c8:8
	OF = RSP sborrow 0x3c8:8
	RSP = RSP - 0x3c8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xb425)
	$U1:8 = 0xc:8 + RSP
	$U2:4 = EDX
	ram[$U1:8] = $U2:4
	instruction(0xb429)
	$U1:8 = 0x18:8 + RSP
	$U2:4 = ECX
	ram[$U1:8] = $U2:4
	instruction(0xb42d)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R9 & R9
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb430)
	if SF jump 0xbf37:8

0x7a59  LEA RSP,[RBP + -0x28]
0x7a5d  MOV EAX,R15D
0x7a60  POP RBX
0x7a61  POP R12
0x7a63  POP R13
0x7a65  POP R14
0x7a67  POP R15
0x7a69  POP RBP
0x7a6a  RET
<L0> (entry=0x7a59):
	instruction(0x7a59)
	$U1:8 = RBP + 0xffffffffffffffd8:8
	RSP = $U1:8
	instruction(0x7a5d)
	EAX = R15D
	RAX = zext(EAX)
	instruction(0x7a60)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0x7a61)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R12 = $U1:8
	instruction(0x7a63)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R13 = $U1:8
	instruction(0x7a65)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R14 = $U1:8
	instruction(0x7a67)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R15 = $U1:8
	instruction(0x7a69)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBP = $U1:8
	instruction(0x7a6a)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x20740  MOV RAX,qword ptr [RDX + 0x8]
0x20744  ADD RDX,0x10
0x20748  MOV R15D,0x1
0x2074e  MOV qword ptr [RSP + 0x30],RAX
0x20753  MOV RAX,qword ptr [RDX]
0x20756  TEST RAX,RAX
0x20759  JNZ 0x20508
<L0> (entry=0x20740):
	instruction(0x20740)
	$U1:8 = RDX + 0x8:8
	RAX = ram[$U1:8]
	instruction(0x20744)
	CF = RDX carry 0x10:8
	OF = RDX scarry 0x10:8
	RDX = RDX + 0x10:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x20748)
	R15 = 0x1:8
	instruction(0x2074e)
	$U1:8 = 0x30:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x20753)
	RAX = ram[RDX]
	instruction(0x20756)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x20759)
	$U1:1 = !ZF
	if $U1:1 jump 0x20508:8

0x7a90  MOVZX EDI,word ptr [R13 + 0x18]
0x7a95  LEA EDX,[RDI + -0x2]
0x7a98  CMP DX,0x1
0x7a9c  JA 0x7e40
<L0> (entry=0x7a90):
	instruction(0x7a90)
	$U1:8 = R13 + 0x18:8
	$U2:2 = ram[$U1:8]
	EDI = zext($U2:2)
	RDI = zext(EDI)
	instruction(0x7a95)
	$U1:8 = RDI + 0xfffffffffffffffe:8
	EDX = $U1:4
	RDX = zext(EDX)
	instruction(0x7a98)
	CF = DX < 0x1:2
	OF = DX sborrow 0x1:2
	$U1:2 = DX - 0x1:2
	SF = $U1:2 s< 0x0:2
	ZF = $U1:2 == 0x0:2
	$U2:2 = $U1:2 & 0xff:2
	$U3:1 = count_ones($U2:2)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7a9c)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x7e40:8

0x7aae  MOVZX ECX,word ptr [R13 + 0x40]
0x7ab3  MOV R10,qword ptr [R13 + 0x28]
0x7ab7  LEA RBX,[RCX*0x8]
0x7abf  SUB RBX,RCX
0x7ac2  SHL RBX,0x3
0x7ac6  LEA RSI,[RBX + R10*0x1]
0x7aca  MOV RDX,RBX
0x7acd  CMP RSI,RAX
0x7ad0  JA 0x7cf8
<L0> (entry=0x7aae):
	instruction(0x7aae)
	$U1:8 = R13 + 0x40:8
	$U2:2 = ram[$U1:8]
	ECX = zext($U2:2)
	RCX = zext(ECX)
	instruction(0x7ab3)
	$U1:8 = R13 + 0x28:8
	R10 = ram[$U1:8]
	instruction(0x7ab7)
	$U1:8 = RCX * 0x8:8
	RBX = $U1:8
	instruction(0x7abf)
	CF = RBX < RCX
	OF = RBX sborrow RCX
	RBX = RBX - RCX
	SF = RBX s< 0x0:8
	ZF = RBX == 0x0:8
	$U1:8 = RBX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7ac2)
	$U1:8 = 0x3:8 & 0x3f:8
	$U2:8 = RBX
	RBX = RBX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RBX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RBX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RBX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RBX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x7ac6)
	$U2:8 = R10 * 0x1:8
	$U1:8 = RBX + $U2:8
	RSI = $U1:8
	instruction(0x7aca)
	RDX = RBX
	instruction(0x7acd)
	CF = RSI < RAX
	OF = RSI sborrow RAX
	$U1:8 = RSI - RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7ad0)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x7cf8:8

0x5336  CMP qword ptr [RBP + -0x4d0],R15
0x533d  JZ 0x4a06
<L0> (entry=0x5336):
	instruction(0x5336)
	$U5:8 = RBP + 0xfffffffffffffb30:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < R15
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow R15
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - R15
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x533d)
	if ZF jump 0x4a06:8

0xb97a  MOV RDI,R13
0xb97d  CALL 0x17710
<L0> (entry=0xb97a):
	instruction(0xb97a)
	RDI = R13
	instruction(0xb97d)
	$U1:8 = 0xb982:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x17710:8

0x79fe  MOV R8D,dword ptr [R13 + 0x11]
0x7a02  TEST R8D,R8D
0x7a05  JNZ 0x7a0f
<L0> (entry=0x79fe):
	instruction(0x79fe)
	$U1:8 = R13 + 0x11:8
	R8D = ram[$U1:8]
	R8 = zext(R8D)
	instruction(0x7a02)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = R8D & R8D
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7a05)
	$U1:1 = !ZF
	if $U1:1 jump 0x7a0f:8

0x22450  CMP R14,0x24
0x22454  JNZ 0x2238a
<L0> (entry=0x22450):
	instruction(0x22450)
	CF = R14 < 0x24:8
	OF = R14 sborrow 0x24:8
	$U1:8 = R14 - 0x24:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x22454)
	$U1:1 = !ZF
	if $U1:1 jump 0x2238a:8

0x228e0  ENDBR64
0x228e4  PUSH RBP
0x228e5  PXOR XMM0, XMM0
0x228e9  XOR EAX,EAX
0x228eb  MOV RBP,RSP
0x228ee  PUSH R15
0x228f0  MOV R15,0x52505f4543415254
0x228fa  PUSH R14
0x228fc  LEA R14,[RBP + -0x240]
0x22903  PUSH R13
0x22905  MOV R13,0x4a424f5f44454441
0x2290f  PUSH R12
0x22911  PUSH RBX
0x22912  LEA RBX,[0x2dfb8]
0x22919  SUB RSP,0x298
0x22920  MOV qword ptr [RBP + -0x280],RDX
0x22927  MOV word ptr [RBP + -0x34],AX
0x2292b  MOV qword ptr [RBP + -0x268],RDI
0x22932  MOV dword ptr [RBP + -0x288],ESI
0x22938  MOV qword ptr [RBP + -0x290],RCX
0x2293f  MOV qword ptr [RBP + -0x170],0x0
0x2294a  MOV dword ptr [RBP + -0x38],0x0
0x22951  MOVAPS xmmword ptr [RBP + -0x180], XMM0
0x22958  MOVUPS xmmword ptr [RBP + -0x68], XMM0
0x2295c  MOVUPS xmmword ptr [RBP + -0x58], XMM0
0x22960  MOVUPS xmmword ptr [RBP + -0x48], XMM0
0x22964  CALL 0x16090
<L0> (entry=0x228e0):
	instruction(0x228e0)
	instruction(0x228e4)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x228e5)
	XMM0 = XMM0 ^ XMM0
	instruction(0x228e9)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x228eb)
	RBP = RSP
	instruction(0x228ee)
	$U1:8 = R15
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x228f0)
	R15 = 0x52505f4543415254:8
	instruction(0x228fa)
	$U1:8 = R14
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x228fc)
	$U1:8 = RBP + 0xfffffffffffffdc0:8
	R14 = $U1:8
	instruction(0x22903)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x22905)
	R13 = 0x4a424f5f44454441:8
	instruction(0x2290f)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x22911)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x22912)
	RBX = 0x2dfb8:8
	instruction(0x22919)
	CF = RSP < 0x298:8
	OF = RSP sborrow 0x298:8
	RSP = RSP - 0x298:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x22920)
	$U1:8 = RBP + 0xfffffffffffffd80:8
	$U2:8 = RDX
	ram[$U1:8] = $U2:8
	instruction(0x22927)
	$U1:8 = RBP + 0xffffffffffffffcc:8
	$U2:2 = AX
	ram[$U1:8] = $U2:2
	instruction(0x2292b)
	$U1:8 = RBP + 0xfffffffffffffd98:8
	$U2:8 = RDI
	ram[$U1:8] = $U2:8
	instruction(0x22932)
	$U1:8 = RBP + 0xfffffffffffffd78:8
	$U2:4 = ESI
	ram[$U1:8] = $U2:4
	instruction(0x22938)
	$U1:8 = RBP + 0xfffffffffffffd70:8
	$U2:8 = RCX
	ram[$U1:8] = $U2:8
	instruction(0x2293f)
	$U1:8 = RBP + 0xfffffffffffffe90:8
	$U2:8 = 0x0:8
	ram[$U1:8] = $U2:8
	instruction(0x2294a)
	$U1:8 = RBP + 0xffffffffffffffc8:8
	$U2:4 = 0x0:4
	ram[$U1:8] = $U2:4
	instruction(0x22951)
	$U1:8 = RBP + 0xfffffffffffffe80:8
	$U2:16 = XMM0
	ram[$U1:8] = $U2:16
	instruction(0x22958)
	$U1:8 = RBP + 0xffffffffffffff98:8
	$U2:16 = XMM0
	ram[$U1:8] = $U2:16
	instruction(0x2295c)
	$U1:8 = RBP + 0xffffffffffffffa8:8
	$U2:16 = XMM0
	ram[$U1:8] = $U2:16
	instruction(0x22960)
	$U1:8 = RBP + 0xffffffffffffffb8:8
	$U2:16 = XMM0
	ram[$U1:8] = $U2:16
	instruction(0x22964)
	$U1:8 = 0x22969:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x16090:8

0x26a8b  MOV qword ptr [0x3c298],RAX
0x26a92  CMP RAX,RDI
0x26a95  JC 0x26aa0
<L0> (entry=0x26a8b):
	instruction(0x26a8b)
	$U1:8 = RAX
	ram[0x3c298:8] = $U1:8
	instruction(0x26a92)
	CF = RAX < RDI
	OF = RAX sborrow RDI
	$U1:8 = RAX - RDI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x26a95)
	if CF jump 0x26aa0:8

0x1eb51  MOV R13,qword ptr [RBP + -0x68]
0x1eb55  MOV RBX,qword ptr [RBP + -0x78]
0x1eb59  MOV byte ptr [RAX],0x2f
0x1eb5c  LEA RDI,[RAX + 0x1]
0x1eb60  JMP 0x1eb72
<L0> (entry=0x1eb51):
	instruction(0x1eb51)
	$U1:8 = RBP + 0xffffffffffffff98:8
	R13 = ram[$U1:8]
	instruction(0x1eb55)
	$U1:8 = RBP + 0xffffffffffffff88:8
	RBX = ram[$U1:8]
	instruction(0x1eb59)
	$U1:1 = 0x2f:1
	ram[RAX] = $U1:1
	instruction(0x1eb5c)
	$U1:8 = RAX + 0x1:8
	RDI = $U1:8
	instruction(0x1eb60)
	jump 0x1eb72:8

0xe560  MOV qword ptr [0x3c188],RAX
0xe567  ADD RSP,0x8
0xe56b  RET
<L0> (entry=0xe560):
	instruction(0xe560)
	$U1:8 = RAX
	ram[0x3c188:8] = $U1:8
	instruction(0xe567)
	CF = RSP carry 0x8:8
	OF = RSP scarry 0x8:8
	RSP = RSP + 0x8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xe56b)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x188b2  CMP R11,RSI
0x188b5  JNC 0x188c0
<L0> (entry=0x188b2):
	instruction(0x188b2)
	CF = R11 < RSI
	OF = R11 sborrow RSI
	$U1:8 = R11 - RSI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x188b5)
	$U1:1 = !CF
	if $U1:1 jump 0x188c0:8

0x240e9  MOV dword ptr [0x3aae4],EAX
0x240ef  CMP EAX,0x301ff
0x240f4  JLE 0x266a0
<L0> (entry=0x240e9):
	instruction(0x240e9)
	$U1:4 = EAX
	ram[0x3aae4:8] = $U1:4
	instruction(0x240ef)
	CF = EAX < 0x301ff:4
	OF = EAX sborrow 0x301ff:4
	$U1:4 = EAX - 0x301ff:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x240f4)
	$U2:1 = OF != SF
	$U1:1 = ZF || $U2:1
	if $U1:1 jump 0x266a0:8

0xb44d  LEA RAX,[R9 + R9*0x4]
0xb451  MOV R12,RDI
0xb454  MOV R13,RSI
0xb457  MOV EBX,R8D
0xb45a  SHL RAX,0x5
0xb45e  MOV R14,qword ptr [R15 + RAX*0x1]
0xb462  TEST R14,R14
0xb465  JNZ 0xb47d
<L0> (entry=0xb44d):
	instruction(0xb44d)
	$U2:8 = R9 * 0x4:8
	$U1:8 = R9 + $U2:8
	RAX = $U1:8
	instruction(0xb451)
	R12 = RDI
	instruction(0xb454)
	R13 = RSI
	instruction(0xb457)
	EBX = R8D
	RBX = zext(EBX)
	instruction(0xb45a)
	$U1:8 = 0x5:8 & 0x3f:8
	$U2:8 = RAX
	RAX = RAX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RAX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RAX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RAX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RAX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0xb45e)
	$U2:8 = RAX * 0x1:8
	$U1:8 = R15 + $U2:8
	R14 = ram[$U1:8]
	instruction(0xb462)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R14 & R14
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb465)
	$U1:1 = !ZF
	if $U1:1 jump 0xb47d:8

0x1e696  TEST AL,AL
0x1e698  JNZ 0x1e660
<L0> (entry=0x1e696):
	instruction(0x1e696)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = AL & AL
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e698)
	$U1:1 = !ZF
	if $U1:1 jump 0x1e660:8

0x238a4  LEA ESI,[RAX + RAX*0x1]
0x238a7  MOV R9D,ESI
0x238aa  SAR R9D,0x1
0x238ad  CMP ESI,-0x8
0x238b0  JBE 0x24773
<L0> (entry=0x238a4):
	instruction(0x238a4)
	$U2:8 = RAX * 0x1:8
	$U1:8 = RAX + $U2:8
	ESI = $U1:4
	RSI = zext(ESI)
	instruction(0x238a7)
	R9D = ESI
	R9 = zext(R9D)
	instruction(0x238aa)
	$U1:4 = R9D & 0x1:4
	CF = $U1:4 != 0x0:4
	OF = 0x0:1
	R9D = R9D s>> 0x1:8
	R9 = zext(R9D)
	SF = R9D s< 0x0:4
	ZF = R9D == 0x0:4
	$U2:4 = R9D & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x238ad)
	CF = ESI < 0xfffffff8:4
	OF = ESI sborrow 0xfffffff8:4
	$U1:4 = ESI - 0xfffffff8:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x238b0)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x24773:8

0x1ec98  SUB RSI,0x1
0x1ec9c  TEST SIL,0x1
0x1eca0  JZ 0x1ed30
<L0> (entry=0x1ec98):
	instruction(0x1ec98)
	CF = RSI < 0x1:8
	OF = RSI sborrow 0x1:8
	RSI = RSI - 0x1:8
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ec9c)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = SIL & 0x1:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1eca0)
	if ZF jump 0x1ed30:8

0x2c040  CMP RDX,0x80
0x2c047  JA 0x2c093
<L0> (entry=0x2c040):
	instruction(0x2c040)
	CF = RDX < 0x80:8
	OF = RDX sborrow 0x80:8
	$U1:8 = RDX - 0x80:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2c047)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x2c093:8

0x27b90  ENDBR64
0x27b94  MOV R10,RCX
0x27b97  MOV EAX,0x11
0x27b9c  SYSCALL
<L0> (entry=0x27b90):
	instruction(0x27b90)
	instruction(0x27b94)
	R10 = RCX
	instruction(0x27b97)
	RAX = 0x11:8
	instruction(0x27b9c)
	RCX = 0x27b9e:8
	$U1:1 = NT & 0x1:1
	$U2:8 = zext($U1:1)
	$U3:8 = 0x4000:8 * $U2:8
	$U4:1 = OF & 0x1:1
	$U5:8 = zext($U4:1)
	$U6:8 = 0x800:8 * $U5:8
	$U7:8 = $U3:8 | $U6:8
	$U8:1 = DF & 0x1:1
	$U9:8 = zext($U8:1)
	$U10:8 = 0x400:8 * $U9:8
	$U11:8 = $U7:8 | $U10:8
	$U12:1 = IF & 0x1:1
	$U13:8 = zext($U12:1)
	$U14:8 = 0x200:8 * $U13:8
	$U15:8 = $U11:8 | $U14:8
	$U16:1 = TF & 0x1:1
	$U17:8 = zext($U16:1)
	$U18:8 = 0x100:8 * $U17:8
	$U19:8 = $U15:8 | $U18:8
	$U20:1 = SF & 0x1:1
	$U21:8 = zext($U20:1)
	$U22:8 = 0x80:8 * $U21:8
	$U23:8 = $U19:8 | $U22:8
	$U24:1 = ZF & 0x1:1
	$U25:8 = zext($U24:1)
	$U26:8 = 0x40:8 * $U25:8
	$U27:8 = $U23:8 | $U26:8
	$U28:1 = AF & 0x1:1
	$U29:8 = zext($U28:1)
	$U30:8 = 0x10:8 * $U29:8
	$U31:8 = $U27:8 | $U30:8
	$U32:1 = PF & 0x1:1
	$U33:8 = zext($U32:1)
	$U34:8 = 0x4:8 * $U33:8
	$U35:8 = $U31:8 | $U34:8
	$U36:1 = CF & 0x1:1
	$U37:8 = zext($U36:1)
	$U38:8 = 0x1:8 * $U37:8
	R11 = $U35:8 | $U38:8
	NEXT_PC = 0x27b9e:8
	exception(0x101:4, 0x0:4)

0x7bad  LEA R12,[RSP + 0xf]
0x7bb2  AND R12,-0x10
0x7bb6  MOV RSI,R12
0x7bb9  MOV EDI,R15D
0x7bbc  MOV qword ptr [RBP + -0x50],R9
0x7bc0  MOV qword ptr [RBP + -0x48],R8
0x7bc4  MOV qword ptr [RBP + -0x40],RDX
0x7bc8  CALL 0x27b90
<L0> (entry=0x7bad):
	instruction(0x7bad)
	$U1:8 = 0xf:8 + RSP
	R12 = $U1:8
	instruction(0x7bb2)
	CF = 0x0:1
	OF = 0x0:1
	R12 = R12 & 0xfffffffffffffff0:8
	SF = R12 s< 0x0:8
	ZF = R12 == 0x0:8
	$U1:8 = R12 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7bb6)
	RSI = R12
	instruction(0x7bb9)
	EDI = R15D
	RDI = zext(EDI)
	instruction(0x7bbc)
	$U1:8 = RBP + 0xffffffffffffffb0:8
	$U2:8 = R9
	ram[$U1:8] = $U2:8
	instruction(0x7bc0)
	$U1:8 = RBP + 0xffffffffffffffb8:8
	$U2:8 = R8
	ram[$U1:8] = $U2:8
	instruction(0x7bc4)
	$U1:8 = RBP + 0xffffffffffffffc0:8
	$U2:8 = RDX
	ram[$U1:8] = $U2:8
	instruction(0x7bc8)
	$U1:8 = 0x7bcd:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x27b90:8

0x1ebae  MOV byte ptr [RAX],0x2f
0x1ebb1  LEA RDI,[RAX + 0x1]
0x1ebb5  TEST R14,R14
0x1ebb8  JNZ 0x1eb40
<L0> (entry=0x1ebae):
	instruction(0x1ebae)
	$U1:1 = 0x2f:1
	ram[RAX] = $U1:1
	instruction(0x1ebb1)
	$U1:8 = RAX + 0x1:8
	RDI = $U1:8
	instruction(0x1ebb5)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R14 & R14
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1ebb8)
	$U1:1 = !ZF
	if $U1:1 jump 0x1eb40:8

0xb865  MOV RAX,qword ptr [R12 + 0x330]
0xb86d  LEA R11,[R12 + 0x330]
0xb875  CMP RAX,-0x1
0xb879  JZ 0xb854
<L0> (entry=0xb865):
	instruction(0xb865)
	$U1:8 = 0x330:8 + R12
	RAX = ram[$U1:8]
	instruction(0xb86d)
	$U1:8 = 0x330:8 + R12
	R11 = $U1:8
	instruction(0xb875)
	CF = RAX < 0xffffffffffffffff:8
	OF = RAX sborrow 0xffffffffffffffff:8
	$U1:8 = RAX - 0xffffffffffffffff:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb879)
	if ZF jump 0xb854:8

0xe690  ENDBR64
0xe694  PUSH RBP
0xe695  MOV RBP,RDI
0xe698  PUSH RBX
0xe699  MOV RBX,RSI
0xe69c  SUB RSP,0x8
0xe6a0  MOV RSI,qword ptr [RSI + 0x8]
0xe6a4  CALL 0x28220
<L0> (entry=0xe690):
	instruction(0xe690)
	instruction(0xe694)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xe695)
	RBP = RDI
	instruction(0xe698)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xe699)
	RBX = RSI
	instruction(0xe69c)
	CF = RSP < 0x8:8
	OF = RSP sborrow 0x8:8
	RSP = RSP - 0x8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xe6a0)
	$U1:8 = RSI + 0x8:8
	RSI = ram[$U1:8]
	instruction(0xe6a4)
	$U1:8 = 0xe6a9:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x28220:8

0x7c14  TEST RDX,RDX
0x7c17  JZ 0x7cb0
<L0> (entry=0x7c14):
	instruction(0x7c14)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RDX & RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7c17)
	if ZF jump 0x7cb0:8

0x54e0  JMP 0x5297
<L0> (entry=0x54e0):
	jump 0x5297:8

0x22380  CMP R14,0x5
0x22384  JA 0x22480
<L0> (entry=0x22380):
	instruction(0x22380)
	CF = R14 < 0x5:8
	OF = R14 sborrow 0x5:8
	$U1:8 = R14 - 0x5:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x22384)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x22480:8

0x261d7  MOV EBX,EAX
0x261d9  MOV dword ptr [RBP + -0x2a8],ECX
0x261df  MOV EAX,dword ptr [RBP + -0x2b0]
0x261e5  MOV R8D,0xc0008002
0x261eb  JMP 0x23423
<L0> (entry=0x261d7):
	instruction(0x261d7)
	EBX = EAX
	RBX = zext(EBX)
	instruction(0x261d9)
	$U1:8 = RBP + 0xfffffffffffffd58:8
	$U2:4 = ECX
	ram[$U1:8] = $U2:4
	instruction(0x261df)
	$U1:8 = RBP + 0xfffffffffffffd50:8
	EAX = ram[$U1:8]
	RAX = zext(EAX)
	instruction(0x261e5)
	R8 = 0xc0008002:8
	instruction(0x261eb)
	jump 0x23423:8

0x22225  MOV RSI,qword ptr [0x3bc20]
0x2222c  TEST RSI,RSI
0x2222f  JZ 0x2223f
<L0> (entry=0x22225):
	instruction(0x22225)
	RSI = ram[0x3bc20:8]
	instruction(0x2222c)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RSI & RSI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2222f)
	if ZF jump 0x2223f:8

0x48be  AND EAX,0xfff
0x48c3  SUB RSP,RAX
0x48c6  TEST RAX,RAX
0x48c9  JNZ 0x5530
<L0> (entry=0x48be):
	instruction(0x48be)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX & 0xfff:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x48c3)
	CF = RSP < RAX
	OF = RSP sborrow RAX
	RSP = RSP - RAX
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x48c6)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x48c9)
	$U1:1 = !ZF
	if $U1:1 jump 0x5530:8

0x7c9f  SUB RDX,RAX
0x7ca2  ADD R12,RAX
0x7ca5  JMP 0x7c00
<L0> (entry=0x7c9f):
	instruction(0x7c9f)
	CF = RDX < RAX
	OF = RDX sborrow RAX
	RDX = RDX - RAX
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7ca2)
	CF = R12 carry RAX
	OF = R12 scarry RAX
	R12 = R12 + RAX
	SF = R12 s< 0x0:8
	ZF = R12 == 0x0:8
	$U1:8 = R12 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7ca5)
	jump 0x7c00:8

0xeaa7  LEA RAX,[0x3baf0]
0xeaae  CMP R14,RAX
0xeab1  JZ 0xec98
<L0> (entry=0xeaa7):
	instruction(0xeaa7)
	RAX = 0x3baf0:8
	instruction(0xeaae)
	CF = R14 < RAX
	OF = R14 sborrow RAX
	$U1:8 = R14 - RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xeab1)
	if ZF jump 0xec98:8

0x2213a  MOV RAX,qword ptr [0x3bb50]
0x22141  TEST RAX,RAX
0x22144  JZ 0x2214a
<L0> (entry=0x2213a):
	instruction(0x2213a)
	RAX = ram[0x3bb50:8]
	instruction(0x22141)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x22144)
	if ZF jump 0x2214a:8

0x27e60  ENDBR64
0x27e64  MOV EAX,0x3f
0x27e69  SYSCALL
<L0> (entry=0x27e60):
	instruction(0x27e60)
	instruction(0x27e64)
	RAX = 0x3f:8
	instruction(0x27e69)
	RCX = 0x27e6b:8
	$U1:1 = NT & 0x1:1
	$U2:8 = zext($U1:1)
	$U3:8 = 0x4000:8 * $U2:8
	$U4:1 = OF & 0x1:1
	$U5:8 = zext($U4:1)
	$U6:8 = 0x800:8 * $U5:8
	$U7:8 = $U3:8 | $U6:8
	$U8:1 = DF & 0x1:1
	$U9:8 = zext($U8:1)
	$U10:8 = 0x400:8 * $U9:8
	$U11:8 = $U7:8 | $U10:8
	$U12:1 = IF & 0x1:1
	$U13:8 = zext($U12:1)
	$U14:8 = 0x200:8 * $U13:8
	$U15:8 = $U11:8 | $U14:8
	$U16:1 = TF & 0x1:1
	$U17:8 = zext($U16:1)
	$U18:8 = 0x100:8 * $U17:8
	$U19:8 = $U15:8 | $U18:8
	$U20:1 = SF & 0x1:1
	$U21:8 = zext($U20:1)
	$U22:8 = 0x80:8 * $U21:8
	$U23:8 = $U19:8 | $U22:8
	$U24:1 = ZF & 0x1:1
	$U25:8 = zext($U24:1)
	$U26:8 = 0x40:8 * $U25:8
	$U27:8 = $U23:8 | $U26:8
	$U28:1 = AF & 0x1:1
	$U29:8 = zext($U28:1)
	$U30:8 = 0x10:8 * $U29:8
	$U31:8 = $U27:8 | $U30:8
	$U32:1 = PF & 0x1:1
	$U33:8 = zext($U32:1)
	$U34:8 = 0x4:8 * $U33:8
	$U35:8 = $U31:8 | $U34:8
	$U36:1 = CF & 0x1:1
	$U37:8 = zext($U36:1)
	$U38:8 = 0x1:8 * $U37:8
	R11 = $U35:8 | $U38:8
	NEXT_PC = 0x27e6b:8
	exception(0x101:4, 0x0:4)

0xb4a7  TEST byte ptr [R14 + 0x31d],0x10
0xb4af  JNZ 0xb470
<L0> (entry=0xb4a7):
	instruction(0xb4a7)
	$U5:8 = R14 + 0x31d:8
	CF = 0x0:1
	OF = 0x0:1
	$U6:1 = ram[$U5:8]
	$U1:1 = $U6:1 & 0x10:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb4af)
	$U1:1 = !ZF
	if $U1:1 jump 0xb470:8

0x14550  MOV ESI,dword ptr [RCX]
0x14552  MOV dword ptr [RAX + 0x2f4],ESI
0x14558  MOV EDX,dword ptr [RCX + 0x8]
0x1455b  MOV R8D,dword ptr [RCX + 0x4]
0x1455f  LEA EDI,[RDX + -0x1]
0x14562  TEST EDI,EDX
0x14564  JNZ 0x145f7
<L0> (entry=0x14550):
	instruction(0x14550)
	ESI = ram[RCX]
	RSI = zext(ESI)
	instruction(0x14552)
	$U1:8 = RAX + 0x2f4:8
	$U2:4 = ESI
	ram[$U1:8] = $U2:4
	instruction(0x14558)
	$U1:8 = RCX + 0x8:8
	EDX = ram[$U1:8]
	RDX = zext(EDX)
	instruction(0x1455b)
	$U1:8 = RCX + 0x4:8
	R8D = ram[$U1:8]
	R8 = zext(R8D)
	instruction(0x1455f)
	$U1:8 = RDX + 0xffffffffffffffff:8
	EDI = $U1:4
	RDI = zext(EDI)
	instruction(0x14562)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EDI & EDX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x14564)
	$U1:1 = !ZF
	if $U1:1 jump 0x145f7:8

0x2788b  MOV ECX,0x1000
0x27890  LEA RSI,[0x2fee9]
0x27897  JMP 0x278d0
<L0> (entry=0x2788b):
	instruction(0x2788b)
	RCX = 0x1000:8
	instruction(0x27890)
	RSI = 0x2fee9:8
	instruction(0x27897)
	jump 0x278d0:8

0x9bb0  MOV EAX,dword ptr [RDX]
0x9bb2  CMP EAX,0x4
0x9bb5  JNZ 0x9b90
<L0> (entry=0x9bb0):
	instruction(0x9bb0)
	EAX = ram[RDX]
	RAX = zext(EAX)
	instruction(0x9bb2)
	CF = EAX < 0x4:4
	OF = EAX sborrow 0x4:4
	$U1:4 = EAX - 0x4:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x9bb5)
	$U1:1 = !ZF
	if $U1:1 jump 0x9b90:8

0x808d  ADD RBX,0x1
0x8091  CMP dword ptr [R12 + RBX*0x4 + 0x24],0x1
0x8097  JZ 0x8238
<L0> (entry=0x808d):
	instruction(0x808d)
	CF = RBX carry 0x1:8
	OF = RBX scarry 0x1:8
	RBX = RBX + 0x1:8
	SF = RBX s< 0x0:8
	ZF = RBX == 0x0:8
	$U1:8 = RBX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x8091)
	$U6:8 = 0x24:8 + R12
	$U7:8 = RBX * 0x4:8
	$U5:8 = $U6:8 + $U7:8
	$U8:4 = ram[$U5:8]
	CF = $U8:4 < 0x1:4
	$U9:4 = ram[$U5:8]
	OF = $U9:4 sborrow 0x1:4
	$U10:4 = ram[$U5:8]
	$U1:4 = $U10:4 - 0x1:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x8097)
	if ZF jump 0x8238:8

0x809d  MOV RDX,qword ptr [0x39ac0]
0x80a4  MOV RAX,RBX
0x80a7  MOV RDI,R13
0x80aa  SHL RAX,0x4
0x80ae  LEA RAX,[RDX + RAX*0x1 + -0x10]
0x80b3  MOV RDX,qword ptr [RAX + 0x8]
0x80b7  MOV RSI,qword ptr [RAX]
0x80ba  CALL 0x2bfa0
<L0> (entry=0x809d):
	instruction(0x809d)
	RDX = ram[0x39ac0:8]
	instruction(0x80a4)
	RAX = RBX
	instruction(0x80a7)
	RDI = R13
	instruction(0x80aa)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RAX
	RAX = RAX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RAX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RAX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RAX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RAX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x80ae)
	$U2:8 = 0xfffffffffffffff0:8 + RDX
	$U3:8 = RAX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	RAX = $U1:8
	instruction(0x80b3)
	$U1:8 = RAX + 0x8:8
	RDX = ram[$U1:8]
	instruction(0x80b7)
	RSI = ram[RAX]
	instruction(0x80ba)
	$U1:8 = 0x80bf:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2bfa0:8

0xb955  MOV qword ptr [RSP + 0x58],0x0
0xb95e  TEST EBX,0x4000000
0xb964  JNZ 0xbddf
<L0> (entry=0xb955):
	instruction(0xb955)
	$U1:8 = 0x58:8 + RSP
	$U2:8 = 0x0:8
	ram[$U1:8] = $U2:8
	instruction(0xb95e)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EBX & 0x4000000:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb964)
	$U1:1 = !ZF
	if $U1:1 jump 0xbddf:8

0x207dd  CALL 0x18970
<L0> (entry=0x207dd):
	$U1:8 = 0x207e2:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x18970:8

0x20495  LEA RDX,[RAX + 0x8]
0x20499  MOV RAX,qword ptr [RAX + 0x8]
0x2049d  LEA RSI,[0x21290]
0x204a4  MOV qword ptr [0x3aae8],0x0
0x204af  MOV qword ptr [0x3ab48],RDX
0x204b6  MOV qword ptr [RSP + 0x58],RSI
0x204bb  MOV qword ptr [0x3ab00],0x0
0x204c6  TEST RAX,RAX
0x204c9  JZ 0x207d8
<L0> (entry=0x20495):
	instruction(0x20495)
	$U1:8 = RAX + 0x8:8
	RDX = $U1:8
	instruction(0x20499)
	$U1:8 = RAX + 0x8:8
	RAX = ram[$U1:8]
	instruction(0x2049d)
	RSI = 0x21290:8
	instruction(0x204a4)
	$U1:8 = 0x0:8
	ram[0x3aae8:8] = $U1:8
	instruction(0x204af)
	$U1:8 = RDX
	ram[0x3ab48:8] = $U1:8
	instruction(0x204b6)
	$U1:8 = 0x58:8 + RSP
	$U2:8 = RSI
	ram[$U1:8] = $U2:8
	instruction(0x204bb)
	$U1:8 = 0x0:8
	ram[0x3ab00:8] = $U1:8
	instruction(0x204c6)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x204c9)
	if ZF jump 0x207d8:8

0xb470  MOV R14,qword ptr [R14 + 0x18]
0xb474  TEST R14,R14
0xb477  JZ 0xb518
<L0> (entry=0xb470):
	instruction(0xb470)
	$U1:8 = R14 + 0x18:8
	R14 = ram[$U1:8]
	instruction(0xb474)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R14 & R14
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb477)
	if ZF jump 0xb518:8

0x1e0f9  MOV R9,qword ptr [RSP + 0x8]
0x1e0fe  LEA RDX,[0x2f299]
0x1e105  JMP 0x1e092
<L0> (entry=0x1e0f9):
	instruction(0x1e0f9)
	$U1:8 = 0x8:8 + RSP
	R9 = ram[$U1:8]
	instruction(0x1e0fe)
	RDX = 0x2f299:8
	instruction(0x1e105)
	jump 0x1e092:8

0x1aa59  MOVQ XMM4, RBP
0x1aa5e  XOR EDX,EDX
0x1aa60  MOV RSI,R14
0x1aa63  MOV EDI,0xf
0x1aa68  MOVQ XMM0, qword ptr [RSP + 0x20]
0x1aa6e  MOV qword ptr [RSP + 0x40],RAX
0x1aa73  LEA RBP,[RSP + 0xa0]
0x1aa7b  PUNPCKLQDQ XMM0, XMM4
0x1aa7f  MOVAPS xmmword ptr [RSP + 0x20], XMM0
0x1aa84  CALL 0x18d70
<L0> (entry=0x1aa59):
	instruction(0x1aa59)
	XMM4 = zext(RBP)
	instruction(0x1aa5e)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX ^ EDX
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1aa60)
	RSI = R14
	instruction(0x1aa63)
	RDI = 0xf:8
	instruction(0x1aa68)
	$U1:8 = 0x20:8 + RSP
	$U2:8 = ram[$U1:8]
	XMM0 = zext($U2:8)
	instruction(0x1aa6e)
	$U1:8 = 0x40:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1aa73)
	$U1:8 = 0xa0:8 + RSP
	RBP = $U1:8
	instruction(0x1aa7b)
	XMM0_Qb = XMM4_Qa
	instruction(0x1aa7f)
	$U1:8 = 0x20:8 + RSP
	$U2:16 = XMM0
	ram[$U1:8] = $U2:16
	instruction(0x1aa84)
	$U1:8 = 0x1aa89:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x18d70:8

0x1ea1f  LEA RAX,[0x30c70]
0x1ea26  MOV R13,qword ptr [RBP + -0x70]
0x1ea2a  MOV qword ptr [RBP + -0x48],0x0
0x1ea32  MOV R12,0x77682d6362696c67
0x1ea3c  MOV qword ptr [RBP + -0x50],RAX
0x1ea40  MOV EAX,dword ptr [RBP + -0x8c]
0x1ea46  MOV dword ptr [RBP + -0x38],EAX
0x1ea49  MOV RAX,qword ptr [RBP + -0x98]
0x1ea50  MOV qword ptr [RBP + -0x40],RAX
0x1ea54  JMP 0x1ea9b
<L0> (entry=0x1ea1f):
	instruction(0x1ea1f)
	RAX = 0x30c70:8
	instruction(0x1ea26)
	$U1:8 = RBP + 0xffffffffffffff90:8
	R13 = ram[$U1:8]
	instruction(0x1ea2a)
	$U1:8 = RBP + 0xffffffffffffffb8:8
	$U2:8 = 0x0:8
	ram[$U1:8] = $U2:8
	instruction(0x1ea32)
	R12 = 0x77682d6362696c67:8
	instruction(0x1ea3c)
	$U1:8 = RBP + 0xffffffffffffffb0:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1ea40)
	$U1:8 = RBP + 0xffffffffffffff74:8
	EAX = ram[$U1:8]
	RAX = zext(EAX)
	instruction(0x1ea46)
	$U1:8 = RBP + 0xffffffffffffffc8:8
	$U2:4 = EAX
	ram[$U1:8] = $U2:4
	instruction(0x1ea49)
	$U1:8 = RBP + 0xffffffffffffff68:8
	RAX = ram[$U1:8]
	instruction(0x1ea50)
	$U1:8 = RBP + 0xffffffffffffffc0:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1ea54)
	jump 0x1ea9b:8

0x10671  NOP dword ptr [RAX]
0x10678  MOVZX EAX,byte ptr [RDX + 0x1]
0x1067c  CMP AL,0x30
0x1067e  JZ 0x1097d
<L0> (entry=0x10671):
	instruction(0x10671)
	instruction(0x10678)
	$U1:8 = RDX + 0x1:8
	$U2:1 = ram[$U1:8]
	EAX = zext($U2:1)
	RAX = zext(EAX)
	instruction(0x1067c)
	CF = AL < 0x30:1
	OF = AL sborrow 0x30:1
	$U1:1 = AL - 0x30:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1067e)
	if ZF jump 0x1097d:8

0x22156  ADD qword ptr [RAX + 0x8],R12
0x2215a  MOV RAX,qword ptr [0x3bb58]
0x22161  TEST RAX,RAX
0x22164  JZ 0x2216a
<L0> (entry=0x22156):
	instruction(0x22156)
	$U4:8 = RAX + 0x8:8
	$U5:8 = ram[$U4:8]
	CF = $U5:8 carry R12
	$U6:8 = ram[$U4:8]
	OF = $U6:8 scarry R12
	$U7:8 = ram[$U4:8]
	$U8:8 = $U7:8 + R12
	ram[$U4:8] = $U8:8
	$U9:8 = ram[$U4:8]
	SF = $U9:8 s< 0x0:8
	$U10:8 = ram[$U4:8]
	ZF = $U10:8 == 0x0:8
	$U11:8 = ram[$U4:8]
	$U1:8 = $U11:8 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2215a)
	RAX = ram[0x3bb58:8]
	instruction(0x22161)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x22164)
	if ZF jump 0x2216a:8

0x1a824  MOV dword ptr [0x3ab50],R8D
0x1a82b  MOV dword ptr [0x3ab60],EDX
0x1a831  MOV qword ptr [RSP + 0x98],-0x1
0x1a83d  MOV dword ptr [RSP + 0x94],0x0
0x1a848  MOVQ qword ptr [0x3ab58], XMM0
0x1a850  CMP R8D,0x1
0x1a854  JZ 0x1af48
<L0> (entry=0x1a824):
	instruction(0x1a824)
	$U1:4 = R8D
	ram[0x3ab50:8] = $U1:4
	instruction(0x1a82b)
	$U1:4 = EDX
	ram[0x3ab60:8] = $U1:4
	instruction(0x1a831)
	$U1:8 = 0x98:8 + RSP
	$U2:8 = 0xffffffffffffffff:8
	ram[$U1:8] = $U2:8
	instruction(0x1a83d)
	$U1:8 = 0x94:8 + RSP
	$U2:4 = 0x0:4
	ram[$U1:8] = $U2:4
	instruction(0x1a848)
	$U1:8 = XMM0_Qa
	ram[0x3ab58:8] = $U1:8
	instruction(0x1a850)
	CF = R8D < 0x1:4
	OF = R8D sborrow 0x1:4
	$U1:4 = R8D - 0x1:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1a854)
	if ZF jump 0x1af48:8

0x1af69  MOV EDI,0xc2
0x1af6e  MOV RBX,RAX
0x1af71  CALL 0x19f10
<L0> (entry=0x1af69):
	instruction(0x1af69)
	RDI = 0xc2:8
	instruction(0x1af6e)
	RBX = RAX
	instruction(0x1af71)
	$U1:8 = 0x1af76:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x19f10:8

0xe3f4  ADD RAX,0xf
0xe3f8  AND RAX,-0x10
0xe3fc  LEA RCX,[RAX + RBX*0x1]
0xe400  MOV qword ptr [0x3c188],RAX
0xe407  CMP RCX,RDX
0xe40a  JNC 0xe430
<L0> (entry=0xe3f4):
	instruction(0xe3f4)
	CF = RAX carry 0xf:8
	OF = RAX scarry 0xf:8
	RAX = RAX + 0xf:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xe3f8)
	CF = 0x0:1
	OF = 0x0:1
	RAX = RAX & 0xfffffffffffffff0:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xe3fc)
	$U2:8 = RBX * 0x1:8
	$U1:8 = RAX + $U2:8
	RCX = $U1:8
	instruction(0xe400)
	$U1:8 = RAX
	ram[0x3c188:8] = $U1:8
	instruction(0xe407)
	CF = RCX < RDX
	OF = RCX sborrow RDX
	$U1:8 = RCX - RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xe40a)
	$U1:1 = !CF
	if $U1:1 jump 0xe430:8

0x1ec62  SUB RDI,0x10
0x1ec66  TEST RCX,RCX
0x1ec69  JNZ 0x1ec20
<L0> (entry=0x1ec62):
	instruction(0x1ec62)
	CF = RDI < 0x10:8
	OF = RDI sborrow 0x10:8
	RDI = RDI - 0x10:8
	SF = RDI s< 0x0:8
	ZF = RDI == 0x0:8
	$U1:8 = RDI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ec66)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RCX & RCX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1ec69)
	$U1:1 = !ZF
	if $U1:1 jump 0x1ec20:8

0x23878  MOV RSI,R8
0x2387b  SUB RSI,RAX
0x2387e  MOV RAX,RSI
0x23881  MOV qword ptr [RCX + RAX*0x8],RDX
0x23885  MOV RAX,qword ptr [RDX + 0x10]
0x23889  ADD RDX,0x10
0x2388d  TEST RAX,RAX
0x23890  JZ 0x238be
<L0> (entry=0x23878):
	instruction(0x23878)
	RSI = R8
	instruction(0x2387b)
	CF = RSI < RAX
	OF = RSI sborrow RAX
	RSI = RSI - RAX
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2387e)
	RAX = RSI
	instruction(0x23881)
	$U2:8 = RAX * 0x8:8
	$U1:8 = RCX + $U2:8
	$U3:8 = RDX
	ram[$U1:8] = $U3:8
	instruction(0x23885)
	$U1:8 = RDX + 0x10:8
	RAX = ram[$U1:8]
	instruction(0x23889)
	CF = RDX carry 0x10:8
	OF = RDX scarry 0x10:8
	RDX = RDX + 0x10:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2388d)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23890)
	if ZF jump 0x238be:8

0x2398f  MOV RAX,qword ptr [R15 + 0xb0]
0x23996  TEST RAX,RAX
0x23999  JZ 0x239d3
<L0> (entry=0x2398f):
	instruction(0x2398f)
	$U1:8 = R15 + 0xb0:8
	RAX = ram[$U1:8]
	instruction(0x23996)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23999)
	if ZF jump 0x239d3:8

0x279ab  CMP RAX,-0x1000
0x279b1  JA 0x279b8
<L0> (entry=0x279ab):
	instruction(0x279ab)
	CF = RAX < 0xfffffffffffff000:8
	OF = RAX sborrow 0xfffffffffffff000:8
	$U1:8 = RAX - 0xfffffffffffff000:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x279b1)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x279b8:8

0x1963e  CMP dword ptr [0x3ab54],0x6
0x19645  JLE 0x19714
<L0> (entry=0x1963e):
	instruction(0x1963e)
	$U5:4 = ram[0x3ab54:8]
	CF = $U5:4 < 0x6:4
	$U6:4 = ram[0x3ab54:8]
	OF = $U6:4 sborrow 0x6:4
	$U7:4 = ram[0x3ab54:8]
	$U1:4 = $U7:4 - 0x6:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x19645)
	$U2:1 = OF != SF
	$U1:1 = ZF || $U2:1
	if $U1:1 jump 0x19714:8

0x23935  MOV RAX,qword ptr [R15 + 0x178]
0x2393c  TEST RAX,RAX
0x2393f  JZ 0x2397a
<L0> (entry=0x23935):
	instruction(0x23935)
	$U1:8 = R15 + 0x178:8
	RAX = ram[$U1:8]
	instruction(0x2393c)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2393f)
	if ZF jump 0x2397a:8

0x984b  MOV RAX,qword ptr [RBP + -0x48]
0x984f  ADD R14,qword ptr [RBP + -0x40]
0x9853  ADD R13,0x8
0x9857  ADD R12,0x8
0x985b  MOV qword ptr [R14 + RAX*0x1],R14
0x985f  LEA RAX,[0x2ed6d]
0x9866  MOV qword ptr [R13 + -0x8],R14
0x986a  MOV qword ptr [R14 + 0x8],RAX
0x986e  MOV RAX,qword ptr [R12]
0x9872  MOV qword ptr [R14 + 0x10],0x0
0x987a  MOV qword ptr [R14 + 0x20],RAX
0x987e  LEA RAX,[RBX + RAX*0x1 + 0x1]
0x9883  MOV qword ptr [R14 + 0x18],RBX
0x9887  CMP byte ptr [RBX],0x2f
0x988a  JNZ 0x9b3a
<L0> (entry=0x984b):
	instruction(0x984b)
	$U1:8 = RBP + 0xffffffffffffffb8:8
	RAX = ram[$U1:8]
	instruction(0x984f)
	$U4:8 = RBP + 0xffffffffffffffc0:8
	$U5:8 = ram[$U4:8]
	CF = R14 carry $U5:8
	$U6:8 = ram[$U4:8]
	OF = R14 scarry $U6:8
	$U7:8 = ram[$U4:8]
	R14 = R14 + $U7:8
	SF = R14 s< 0x0:8
	ZF = R14 == 0x0:8
	$U1:8 = R14 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x9853)
	CF = R13 carry 0x8:8
	OF = R13 scarry 0x8:8
	R13 = R13 + 0x8:8
	SF = R13 s< 0x0:8
	ZF = R13 == 0x0:8
	$U1:8 = R13 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x9857)
	CF = R12 carry 0x8:8
	OF = R12 scarry 0x8:8
	R12 = R12 + 0x8:8
	SF = R12 s< 0x0:8
	ZF = R12 == 0x0:8
	$U1:8 = R12 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x985b)
	$U2:8 = RAX * 0x1:8
	$U1:8 = R14 + $U2:8
	$U3:8 = R14
	ram[$U1:8] = $U3:8
	instruction(0x985f)
	RAX = 0x2ed6d:8
	instruction(0x9866)
	$U1:8 = R13 + 0xfffffffffffffff8:8
	$U2:8 = R14
	ram[$U1:8] = $U2:8
	instruction(0x986a)
	$U1:8 = R14 + 0x8:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x986e)
	RAX = ram[R12]
	instruction(0x9872)
	$U1:8 = R14 + 0x10:8
	$U2:8 = 0x0:8
	ram[$U1:8] = $U2:8
	instruction(0x987a)
	$U1:8 = R14 + 0x20:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x987e)
	$U2:8 = 0x1:8 + RBX
	$U3:8 = RAX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	RAX = $U1:8
	instruction(0x9883)
	$U1:8 = R14 + 0x18:8
	$U2:8 = RBX
	ram[$U1:8] = $U2:8
	instruction(0x9887)
	$U5:1 = ram[RBX]
	CF = $U5:1 < 0x2f:1
	$U6:1 = ram[RBX]
	OF = $U6:1 sborrow 0x2f:1
	$U7:1 = ram[RBX]
	$U1:1 = $U7:1 - 0x2f:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x988a)
	$U1:1 = !ZF
	if $U1:1 jump 0x9b3a:8

0x8174  MOV RCX,qword ptr [RBP + -0x108]
0x817b  MOV R8D,dword ptr [RBP + -0xc8]
0x8182  TEST RAX,RAX
0x8185  MOV qword ptr [RCX],RAX
0x8188  JZ 0x8608
<L0> (entry=0x8174):
	instruction(0x8174)
	$U1:8 = RBP + 0xfffffffffffffef8:8
	RCX = ram[$U1:8]
	instruction(0x817b)
	$U1:8 = RBP + 0xffffffffffffff38:8
	R8D = ram[$U1:8]
	R8 = zext(R8D)
	instruction(0x8182)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x8185)
	$U1:8 = RAX
	ram[RCX] = $U1:8
	instruction(0x8188)
	if ZF jump 0x8608:8

0x1af9a  MOV EDI,0xbd
0x1af9f  MOV qword ptr [RSP + 0x18],RBP
0x1afa4  MOV qword ptr [RSP + 0x40],RAX
0x1afa9  CALL 0x19f10
<L0> (entry=0x1af9a):
	instruction(0x1af9a)
	RDI = 0xbd:8
	instruction(0x1af9f)
	$U1:8 = 0x18:8 + RSP
	$U2:8 = RBP
	ram[$U1:8] = $U2:8
	instruction(0x1afa4)
	$U1:8 = 0x40:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1afa9)
	$U1:8 = 0x1afae:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x19f10:8

0x98b0  MOV RBX,qword ptr [0x3b040]
0x98b7  LEA RAX,[0x3baf0]
0x98be  MOV qword ptr [R14],0x0
0x98c5  MOV qword ptr [R13],0x0
0x98cd  MOV qword ptr [0x3c170],0x1a
0x98d8  TEST RBX,RBX
0x98db  CMOVZ RBX,RAX
0x98df  MOVZX EAX,byte ptr [RBX + 0x31c]
0x98e6  AND EAX,0x3
0x98e9  CMP AL,0x2
0x98eb  JZ 0x9b1b
<L0> (entry=0x98b0):
	instruction(0x98b0)
	RBX = ram[0x3b040:8]
	instruction(0x98b7)
	RAX = 0x3baf0:8
	instruction(0x98be)
	$U1:8 = 0x0:8
	ram[R14] = $U1:8
	instruction(0x98c5)
	$U1:8 = 0x0:8
	ram[R13] = $U1:8
	instruction(0x98cd)
	$U1:8 = 0x1a:8
	ram[0x3c170:8] = $U1:8
	instruction(0x98d8)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RBX & RBX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x98db)
	$U1:8 = RAX
	$U2:1 = !ZF
	if $U2:1 jump <L657>
<L1>:
	RBX = $U1:8
<L2>:
	instruction(0x98df)
	$U1:8 = RBX + 0x31c:8
	$U2:1 = ram[$U1:8]
	EAX = zext($U2:1)
	RAX = zext(EAX)
	instruction(0x98e6)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX & 0x3:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x98e9)
	CF = AL < 0x2:1
	OF = AL sborrow 0x2:1
	$U1:1 = AL - 0x2:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x98eb)
	if ZF jump 0x9b1b:8

0x1f2e0  ENDBR64
0x1f2e4  LEA RAX,[0xe4f0]
0x1f2eb  MOV qword ptr [0x3aa70],RAX
0x1f2f2  LEA RAX,[0xe530]
0x1f2f9  MOV qword ptr [0x3aa68],RAX
0x1f300  LEA RAX,[0xe3d0]
0x1f307  MOV qword ptr [0x3aa60],RAX
0x1f30e  LEA RAX,[0xe570]
0x1f315  MOV qword ptr [0x3aa58],RAX
0x1f31c  RET
<L0> (entry=0x1f2e0):
	instruction(0x1f2e0)
	instruction(0x1f2e4)
	RAX = 0xe4f0:8
	instruction(0x1f2eb)
	$U1:8 = RAX
	ram[0x3aa70:8] = $U1:8
	instruction(0x1f2f2)
	RAX = 0xe530:8
	instruction(0x1f2f9)
	$U1:8 = RAX
	ram[0x3aa68:8] = $U1:8
	instruction(0x1f300)
	RAX = 0xe3d0:8
	instruction(0x1f307)
	$U1:8 = RAX
	ram[0x3aa60:8] = $U1:8
	instruction(0x1f30e)
	RAX = 0xe570:8
	instruction(0x1f315)
	$U1:8 = RAX
	ram[0x3aa58:8] = $U1:8
	instruction(0x1f31c)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x7bf6  NOP word ptr CS:[RAX + RAX*0x1]
0x7c00  MOV RAX,qword ptr [R12 + 0x8]
0x7c05  MOV RCX,qword ptr [R12]
0x7c09  XOR RAX,R10
0x7c0c  XOR RCX,R11
0x7c0f  OR RAX,RCX
0x7c12  JNZ 0x7c70
<L0> (entry=0x7bf6):
	instruction(0x7bf6)
	$U2:8 = RAX * 0x1:8
	$U1:8 = RAX + $U2:8
	instruction(0x7c00)
	$U1:8 = 0x8:8 + R12
	RAX = ram[$U1:8]
	instruction(0x7c05)
	RCX = ram[R12]
	instruction(0x7c09)
	CF = 0x0:1
	OF = 0x0:1
	RAX = RAX ^ R10
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7c0c)
	CF = 0x0:1
	OF = 0x0:1
	RCX = RCX ^ R11
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7c0f)
	CF = 0x0:1
	OF = 0x0:1
	RAX = RAX | RCX
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7c12)
	$U1:1 = !ZF
	if $U1:1 jump 0x7c70:8

0x5b1c  MOV RDX,R14
0x5b1f  MOV RSI,RBP
0x5b22  MOV RDI,RAX
0x5b25  CALL 0x2bfb0
<L0> (entry=0x5b1c):
	instruction(0x5b1c)
	RDX = R14
	instruction(0x5b1f)
	RSI = RBP
	instruction(0x5b22)
	RDI = RAX
	instruction(0x5b25)
	$U1:8 = 0x5b2a:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2bfb0:8

0x4ec0  MOV dword ptr [RBP + -0x4a0],EAX
0x4ec6  MOV R14,qword ptr [RBP + -0x4d0]
0x4ecd  TEST EAX,EAX
0x4ecf  JNZ 0x4edb
<L0> (entry=0x4ec0):
	instruction(0x4ec0)
	$U1:8 = RBP + 0xfffffffffffffb60:8
	$U2:4 = EAX
	ram[$U1:8] = $U2:4
	instruction(0x4ec6)
	$U1:8 = RBP + 0xfffffffffffffb30:8
	R14 = ram[$U1:8]
	instruction(0x4ecd)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x4ecf)
	$U1:1 = !ZF
	if $U1:1 jump 0x4edb:8

0x1b027  MOV RAX,qword ptr [RSP + 0x98]
0x1b02f  MOV R8D,dword ptr [RSP + 0x7c]
0x1b034  MOV qword ptr [RSP + 0x30],RAX
0x1b039  LEA RAX,[RAX + RAX*0x2]
0x1b03d  TEST RAX,RAX
0x1b040  LEA R12,[RAX + 0x3]
0x1b044  CMOVNS R12,RAX
0x1b048  MOV RAX,0xfffffffffffffff
0x1b052  SAR R12,0x2
0x1b056  CMP R12,RAX
0x1b059  CMOVA R12,RAX
0x1b05d  MOV EAX,0x4040
0x1b062  CMP R12,RAX
0x1b065  CMOVC R12,RAX
0x1b069  JMP 0x1a8ed
<L0> (entry=0x1b027):
	instruction(0x1b027)
	$U1:8 = 0x98:8 + RSP
	RAX = ram[$U1:8]
	instruction(0x1b02f)
	$U1:8 = 0x7c:8 + RSP
	R8D = ram[$U1:8]
	R8 = zext(R8D)
	instruction(0x1b034)
	$U1:8 = 0x30:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1b039)
	$U2:8 = RAX * 0x2:8
	$U1:8 = RAX + $U2:8
	RAX = $U1:8
	instruction(0x1b03d)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1b040)
	$U1:8 = RAX + 0x3:8
	R12 = $U1:8
	instruction(0x1b044)
	$U3:1 = !SF
	$U1:8 = RAX
	$U2:1 = !$U3:1
	if $U2:1 jump <L273>
<L1>:
	R12 = $U1:8
<L2>:
	instruction(0x1b048)
	RAX = 0xfffffffffffffff:8
	instruction(0x1b052)
	$U1:8 = 0x2:8 & 0x3f:8
	$U2:8 = R12
	R12 = R12 s>> $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 s>> $U5:8
	$U7:8 = $U6:8 & 0x1:8
	$U4:1 = $U7:8 != 0x0:8
	$U8:1 = !$U3:1
	$U9:1 = $U8:1 && CF
	$U10:1 = $U3:1 && $U4:1
	CF = $U9:1 || $U10:1
	$U11:1 = $U1:8 == 0x1:8
	$U12:1 = !$U11:1
	OF = $U12:1 && OF
	$U13:1 = $U1:8 != 0x0:8
	$U14:1 = R12 s< 0x0:8
	$U15:1 = !$U13:1
	$U16:1 = $U15:1 && SF
	$U17:1 = $U13:1 && $U14:1
	SF = $U16:1 || $U17:1
	$U18:1 = R12 == 0x0:8
	$U19:1 = !$U13:1
	$U20:1 = $U19:1 && ZF
	$U21:1 = $U13:1 && $U18:1
	ZF = $U20:1 || $U21:1
	$U23:8 = R12 & 0xff:8
	$U24:1 = count_ones($U23:8)
	$U25:1 = $U24:1 & 0x1:1
	$U22:1 = $U25:1 == 0x0:1
	$U26:1 = !$U13:1
	$U27:1 = $U26:1 && PF
	$U28:1 = $U13:1 && $U22:1
	PF = $U27:1 || $U28:1
	instruction(0x1b056)
	CF = R12 < RAX
	OF = R12 sborrow RAX
	$U1:8 = R12 - RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1b059)
	$U4:1 = CF || ZF
	$U3:1 = !$U4:1
	$U1:8 = RAX
	$U2:1 = !$U3:1
	if $U2:1 jump <L275>
<L3>:
	R12 = $U1:8
<L4>:
	instruction(0x1b05d)
	RAX = 0x4040:8
	instruction(0x1b062)
	CF = R12 < RAX
	OF = R12 sborrow RAX
	$U1:8 = R12 - RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1b065)
	$U1:8 = RAX
	$U2:1 = !CF
	if $U2:1 jump <L277>
<L5>:
	R12 = $U1:8
<L6>:
	instruction(0x1b069)
	jump 0x1a8ed:8

0x2054d  MOV RAX,qword ptr [RSP + 0x8]
0x20552  MOV qword ptr [0x3aa88],RAX
0x20559  TEST R9B,R9B
0x2055c  JZ 0x2056a
<L0> (entry=0x2054d):
	instruction(0x2054d)
	$U1:8 = 0x8:8 + RSP
	RAX = ram[$U1:8]
	instruction(0x20552)
	$U1:8 = RAX
	ram[0x3aa88:8] = $U1:8
	instruction(0x20559)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = R9B & R9B
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2055c)
	if ZF jump 0x2056a:8

0x22350  MOV RCX,qword ptr [RAX + 0x10]
0x22354  ADD RAX,0x18
0x22358  ADD RCX,R12
0x2235b  MOV qword ptr [RDX],RCX
0x2235e  CMP RBX,RAX
0x22361  JA 0x22340
<L0> (entry=0x22350):
	instruction(0x22350)
	$U1:8 = RAX + 0x10:8
	RCX = ram[$U1:8]
	instruction(0x22354)
	CF = RAX carry 0x18:8
	OF = RAX scarry 0x18:8
	RAX = RAX + 0x18:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x22358)
	CF = RCX carry R12
	OF = RCX scarry R12
	RCX = RCX + R12
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2235b)
	$U1:8 = RCX
	ram[RDX] = $U1:8
	instruction(0x2235e)
	CF = RBX < RAX
	OF = RBX sborrow RAX
	$U1:8 = RBX - RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x22361)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x22340:8

0x1456a  MOV dword ptr [RAX + 0x2f8],EDI
0x14570  ADD EDX,EDX
0x14572  LEA RDI,[RCX + 0x10]
0x14576  SUB RSI,R8
0x14579  LEA RDX,[RDI + RDX*0x4]
0x1457d  MOV ECX,dword ptr [RCX + 0xc]
0x14580  MOVQ XMM0, RDI
0x14585  MOVQ XMM1, RDX
0x1458a  LEA RDX,[RDX + RSI*0x4]
0x1458e  PUNPCKLQDQ XMM0, XMM1
0x14592  MOV dword ptr [RAX + 0x2fc],ECX
0x14598  MOV qword ptr [RAX + 0x310],RDX
0x1459f  MOVUPS xmmword ptr [RAX + 0x300], XMM0
0x145a6  RET
<L0> (entry=0x1456a):
	instruction(0x1456a)
	$U1:8 = RAX + 0x2f8:8
	$U2:4 = EDI
	ram[$U1:8] = $U2:4
	instruction(0x14570)
	CF = EDX carry EDX
	OF = EDX scarry EDX
	EDX = EDX + EDX
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x14572)
	$U1:8 = RCX + 0x10:8
	RDI = $U1:8
	instruction(0x14576)
	CF = RSI < R8
	OF = RSI sborrow R8
	RSI = RSI - R8
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x14579)
	$U2:8 = RDX * 0x4:8
	$U1:8 = RDI + $U2:8
	RDX = $U1:8
	instruction(0x1457d)
	$U1:8 = RCX + 0xc:8
	ECX = ram[$U1:8]
	RCX = zext(ECX)
	instruction(0x14580)
	XMM0 = zext(RDI)
	instruction(0x14585)
	XMM1 = zext(RDX)
	instruction(0x1458a)
	$U2:8 = RSI * 0x4:8
	$U1:8 = RDX + $U2:8
	RDX = $U1:8
	instruction(0x1458e)
	XMM0_Qb = XMM1_Qa
	instruction(0x14592)
	$U1:8 = RAX + 0x2fc:8
	$U2:4 = ECX
	ram[$U1:8] = $U2:4
	instruction(0x14598)
	$U1:8 = RAX + 0x310:8
	$U2:8 = RDX
	ram[$U1:8] = $U2:8
	instruction(0x1459f)
	$U1:8 = RAX + 0x300:8
	$U2:16 = XMM0
	ram[$U1:8] = $U2:16
	instruction(0x145a6)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x24725  MOV EAX,dword ptr [RBP + -0x280]
0x2472b  MOVD XMM6, dword ptr [RBP + -0x2a8]
0x24733  MOVD XMM0, EAX
0x24737  OR EAX,EBX
0x24739  OR EAX,dword ptr [RBP + -0x2a8]
0x2473f  PUNPCKLDQ XMM0, XMM6
0x24743  JZ 0x24c70
<L0> (entry=0x24725):
	instruction(0x24725)
	$U1:8 = RBP + 0xfffffffffffffd80:8
	EAX = ram[$U1:8]
	RAX = zext(EAX)
	instruction(0x2472b)
	$U1:8 = RBP + 0xfffffffffffffd58:8
	$U2:4 = ram[$U1:8]
	XMM6 = zext($U2:4)
	instruction(0x24733)
	XMM0 = zext(EAX)
	instruction(0x24737)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX | EBX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x24739)
	$U4:8 = RBP + 0xfffffffffffffd58:8
	CF = 0x0:1
	OF = 0x0:1
	$U5:4 = ram[$U4:8]
	EAX = EAX | $U5:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2473f)
	XMM0_Dd = XMM6_Db
	XMM0_Dc = XMM0_Db
	XMM0_Db = XMM6_Da
	instruction(0x24743)
	if ZF jump 0x24c70:8

0x9b60  ENDBR64
0x9b64  CMP qword ptr [RDX + 0x30],0x8
0x9b69  MOV RAX,RDX
0x9b6c  JNZ 0x9bc6
<L0> (entry=0x9b60):
	instruction(0x9b60)
	instruction(0x9b64)
	$U5:8 = RDX + 0x30:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x8:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x8:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x8:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x9b69)
	RAX = RDX
	instruction(0x9b6c)
	$U1:1 = !ZF
	if $U1:1 jump 0x9bc6:8

0x2081e  MOV EAX,dword ptr [0x3aa98]
0x20824  TEST EAX,EAX
0x20826  JNZ 0x20870
<L0> (entry=0x2081e):
	instruction(0x2081e)
	EAX = ram[0x3aa98:8]
	RAX = zext(EAX)
	instruction(0x20824)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x20826)
	$U1:1 = !ZF
	if $U1:1 jump 0x20870:8

0xeb4f  ADD RAX,0x2c0
0xeb55  MOV qword ptr [RSI],RAX
0xeb58  LEA RAX,[R14 + 0x2c0]
0xeb5f  MOV qword ptr [R14 + 0x3a0],RAX
0xeb66  MOVZX R12D,byte ptr [RBP]
0xeb6b  TEST R12B,R12B
0xeb6e  JZ 0xec3d
<L0> (entry=0xeb4f):
	instruction(0xeb4f)
	CF = RAX carry 0x2c0:8
	OF = RAX scarry 0x2c0:8
	RAX = RAX + 0x2c0:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xeb55)
	$U1:8 = RAX
	ram[RSI] = $U1:8
	instruction(0xeb58)
	$U1:8 = R14 + 0x2c0:8
	RAX = $U1:8
	instruction(0xeb5f)
	$U1:8 = R14 + 0x3a0:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0xeb66)
	$U1:1 = ram[RBP]
	R12D = zext($U1:1)
	R12 = zext(R12D)
	instruction(0xeb6b)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = R12B & R12B
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xeb6e)
	if ZF jump 0xec3d:8

0x20512  MOVSXD RAX,dword ptr [RCX + RAX*0x4]
0x20516  ADD RAX,RCX
0x20519  JMP RAX
<L0> (entry=0x20512):
	instruction(0x20512)
	$U2:8 = RAX * 0x4:8
	$U1:8 = RCX + $U2:8
	$U3:4 = ram[$U1:8]
	RAX = sext($U3:4)
	instruction(0x20516)
	CF = RAX carry RCX
	OF = RAX scarry RCX
	RAX = RAX + RCX
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x20519)
	jump RAX

0x28c20  PXOR XMM0, XMM0
0x28c24  MOVDQA XMM2, xmmword ptr [RDI]
0x28c28  MOVDQA XMM1, xmmword ptr [RSI]
0x28c2c  PCMPEQB XMM0, XMM1
0x28c30  PSLLDQ XMM2, 0x8
0x28c35  PCMPEQB XMM2, XMM1
0x28c39  PSUBB XMM2, XMM0
0x28c3d  PMOVMSKB R9D, XMM2
0x28c42  SHR EDX,CL
0x28c44  SHR R9D,CL
0x28c47  SUB EDX,R9D
0x28c4a  JNZ 0x29625
<L0> (entry=0x28c20):
	instruction(0x28c20)
	XMM0 = XMM0 ^ XMM0
	instruction(0x28c24)
	XMM2 = ram[RDI]
	instruction(0x28c28)
	XMM1 = ram[RSI]
	instruction(0x28c2c)
	$U1:1 = XMM0_Ba == XMM1_Ba
	XMM0_Ba = $U1:1 * 0xff:1
	$U2:1 = XMM0_Bb == XMM1_Bb
	XMM0_Bb = $U2:1 * 0xff:1
	$U3:1 = XMM0_Bc == XMM1_Bc
	XMM0_Bc = $U3:1 * 0xff:1
	$U4:1 = XMM0_Bd == XMM1_Bd
	XMM0_Bd = $U4:1 * 0xff:1
	$U5:1 = XMM0_Be == XMM1_Be
	XMM0_Be = $U5:1 * 0xff:1
	$U6:1 = XMM0_Bf == XMM1_Bf
	XMM0_Bf = $U6:1 * 0xff:1
	$U7:1 = XMM0_Bg == XMM1_Bg
	XMM0_Bg = $U7:1 * 0xff:1
	$U8:1 = XMM0_Bh == XMM1_Bh
	XMM0_Bh = $U8:1 * 0xff:1
	$U9:1 = XMM0_Bi == XMM1_Bi
	XMM0_Bi = $U9:1 * 0xff:1
	$U10:1 = XMM0_Bj == XMM1_Bj
	XMM0_Bj = $U10:1 * 0xff:1
	$U11:1 = XMM0_Bk == XMM1_Bk
	XMM0_Bk = $U11:1 * 0xff:1
	$U12:1 = XMM0_Bl == XMM1_Bl
	XMM0_Bl = $U12:1 * 0xff:1
	$U13:1 = XMM0_Bm == XMM1_Bm
	XMM0_Bm = $U13:1 * 0xff:1
	$U14:1 = XMM0_Bn == XMM1_Bn
	XMM0_Bn = $U14:1 * 0xff:1
	$U15:1 = XMM0_Bo == XMM1_Bo
	XMM0_Bo = $U15:1 * 0xff:1
	$U16:1 = XMM0_Bp == XMM1_Bp
	XMM0_Bp = $U16:1 * 0xff:1
	instruction(0x28c30)
	$U1:1 = 0xf:1 < 0x8:1
	if $U1:1 jump <L476>
<L1>:
	$tmp0:8 = XMM2_Qa
	$U3:1 = 0x8:1 * 0x8:1
	XMM2_Qa = XMM2_Qa << $U3:1
	$U4:1 = 0x8:1 < 0x8:1
	if $U4:1 jump <L475>
<L2>:
	$U5:1 = 0x8:1 * 0x8:1
	$U6:8 = XMM2_Qb << $U5:1
	$U7:1 = 0x8:1 - 0x8:1
	$U8:1 = 0x8:1 * $U7:1
	$U9:8 = $tmp0:8 >> $U8:1
	XMM2_Qb = $U6:8 | $U9:8
	jump <L477>
<L3>:
	$U10:1 = 0x8:1 - 0x8:1
	$U11:1 = 0x8:1 * $U10:1
	XMM2_Qb = $tmp0:8 << $U11:1
	jump <L477>
<L4>:
	XMM2_Qa = 0x0:8
	XMM2_Qb = 0x0:8
<L5>:
	instruction(0x28c35)
	$U1:1 = XMM2_Ba == XMM1_Ba
	XMM2_Ba = $U1:1 * 0xff:1
	$U2:1 = XMM2_Bb == XMM1_Bb
	XMM2_Bb = $U2:1 * 0xff:1
	$U3:1 = XMM2_Bc == XMM1_Bc
	XMM2_Bc = $U3:1 * 0xff:1
	$U4:1 = XMM2_Bd == XMM1_Bd
	XMM2_Bd = $U4:1 * 0xff:1
	$U5:1 = XMM2_Be == XMM1_Be
	XMM2_Be = $U5:1 * 0xff:1
	$U6:1 = XMM2_Bf == XMM1_Bf
	XMM2_Bf = $U6:1 * 0xff:1
	$U7:1 = XMM2_Bg == XMM1_Bg
	XMM2_Bg = $U7:1 * 0xff:1
	$U8:1 = XMM2_Bh == XMM1_Bh
	XMM2_Bh = $U8:1 * 0xff:1
	$U9:1 = XMM2_Bi == XMM1_Bi
	XMM2_Bi = $U9:1 * 0xff:1
	$U10:1 = XMM2_Bj == XMM1_Bj
	XMM2_Bj = $U10:1 * 0xff:1
	$U11:1 = XMM2_Bk == XMM1_Bk
	XMM2_Bk = $U11:1 * 0xff:1
	$U12:1 = XMM2_Bl == XMM1_Bl
	XMM2_Bl = $U12:1 * 0xff:1
	$U13:1 = XMM2_Bm == XMM1_Bm
	XMM2_Bm = $U13:1 * 0xff:1
	$U14:1 = XMM2_Bn == XMM1_Bn
	XMM2_Bn = $U14:1 * 0xff:1
	$U15:1 = XMM2_Bo == XMM1_Bo
	XMM2_Bo = $U15:1 * 0xff:1
	$U16:1 = XMM2_Bp == XMM1_Bp
	XMM2_Bp = $U16:1 * 0xff:1
	instruction(0x28c39)
	XMM2_Ba = XMM2_Ba - XMM0_Ba
	XMM2_Bb = XMM2_Bb - XMM0_Bb
	XMM2_Bc = XMM2_Bc - XMM0_Bc
	XMM2_Bd = XMM2_Bd - XMM0_Bd
	XMM2_Be = XMM2_Be - XMM0_Be
	XMM2_Bf = XMM2_Bf - XMM0_Bf
	XMM2_Bg = XMM2_Bg - XMM0_Bg
	XMM2_Bh = XMM2_Bh - XMM0_Bh
	XMM2_Bi = XMM2_Bi - XMM0_Bi
	XMM2_Bj = XMM2_Bj - XMM0_Bj
	XMM2_Bk = XMM2_Bk - XMM0_Bk
	XMM2_Bl = XMM2_Bl - XMM0_Bl
	XMM2_Bm = XMM2_Bm - XMM0_Bm
	XMM2_Bn = XMM2_Bn - XMM0_Bn
	XMM2_Bo = XMM2_Bo - XMM0_Bo
	XMM2_Bp = XMM2_Bp - XMM0_Bp
	instruction(0x28c3d)
	$U1:2 = 0x0:2
	$U2:16 = XMM2 >> 0x7:8
	$U2:16 = $U2:16 & 0x1:16
	$U3:2 = $U1:2 & 0xfffffffffffffffe:2
	$U4:2 = zext($U2:1)
	$U4:2 = $U4:2 & 0x1:2
	$U4:2 = $U4:2 << 0x0:8
	$U1:2 = $U3:2 | $U4:2
	$U5:16 = XMM2 >> 0xf:8
	$U5:16 = $U5:16 & 0x1:16
	$U6:2 = $U1:2 & 0xfffffffffffffffd:2
	$U7:2 = zext($U5:1)
	$U7:2 = $U7:2 & 0x1:2
	$U7:2 = $U7:2 << 0x1:8
	$U1:2 = $U6:2 | $U7:2
	$U8:16 = XMM2 >> 0x17:8
	$U8:16 = $U8:16 & 0x1:16
	$U9:2 = $U1:2 & 0xfffffffffffffffb:2
	$U10:2 = zext($U8:1)
	$U10:2 = $U10:2 & 0x1:2
	$U10:2 = $U10:2 << 0x2:8
	$U1:2 = $U9:2 | $U10:2
	$U11:16 = XMM2 >> 0x1f:8
	$U11:16 = $U11:16 & 0x1:16
	$U12:2 = $U1:2 & 0xfffffffffffffff7:2
	$U13:2 = zext($U11:1)
	$U13:2 = $U13:2 & 0x1:2
	$U13:2 = $U13:2 << 0x3:8
	$U1:2 = $U12:2 | $U13:2
	$U14:16 = XMM2 >> 0x27:8
	$U14:16 = $U14:16 & 0x1:16
	$U15:2 = $U1:2 & 0xffffffffffffffef:2
	$U16:2 = zext($U14:1)
	$U16:2 = $U16:2 & 0x1:2
	$U16:2 = $U16:2 << 0x4:8
	$U1:2 = $U15:2 | $U16:2
	$U17:16 = XMM2 >> 0x2f:8
	$U17:16 = $U17:16 & 0x1:16
	$U18:2 = $U1:2 & 0xffffffffffffffdf:2
	$U19:2 = zext($U17:1)
	$U19:2 = $U19:2 & 0x1:2
	$U19:2 = $U19:2 << 0x5:8
	$U1:2 = $U18:2 | $U19:2
	$U20:16 = XMM2 >> 0x37:8
	$U20:16 = $U20:16 & 0x1:16
	$U21:2 = $U1:2 & 0xffffffffffffffbf:2
	$U22:2 = zext($U20:1)
	$U22:2 = $U22:2 & 0x1:2
	$U22:2 = $U22:2 << 0x6:8
	$U1:2 = $U21:2 | $U22:2
	$U23:16 = XMM2 >> 0x3f:8
	$U23:16 = $U23:16 & 0x1:16
	$U24:2 = $U1:2 & 0xffffffffffffff7f:2
	$U25:2 = zext($U23:1)
	$U25:2 = $U25:2 & 0x1:2
	$U25:2 = $U25:2 << 0x7:8
	$U1:2 = $U24:2 | $U25:2
	$U26:16 = XMM2 >> 0x47:8
	$U26:16 = $U26:16 & 0x1:16
	$U27:2 = $U1:2 & 0xfffffffffffffeff:2
	$U28:2 = zext($U26:1)
	$U28:2 = $U28:2 & 0x1:2
	$U28:2 = $U28:2 << 0x8:8
	$U1:2 = $U27:2 | $U28:2
	$U29:16 = XMM2 >> 0x4f:8
	$U29:16 = $U29:16 & 0x1:16
	$U30:2 = $U1:2 & 0xfffffffffffffdff:2
	$U31:2 = zext($U29:1)
	$U31:2 = $U31:2 & 0x1:2
	$U31:2 = $U31:2 << 0x9:8
	$U1:2 = $U30:2 | $U31:2
	$U32:16 = XMM2 >> 0x57:8
	$U32:16 = $U32:16 & 0x1:16
	$U33:2 = $U1:2 & 0xfffffffffffffbff:2
	$U34:2 = zext($U32:1)
	$U34:2 = $U34:2 & 0x1:2
	$U34:2 = $U34:2 << 0xa:8
	$U1:2 = $U33:2 | $U34:2
	$U35:16 = XMM2 >> 0x5f:8
	$U35:16 = $U35:16 & 0x1:16
	$U36:2 = $U1:2 & 0xfffffffffffff7ff:2
	$U37:2 = zext($U35:1)
	$U37:2 = $U37:2 & 0x1:2
	$U37:2 = $U37:2 << 0xb:8
	$U1:2 = $U36:2 | $U37:2
	$U38:16 = XMM2 >> 0x67:8
	$U38:16 = $U38:16 & 0x1:16
	$U39:2 = $U1:2 & 0xffffffffffffefff:2
	$U40:2 = zext($U38:1)
	$U40:2 = $U40:2 & 0x1:2
	$U40:2 = $U40:2 << 0xc:8
	$U1:2 = $U39:2 | $U40:2
	$U41:16 = XMM2 >> 0x6f:8
	$U41:16 = $U41:16 & 0x1:16
	$U42:2 = $U1:2 & 0xffffffffffffdfff:2
	$U43:2 = zext($U41:1)
	$U43:2 = $U43:2 & 0x1:2
	$U43:2 = $U43:2 << 0xd:8
	$U1:2 = $U42:2 | $U43:2
	$U44:16 = XMM2 >> 0x77:8
	$U44:16 = $U44:16 & 0x1:16
	$U45:2 = $U1:2 & 0xffffffffffffbfff:2
	$U46:2 = zext($U44:1)
	$U46:2 = $U46:2 & 0x1:2
	$U46:2 = $U46:2 << 0xe:8
	$U1:2 = $U45:2 | $U46:2
	$U47:16 = XMM2 >> 0x7f:8
	$U47:16 = $U47:16 & 0x1:16
	$U48:2 = $U1:2 & 0xffffffffffff7fff:2
	$U49:2 = zext($U47:1)
	$U49:2 = $U49:2 & 0x1:2
	$U49:2 = $U49:2 << 0xf:8
	$U1:2 = $U48:2 | $U49:2
	R9D = zext($U1:2)
	R9 = zext(R9D)
	instruction(0x28c42)
	$U1:1 = CL & 0x1f:1
	$U2:4 = EDX
	EDX = EDX >> $U1:1
	RDX = zext(EDX)
	$U3:1 = $U1:1 != 0x0:1
	$U5:1 = $U1:1 - 0x1:1
	$U6:4 = $U2:4 >> $U5:1
	$U7:4 = $U6:4 & 0x1:4
	$U4:1 = $U7:4 != 0x0:4
	$U8:1 = !$U3:1
	$U9:1 = $U8:1 && CF
	$U10:1 = $U3:1 && $U4:1
	CF = $U9:1 || $U10:1
	$U11:1 = $U1:1 == 0x1:1
	$U12:1 = $U2:4 s< 0x0:4
	$U13:1 = !$U11:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U11:1 && $U12:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:1 != 0x0:1
	$U17:1 = EDX s< 0x0:4
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = EDX == 0x0:4
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:4 = EDX & 0xff:4
	$U27:1 = count_ones($U26:4)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x28c44)
	$U1:1 = CL & 0x1f:1
	$U2:4 = R9D
	R9D = R9D >> $U1:1
	R9 = zext(R9D)
	$U3:1 = $U1:1 != 0x0:1
	$U5:1 = $U1:1 - 0x1:1
	$U6:4 = $U2:4 >> $U5:1
	$U7:4 = $U6:4 & 0x1:4
	$U4:1 = $U7:4 != 0x0:4
	$U8:1 = !$U3:1
	$U9:1 = $U8:1 && CF
	$U10:1 = $U3:1 && $U4:1
	CF = $U9:1 || $U10:1
	$U11:1 = $U1:1 == 0x1:1
	$U12:1 = $U2:4 s< 0x0:4
	$U13:1 = !$U11:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U11:1 && $U12:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:1 != 0x0:1
	$U17:1 = R9D s< 0x0:4
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = R9D == 0x0:4
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:4 = R9D & 0xff:4
	$U27:1 = count_ones($U26:4)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x28c47)
	CF = EDX < R9D
	OF = EDX sborrow R9D
	EDX = EDX - R9D
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x28c4a)
	$U1:1 = !ZF
	if $U1:1 jump 0x29625:8

0x2ba7a  BSF EAX,EDX
0x2ba7d  RET
<L0> (entry=0x2ba7a):
	instruction(0x2ba7a)
	$tmp0:4 = 0x0:4
	ZF = EDX == 0x0:4
	$U2:1 = ZF == 0x1:1
	if $U2:1 jump <L561>
<L1>:
	$U3:4 = EDX >> $tmp0:4
	$U4:4 = $U3:4 & 0x1:4
	$U5:1 = $U4:4 != 0x0:4
	if $U5:1 jump <L561>
<L2>:
	$tmp0:4 = $tmp0:4 + 0x1:4
	jump <L559>
<L3>:
	EAX = $tmp0:4
	RAX = zext(EAX)
	instruction(0x2ba7d)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x19f10  CMP dword ptr [0x3ab54],0x1
0x19f17  JBE 0x19ff9
<L0> (entry=0x19f10):
	instruction(0x19f10)
	$U5:4 = ram[0x3ab54:8]
	CF = $U5:4 < 0x1:4
	$U6:4 = ram[0x3ab54:8]
	OF = $U6:4 sborrow 0x1:4
	$U7:4 = ram[0x3ab54:8]
	$U1:4 = $U7:4 - 0x1:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x19f17)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x19ff9:8

0xaee8  JMP 0xabbb
<L0> (entry=0xaee8):
	jump 0xabbb:8

0x2537e  MOV RAX,qword ptr [0x3bb28]
0x25385  MOV RAX,qword ptr [RAX]
0x25388  MOV qword ptr [0x3baf8],RAX
0x2538f  JMP 0x24139
<L0> (entry=0x2537e):
	instruction(0x2537e)
	RAX = ram[0x3bb28:8]
	instruction(0x25385)
	RAX = ram[RAX]
	instruction(0x25388)
	$U1:8 = RAX
	ram[0x3baf8:8] = $U1:8
	instruction(0x2538f)
	jump 0x24139:8

0x24193  CMP word ptr [0x1036],0x38
0x2419b  JNZ 0x266cd
<L0> (entry=0x24193):
	instruction(0x24193)
	$U5:2 = ram[0x1036:8]
	CF = $U5:2 < 0x38:2
	$U6:2 = ram[0x1036:8]
	OF = $U6:2 sborrow 0x38:2
	$U7:2 = ram[0x1036:8]
	$U1:2 = $U7:2 - 0x38:2
	SF = $U1:2 s< 0x0:2
	ZF = $U1:2 == 0x0:2
	$U2:2 = $U1:2 & 0xff:2
	$U3:1 = count_ones($U2:2)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2419b)
	$U1:1 = !ZF
	if $U1:1 jump 0x266cd:8

0x237e3  TEST EAX,EAX
0x237e5  JZ 0x2381b
<L0> (entry=0x237e3):
	instruction(0x237e3)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x237e5)
	if ZF jump 0x2381b:8

0x2411d  CMP qword ptr [0x3baf8],0x0
0x24125  MOV qword ptr [RBP + -0x290],RAX
0x2412c  MOV dword ptr [RAX + 0x18],0x0
0x24133  JZ 0x2537e
<L0> (entry=0x2411d):
	instruction(0x2411d)
	$U5:8 = ram[0x3baf8:8]
	CF = $U5:8 < 0x0:8
	$U6:8 = ram[0x3baf8:8]
	OF = $U6:8 sborrow 0x0:8
	$U7:8 = ram[0x3baf8:8]
	$U1:8 = $U7:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x24125)
	$U1:8 = RBP + 0xfffffffffffffd70:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x2412c)
	$U1:8 = RAX + 0x18:8
	$U2:4 = 0x0:4
	ram[$U1:8] = $U2:4
	instruction(0x24133)
	if ZF jump 0x2537e:8

0x229a8  MOV RCX,RAX
0x229ab  TEST RAX,RAX
0x229ae  JZ 0x229fd
<L0> (entry=0x229a8):
	instruction(0x229a8)
	RCX = RAX
	instruction(0x229ab)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x229ae)
	if ZF jump 0x229fd:8

0x20b18  LEA RDI,[RSP + 0x40]
0x20b1d  CALL 0x27e60
<L0> (entry=0x20b18):
	instruction(0x20b18)
	$U1:8 = 0x40:8 + RSP
	RDI = $U1:8
	instruction(0x20b1d)
	$U1:8 = 0x20b22:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x27e60:8

0x1eb68  SUB R13,0x10
0x1eb6c  SUB RBX,0x1
0x1eb70  JZ 0x1eb9f
<L0> (entry=0x1eb68):
	instruction(0x1eb68)
	CF = R13 < 0x10:8
	OF = R13 sborrow 0x10:8
	R13 = R13 - 0x10:8
	SF = R13 s< 0x0:8
	ZF = R13 == 0x0:8
	$U1:8 = R13 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1eb6c)
	CF = RBX < 0x1:8
	OF = RBX sborrow 0x1:8
	RBX = RBX - 0x1:8
	SF = RBX s< 0x0:8
	ZF = RBX == 0x0:8
	$U1:8 = RBX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1eb70)
	if ZF jump 0x1eb9f:8

0xa50d  MOV RDI,R15
0xa510  CALL qword ptr [0x3aa68]
<L0> (entry=0xa50d):
	instruction(0xa50d)
	RDI = R15
	instruction(0xa510)
	$U1:8 = ram[0x3aa68:8]
	$U2:8 = 0xa516:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U2:8
	call $U1:8

0x22510  OR byte ptr [0x3be0c],0x4
0x22517  CALL 0x1f2e0
<L0> (entry=0x22510):
	instruction(0x22510)
	CF = 0x0:1
	OF = 0x0:1
	$U4:1 = ram[0x3be0c:8]
	$U5:1 = $U4:1 | 0x4:1
	ram[0x3be0c:8] = $U5:1
	$U6:1 = ram[0x3be0c:8]
	SF = $U6:1 s< 0x0:1
	$U7:1 = ram[0x3be0c:8]
	ZF = $U7:1 == 0x0:1
	$U8:1 = ram[0x3be0c:8]
	$U1:1 = $U8:1 & 0xff:1
	$U2:1 = count_ones($U1:1)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x22517)
	$U1:8 = 0x2251c:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x1f2e0:8

0x222ee  LEA RAX,[RBP + -0x70]
0x222f2  LEA R10,[RBP + -0x30]
0x222f6  MOV qword ptr [RBP + -0xa8],RAX
0x222fd  MOV R8,RAX
0x22300  LEA R9,[0x19100]
0x22307  MOV RSI,qword ptr [0x3bb60]
0x2230e  MOV RAX,qword ptr [R8]
0x22311  MOV RCX,qword ptr [R8 + 0x10]
0x22315  MOV RDI,qword ptr [R8 + 0x8]
0x22319  MOV RSI,qword ptr [RSI + 0x8]
0x2231d  ADD RDI,RAX
0x22320  AND EDX,0x20
0x22323  LEA RDX,[RCX + RCX*0x2]
0x22327  LEA R11,[RSI + R12*0x1]
0x2232b  LEA RBX,[RAX + RDX*0x8]
0x2232f  CMOVNZ RSI,R11
0x22333  CMP RAX,RBX
0x22336  JNC 0x22363
<L0> (entry=0x222ee):
	instruction(0x222ee)
	$U1:8 = RBP + 0xffffffffffffff90:8
	RAX = $U1:8
	instruction(0x222f2)
	$U1:8 = RBP + 0xffffffffffffffd0:8
	R10 = $U1:8
	instruction(0x222f6)
	$U1:8 = RBP + 0xffffffffffffff58:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x222fd)
	R8 = RAX
	instruction(0x22300)
	R9 = 0x19100:8
	instruction(0x22307)
	RSI = ram[0x3bb60:8]
	instruction(0x2230e)
	RAX = ram[R8]
	instruction(0x22311)
	$U1:8 = R8 + 0x10:8
	RCX = ram[$U1:8]
	instruction(0x22315)
	$U1:8 = R8 + 0x8:8
	RDI = ram[$U1:8]
	instruction(0x22319)
	$U1:8 = RSI + 0x8:8
	RSI = ram[$U1:8]
	instruction(0x2231d)
	CF = RDI carry RAX
	OF = RDI scarry RAX
	RDI = RDI + RAX
	SF = RDI s< 0x0:8
	ZF = RDI == 0x0:8
	$U1:8 = RDI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x22320)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX & 0x20:4
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x22323)
	$U2:8 = RCX * 0x2:8
	$U1:8 = RCX + $U2:8
	RDX = $U1:8
	instruction(0x22327)
	$U2:8 = R12 * 0x1:8
	$U1:8 = RSI + $U2:8
	R11 = $U1:8
	instruction(0x2232b)
	$U2:8 = RDX * 0x8:8
	$U1:8 = RAX + $U2:8
	RBX = $U1:8
	instruction(0x2232f)
	$U3:1 = !ZF
	$U1:8 = R11
	$U2:1 = !$U3:1
	if $U2:1 jump <L40>
<L1>:
	RSI = $U1:8
<L2>:
	instruction(0x22333)
	CF = RAX < RBX
	OF = RAX sborrow RBX
	$U1:8 = RAX - RBX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x22336)
	$U1:1 = !CF
	if $U1:1 jump 0x22363:8

0x1ea13  MOV RDI,R13
0x1ea16  CALL 0x1f220
<L0> (entry=0x1ea13):
	instruction(0x1ea13)
	RDI = R13
	instruction(0x1ea16)
	$U1:8 = 0x1ea1b:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x1f220:8

0x1e2e0  ENDBR64
0x1e2e4  PUSH R12
0x1e2e6  SUB RSP,0x110
0x1e2ed  MOV RAX,qword ptr [0x3c218]
0x1e2f4  MOV qword ptr [RSP],RDI
0x1e2f8  MOV qword ptr [RSP + 0x10],RSI
0x1e2fd  MOV qword ptr [RSP + 0x18],RDX
0x1e302  MOV qword ptr [RSP + 0x8],RAX
0x1e307  TEST RDI,RDI
0x1e30a  JZ 0x1e380
<L0> (entry=0x1e2e0):
	instruction(0x1e2e0)
	instruction(0x1e2e4)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1e2e6)
	CF = RSP < 0x110:8
	OF = RSP sborrow 0x110:8
	RSP = RSP - 0x110:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e2ed)
	RAX = ram[0x3c218:8]
	instruction(0x1e2f4)
	$U1:8 = RDI
	ram[RSP] = $U1:8
	instruction(0x1e2f8)
	$U1:8 = 0x10:8 + RSP
	$U2:8 = RSI
	ram[$U1:8] = $U2:8
	instruction(0x1e2fd)
	$U1:8 = 0x18:8 + RSP
	$U2:8 = RDX
	ram[$U1:8] = $U2:8
	instruction(0x1e302)
	$U1:8 = 0x8:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1e307)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RDI & RDI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e30a)
	if ZF jump 0x1e380:8

0xb4bd  MOV RSI,qword ptr [RAX + 0x8]
0xb4c1  MOV RAX,qword ptr [R14 + 0x68]
0xb4c5  MOV RDX,qword ptr [RAX + 0x8]
0xb4c9  XOR EAX,EAX
0xb4cb  TEST byte ptr [R14 + 0x31e],0x20
0xb4d3  JZ 0xb4d8
<L0> (entry=0xb4bd):
	instruction(0xb4bd)
	$U1:8 = RAX + 0x8:8
	RSI = ram[$U1:8]
	instruction(0xb4c1)
	$U1:8 = R14 + 0x68:8
	RAX = ram[$U1:8]
	instruction(0xb4c5)
	$U1:8 = RAX + 0x8:8
	RDX = ram[$U1:8]
	instruction(0xb4c9)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xb4cb)
	$U5:8 = R14 + 0x31e:8
	CF = 0x0:1
	OF = 0x0:1
	$U6:1 = ram[$U5:8]
	$U1:1 = $U6:1 & 0x20:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb4d3)
	if ZF jump 0xb4d8:8

0xa0c8  MOV EDI,dword ptr [RBP + -0xd4]
0xa0ce  LEA RSI,[RBP + -0xc0]
0xa0d5  CALL 0x27880
<L0> (entry=0xa0c8):
	instruction(0xa0c8)
	$U1:8 = RBP + 0xffffffffffffff2c:8
	EDI = ram[$U1:8]
	RDI = zext(EDI)
	instruction(0xa0ce)
	$U1:8 = RBP + 0xffffffffffffff40:8
	RSI = $U1:8
	instruction(0xa0d5)
	$U1:8 = 0xa0da:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x27880:8

0x10532  CMP AL,0x25
0x10534  JZ 0x10649
<L0> (entry=0x10532):
	instruction(0x10532)
	CF = AL < 0x25:1
	OF = AL sborrow 0x25:1
	$U1:1 = AL - 0x25:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x10534)
	if ZF jump 0x10649:8

0x1e626  TEST AL,AL
0x1e628  JNZ 0x1e5f0
<L0> (entry=0x1e626):
	instruction(0x1e626)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = AL & AL
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e628)
	$U1:1 = !ZF
	if $U1:1 jump 0x1e5f0:8

0x189ad  MOV R9,qword ptr [RBP]
0x189b1  TEST R9,R9
0x189b4  JZ 0x189ed
<L0> (entry=0x189ad):
	instruction(0x189ad)
	R9 = ram[RBP]
	instruction(0x189b1)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R9 & R9
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x189b4)
	if ZF jump 0x189ed:8

0x23881  MOV qword ptr [RCX + RAX*0x8],RDX
0x23885  MOV RAX,qword ptr [RDX + 0x10]
0x23889  ADD RDX,0x10
0x2388d  TEST RAX,RAX
0x23890  JZ 0x238be
<L0> (entry=0x23881):
	instruction(0x23881)
	$U2:8 = RAX * 0x8:8
	$U1:8 = RCX + $U2:8
	$U3:8 = RDX
	ram[$U1:8] = $U3:8
	instruction(0x23885)
	$U1:8 = RDX + 0x10:8
	RAX = ram[$U1:8]
	instruction(0x23889)
	CF = RDX carry 0x10:8
	OF = RDX scarry 0x10:8
	RDX = RDX + 0x10:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2388d)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23890)
	if ZF jump 0x238be:8

0x81a7  MOV R8D,dword ptr [RBP + -0xc8]
0x81ae  JMP 0x8203
<L0> (entry=0x81a7):
	instruction(0x81a7)
	$U1:8 = RBP + 0xffffffffffffff38:8
	R8D = ram[$U1:8]
	R8 = zext(R8D)
	instruction(0x81ae)
	jump 0x8203:8

0x222e1  CMP RAX,R8
0x222e4  JZ 0x225ee
<L0> (entry=0x222e1):
	instruction(0x222e1)
	CF = RAX < R8
	OF = RAX sborrow R8
	$U1:8 = RAX - R8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x222e4)
	if ZF jump 0x225ee:8

0x238d6  CMP qword ptr [RAX + 0x8],0x7
0x238db  JNZ 0x26768
<L0> (entry=0x238d6):
	instruction(0x238d6)
	$U5:8 = RAX + 0x8:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x7:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x7:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x7:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x238db)
	$U1:1 = !ZF
	if $U1:1 jump 0x26768:8

0x19750  MOV qword ptr [0x3ab00],0x800
0x1975b  POP RBX
0x1975c  RET
<L0> (entry=0x19750):
	instruction(0x19750)
	$U1:8 = 0x800:8
	ram[0x3ab00:8] = $U1:8
	instruction(0x1975b)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0x1975c)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x22186  ADD qword ptr [RAX + 0x8],R12
0x2218a  MOV RAX,qword ptr [0x3bbe8]
0x22191  TEST RAX,RAX
0x22194  JZ 0x2219a
<L0> (entry=0x22186):
	instruction(0x22186)
	$U4:8 = RAX + 0x8:8
	$U5:8 = ram[$U4:8]
	CF = $U5:8 carry R12
	$U6:8 = ram[$U4:8]
	OF = $U6:8 scarry R12
	$U7:8 = ram[$U4:8]
	$U8:8 = $U7:8 + R12
	ram[$U4:8] = $U8:8
	$U9:8 = ram[$U4:8]
	SF = $U9:8 s< 0x0:8
	$U10:8 = ram[$U4:8]
	ZF = $U10:8 == 0x0:8
	$U11:8 = ram[$U4:8]
	$U1:8 = $U11:8 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2218a)
	RAX = ram[0x3bbe8:8]
	instruction(0x22191)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x22194)
	if ZF jump 0x2219a:8

0x1f2c8  JMP 0x1f27b
<L0> (entry=0x1f2c8):
	jump 0x1f27b:8

0x2434c  TEST EAX,EAX
0x2434e  JZ 0x257cd
<L0> (entry=0x2434c):
	instruction(0x2434c)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2434e)
	if ZF jump 0x257cd:8

0x7979  MOV R15D,EAX
0x797c  CMP EAX,-0x1
0x797f  JZ 0x7da6
<L0> (entry=0x7979):
	instruction(0x7979)
	R15D = EAX
	R15 = zext(R15D)
	instruction(0x797c)
	CF = EAX < 0xffffffff:4
	OF = EAX sborrow 0xffffffff:4
	$U1:4 = EAX - 0xffffffff:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x797f)
	if ZF jump 0x7da6:8

0x7b10  LEA RAX,[RCX*0x8]
0x7b18  ADD RBX,0x38
0x7b1c  SUB RAX,RCX
0x7b1f  LEA RAX,[R8 + RAX*0x8]
0x7b23  CMP RBX,RAX
0x7b26  JNC 0x7a50
<L0> (entry=0x7b10):
	instruction(0x7b10)
	$U1:8 = RCX * 0x8:8
	RAX = $U1:8
	instruction(0x7b18)
	CF = RBX carry 0x38:8
	OF = RBX scarry 0x38:8
	RBX = RBX + 0x38:8
	SF = RBX s< 0x0:8
	ZF = RBX == 0x0:8
	$U1:8 = RBX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7b1c)
	CF = RAX < RCX
	OF = RAX sborrow RCX
	RAX = RAX - RCX
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7b1f)
	$U2:8 = RAX * 0x8:8
	$U1:8 = R8 + $U2:8
	RAX = $U1:8
	instruction(0x7b23)
	CF = RBX < RAX
	OF = RBX sborrow RAX
	$U1:8 = RBX - RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7b26)
	$U1:1 = !CF
	if $U1:1 jump 0x7a50:8

0x1e160  ENDBR64
0x1e164  PUSH RBP
0x1e165  MOV R8,RDX
0x1e168  LEA RAX,[0x2f801]
0x1e16f  MOV RDX,RCX
0x1e172  PUSH RBX
0x1e173  MOV EBP,EDI
0x1e175  SUB RSP,0x8
0x1e179  MOV RBX,qword ptr [0x3c218]
0x1e180  TEST RCX,RCX
0x1e183  CMOVZ RDX,RAX
0x1e187  TEST RBX,RBX
0x1e18a  JZ 0x1e1a8
<L0> (entry=0x1e160):
	instruction(0x1e160)
	instruction(0x1e164)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1e165)
	R8 = RDX
	instruction(0x1e168)
	RAX = 0x2f801:8
	instruction(0x1e16f)
	RDX = RCX
	instruction(0x1e172)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1e173)
	EBP = EDI
	RBP = zext(EBP)
	instruction(0x1e175)
	CF = RSP < 0x8:8
	OF = RSP sborrow 0x8:8
	RSP = RSP - 0x8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e179)
	RBX = ram[0x3c218:8]
	instruction(0x1e180)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RCX & RCX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e183)
	$U1:8 = RAX
	$U2:1 = !ZF
	if $U2:1 jump <L938>
<L1>:
	RDX = $U1:8
<L2>:
	instruction(0x1e187)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RBX & RBX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e18a)
	if ZF jump 0x1e1a8:8

0x4f5e  MOV ESI,dword ptr [RBP + -0x4c8]
0x4f64  MOV R8D,dword ptr [RBP + -0x4ec]
0x4f6b  LEA EAX,[RSI + 0x1]
0x4f6e  MOV dword ptr [R14 + 0x2c8],ESI
0x4f75  LEA RDX,[RBX + RAX*0x8]
0x4f79  MOV qword ptr [R14 + 0x2c0],RDX
0x4f80  TEST R8D,R8D
0x4f83  JNZ 0x564d
<L0> (entry=0x4f5e):
	instruction(0x4f5e)
	$U1:8 = RBP + 0xfffffffffffffb38:8
	ESI = ram[$U1:8]
	RSI = zext(ESI)
	instruction(0x4f64)
	$U1:8 = RBP + 0xfffffffffffffb14:8
	R8D = ram[$U1:8]
	R8 = zext(R8D)
	instruction(0x4f6b)
	$U1:8 = RSI + 0x1:8
	EAX = $U1:4
	RAX = zext(EAX)
	instruction(0x4f6e)
	$U1:8 = R14 + 0x2c8:8
	$U2:4 = ESI
	ram[$U1:8] = $U2:4
	instruction(0x4f75)
	$U2:8 = RAX * 0x8:8
	$U1:8 = RBX + $U2:8
	RDX = $U1:8
	instruction(0x4f79)
	$U1:8 = R14 + 0x2c0:8
	$U2:8 = RDX
	ram[$U1:8] = $U2:8
	instruction(0x4f80)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = R8D & R8D
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x4f83)
	$U1:1 = !ZF
	if $U1:1 jump 0x564d:8

0x234a0  CMP R8D,0xb0008000
0x234a7  JZ 0x2350a
<L0> (entry=0x234a0):
	instruction(0x234a0)
	CF = R8D < 0xb0008000:4
	OF = R8D sborrow 0xb0008000:4
	$U1:4 = R8D - 0xb0008000:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x234a7)
	if ZF jump 0x2350a:8

0x19714  CMP qword ptr [0x3ab00],0x0
0x1971c  JNZ 0x19746
<L0> (entry=0x19714):
	instruction(0x19714)
	$U5:8 = ram[0x3ab00:8]
	CF = $U5:8 < 0x0:8
	$U6:8 = ram[0x3ab00:8]
	OF = $U6:8 sborrow 0x0:8
	$U7:8 = ram[0x3ab00:8]
	$U1:8 = $U7:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1971c)
	$U1:1 = !ZF
	if $U1:1 jump 0x19746:8

0x149e5  MOV RDX,RCX
0x149e8  MOV RSI,qword ptr [R8 + RDX*0x8]
0x149ec  SUB RDX,0x1
0x149f0  AND byte ptr [RSI + 0x31d],0xfe
0x149f7  TEST EDX,EDX
0x149f9  JNS 0x149e8
<L0> (entry=0x149e5):
	instruction(0x149e5)
	RDX = RCX
	instruction(0x149e8)
	$U2:8 = RDX * 0x8:8
	$U1:8 = R8 + $U2:8
	RSI = ram[$U1:8]
	instruction(0x149ec)
	CF = RDX < 0x1:8
	OF = RDX sborrow 0x1:8
	RDX = RDX - 0x1:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x149f0)
	$U4:8 = RSI + 0x31d:8
	CF = 0x0:1
	OF = 0x0:1
	$U5:1 = ram[$U4:8]
	$U6:1 = $U5:1 & 0xfe:1
	ram[$U4:8] = $U6:1
	$U7:1 = ram[$U4:8]
	SF = $U7:1 s< 0x0:1
	$U8:1 = ram[$U4:8]
	ZF = $U8:1 == 0x0:1
	$U9:1 = ram[$U4:8]
	$U1:1 = $U9:1 & 0xff:1
	$U2:1 = count_ones($U1:1)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x149f7)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EDX & EDX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x149f9)
	$U1:1 = !SF
	if $U1:1 jump 0x149e8:8

0x188ed  LEA RSI,[RDX*0x8]
0x188f5  SUB RSI,RDX
0x188f8  SHL RSI,0x4
0x188fc  MOV RDX,RSI
0x188ff  ADD RDX,R8
0x18902  MOV qword ptr [RDX + 0x48],R9
0x18906  MOV qword ptr [RDX + 0x38],RAX
0x1890a  MOV qword ptr [RDX + 0x40],RCX
0x1890e  MOV byte ptr [RDX + 0x50],0x1
0x18912  RET
<L0> (entry=0x188ed):
	instruction(0x188ed)
	$U1:8 = RDX * 0x8:8
	RSI = $U1:8
	instruction(0x188f5)
	CF = RSI < RDX
	OF = RSI sborrow RDX
	RSI = RSI - RDX
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x188f8)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RSI
	RSI = RSI << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RSI s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RSI s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RSI == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RSI & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x188fc)
	RDX = RSI
	instruction(0x188ff)
	CF = RDX carry R8
	OF = RDX scarry R8
	RDX = RDX + R8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x18902)
	$U1:8 = RDX + 0x48:8
	$U2:8 = R9
	ram[$U1:8] = $U2:8
	instruction(0x18906)
	$U1:8 = RDX + 0x38:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1890a)
	$U1:8 = RDX + 0x40:8
	$U2:8 = RCX
	ram[$U1:8] = $U2:8
	instruction(0x1890e)
	$U1:8 = RDX + 0x50:8
	$U2:1 = 0x1:1
	ram[$U1:8] = $U2:1
	instruction(0x18912)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x9954  MOV qword ptr [0x39ad0],-0x1
0x995f  LEA RSP,[RBP + -0x28]
0x9963  POP RBX
0x9964  POP R12
0x9966  POP R13
0x9968  POP R14
0x996a  POP R15
0x996c  POP RBP
0x996d  RET
<L0> (entry=0x9954):
	instruction(0x9954)
	$U1:8 = 0xffffffffffffffff:8
	ram[0x39ad0:8] = $U1:8
	instruction(0x995f)
	$U1:8 = RBP + 0xffffffffffffffd8:8
	RSP = $U1:8
	instruction(0x9963)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0x9964)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R12 = $U1:8
	instruction(0x9966)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R13 = $U1:8
	instruction(0x9968)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R14 = $U1:8
	instruction(0x996a)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R15 = $U1:8
	instruction(0x996c)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBP = $U1:8
	instruction(0x996d)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x1af8b  MOV EDI,0xbb
0x1af90  MOV qword ptr [RSP + 0x20],RAX
0x1af95  CALL 0x19f10
<L0> (entry=0x1af8b):
	instruction(0x1af8b)
	RDI = 0xbb:8
	instruction(0x1af90)
	$U1:8 = 0x20:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1af95)
	$U1:8 = 0x1af9a:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x19f10:8

0x7c00  MOV RAX,qword ptr [R12 + 0x8]
0x7c05  MOV RCX,qword ptr [R12]
0x7c09  XOR RAX,R10
0x7c0c  XOR RCX,R11
0x7c0f  OR RAX,RCX
0x7c12  JNZ 0x7c70
<L0> (entry=0x7c00):
	instruction(0x7c00)
	$U1:8 = 0x8:8 + R12
	RAX = ram[$U1:8]
	instruction(0x7c05)
	RCX = ram[R12]
	instruction(0x7c09)
	CF = 0x0:1
	OF = 0x0:1
	RAX = RAX ^ R10
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7c0c)
	CF = 0x0:1
	OF = 0x0:1
	RCX = RCX ^ R11
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7c0f)
	CF = 0x0:1
	OF = 0x0:1
	RAX = RAX | RCX
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7c12)
	$U1:1 = !ZF
	if $U1:1 jump 0x7c70:8

0x10558  CMP AL,0xa
0x1055a  JNZ 0x10548
<L0> (entry=0x10558):
	instruction(0x10558)
	CF = AL < 0xa:1
	OF = AL sborrow 0xa:1
	$U1:1 = AL - 0xa:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1055a)
	$U1:1 = !ZF
	if $U1:1 jump 0x10548:8

0x10548  MOVZX EAX,byte ptr [RDX + 0x1]
0x1054c  ADD RDX,0x1
0x10550  TEST AL,AL
0x10552  JZ 0x10560
<L0> (entry=0x10548):
	instruction(0x10548)
	$U1:8 = RDX + 0x1:8
	$U2:1 = ram[$U1:8]
	EAX = zext($U2:1)
	RAX = zext(EAX)
	instruction(0x1054c)
	CF = RDX carry 0x1:8
	OF = RDX scarry 0x1:8
	RDX = RDX + 0x1:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x10550)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = AL & AL
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x10552)
	if ZF jump 0x10560:8

0x2059b  TEST R14B,R14B
0x2059e  JZ 0x205ac
<L0> (entry=0x2059b):
	instruction(0x2059b)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = R14B & R14B
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2059e)
	if ZF jump 0x205ac:8

0x20b37  MOVZX EBX,byte ptr [RDI]
0x20b3a  LEA ECX,[RBX + -0x30]
0x20b3d  CMP CL,0x9
0x20b40  JA 0x20baa
<L0> (entry=0x20b37):
	instruction(0x20b37)
	$U1:1 = ram[RDI]
	EBX = zext($U1:1)
	RBX = zext(EBX)
	instruction(0x20b3a)
	$U1:8 = RBX + 0xffffffffffffffd0:8
	ECX = $U1:4
	RCX = zext(ECX)
	instruction(0x20b3d)
	CF = CL < 0x9:1
	OF = CL sborrow 0x9:1
	$U1:1 = CL - 0x9:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x20b40)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x20baa:8

0x1e941  MOVZX ECX,byte ptr [RBP + -0xa0]
0x1e948  MOV EAX,0x1
0x1e94d  MOV RBX,qword ptr [RBP + -0xc0]
0x1e954  SHL EAX,CL
0x1e956  MOVSXD RCX,EAX
0x1e959  MOV dword ptr [RBP + -0xd8],EAX
0x1e95f  MOV RAX,qword ptr [RBP + -0x88]
0x1e966  MOV qword ptr [RBP + -0xe0],RCX
0x1e96d  ADD RAX,RCX
0x1e970  MOV qword ptr [RBX],RAX
0x1e973  SHL RAX,0x4
0x1e977  LEA RDI,[RAX + RDX*0x1]
0x1e97b  CALL qword ptr [0x3aa60]
<L0> (entry=0x1e941):
	instruction(0x1e941)
	$U1:8 = RBP + 0xffffffffffffff60:8
	$U2:1 = ram[$U1:8]
	ECX = zext($U2:1)
	RCX = zext(ECX)
	instruction(0x1e948)
	RAX = 0x1:8
	instruction(0x1e94d)
	$U1:8 = RBP + 0xffffffffffffff40:8
	RBX = ram[$U1:8]
	instruction(0x1e954)
	$U1:1 = CL & 0x1f:1
	$U2:4 = EAX
	EAX = EAX << $U1:1
	RAX = zext(EAX)
	$U3:1 = $U1:1 != 0x0:1
	$U5:1 = $U1:1 - 0x1:1
	$U6:4 = $U2:4 << $U5:1
	$U4:1 = $U6:4 s< 0x0:4
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:1 == 0x1:1
	$U12:1 = EAX s< 0x0:4
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:1 != 0x0:1
	$U17:1 = EAX s< 0x0:4
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = EAX == 0x0:4
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:4 = EAX & 0xff:4
	$U27:1 = count_ones($U26:4)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1e956)
	RCX = sext(EAX)
	instruction(0x1e959)
	$U1:8 = RBP + 0xffffffffffffff28:8
	$U2:4 = EAX
	ram[$U1:8] = $U2:4
	instruction(0x1e95f)
	$U1:8 = RBP + 0xffffffffffffff78:8
	RAX = ram[$U1:8]
	instruction(0x1e966)
	$U1:8 = RBP + 0xffffffffffffff20:8
	$U2:8 = RCX
	ram[$U1:8] = $U2:8
	instruction(0x1e96d)
	CF = RAX carry RCX
	OF = RAX scarry RCX
	RAX = RAX + RCX
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e970)
	$U1:8 = RAX
	ram[RBX] = $U1:8
	instruction(0x1e973)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RAX
	RAX = RAX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RAX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RAX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RAX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RAX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1e977)
	$U2:8 = RDX * 0x1:8
	$U1:8 = RAX + $U2:8
	RDI = $U1:8
	instruction(0x1e97b)
	$U1:8 = ram[0x3aa60:8]
	$U2:8 = 0x1e981:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U2:8
	call $U1:8

0x20718  MOV RAX,qword ptr [RDX + 0x8]
0x2071c  ADD RDX,0x10
0x20720  MOV R14D,0x1
0x20726  MOV qword ptr [RSP + 0x28],RAX
0x2072b  MOV RAX,qword ptr [RDX]
0x2072e  TEST RAX,RAX
0x20731  JNZ 0x20508
<L0> (entry=0x20718):
	instruction(0x20718)
	$U1:8 = RDX + 0x8:8
	RAX = ram[$U1:8]
	instruction(0x2071c)
	CF = RDX carry 0x10:8
	OF = RDX scarry 0x10:8
	RDX = RDX + 0x10:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x20720)
	R14 = 0x1:8
	instruction(0x20726)
	$U1:8 = 0x28:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x2072b)
	RAX = ram[RDX]
	instruction(0x2072e)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x20731)
	$U1:1 = !ZF
	if $U1:1 jump 0x20508:8

0x232fb  MOV RAX,qword ptr [0x3aaf8]
0x23302  MOV byte ptr [RBP + -0x288],0x0
0x23309  XOR R11D,R11D
0x2330c  LEA RDX,[0x2dffc]
0x23313  LEA R8,[0x3c280]
0x2331a  LEA R13,[0x3c260]
0x23321  MOV R10,RAX
0x23324  LEA RBX,[RAX + -0x1]
0x23328  MOV RAX,RDI
0x2332b  NEG R10
0x2332e  NOP
0x23330  MOV ECX,dword ptr [RAX]
0x23332  CMP ECX,0x7
0x23335  JA 0x23350
<L0> (entry=0x232fb):
	instruction(0x232fb)
	RAX = ram[0x3aaf8:8]
	instruction(0x23302)
	$U1:8 = RBP + 0xfffffffffffffd78:8
	$U2:1 = 0x0:1
	ram[$U1:8] = $U2:1
	instruction(0x23309)
	CF = 0x0:1
	OF = 0x0:1
	R11D = R11D ^ R11D
	R11 = zext(R11D)
	SF = R11D s< 0x0:4
	ZF = R11D == 0x0:4
	$U1:4 = R11D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2330c)
	RDX = 0x2dffc:8
	instruction(0x23313)
	R8 = 0x3c280:8
	instruction(0x2331a)
	R13 = 0x3c260:8
	instruction(0x23321)
	R10 = RAX
	instruction(0x23324)
	$U1:8 = RAX + 0xffffffffffffffff:8
	RBX = $U1:8
	instruction(0x23328)
	RAX = RDI
	instruction(0x2332b)
	CF = R10 != 0x0:8
	OF = 0x0:8 sborrow R10
	R10 = -R10
	SF = R10 s< 0x0:8
	ZF = R10 == 0x0:8
	$U1:8 = R10 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2332e)
	instruction(0x23330)
	ECX = ram[RAX]
	RCX = zext(ECX)
	instruction(0x23332)
	CF = ECX < 0x7:4
	OF = ECX sborrow 0x7:4
	$U1:4 = ECX - 0x7:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23335)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x23350:8

0x20ba0  CMP R8D,0x3
0x20ba4  JZ 0x20b09
<L0> (entry=0x20ba0):
	instruction(0x20ba0)
	CF = R8D < 0x3:4
	OF = R8D sborrow 0x3:4
	$U1:4 = R8D - 0x3:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x20ba4)
	if ZF jump 0x20b09:8

0x1e194  MOV RAX,qword ptr [RBX + 0x8]
0x1e198  LEA RDI,[RBX + 0x10]
0x1e19c  MOV ESI,0x1
0x1e1a1  MOV dword ptr [RAX],EBP
0x1e1a3  CALL 0x27f50
<L0> (entry=0x1e194):
	instruction(0x1e194)
	$U1:8 = RBX + 0x8:8
	RAX = ram[$U1:8]
	instruction(0x1e198)
	$U1:8 = RBX + 0x10:8
	RDI = $U1:8
	instruction(0x1e19c)
	RSI = 0x1:8
	instruction(0x1e1a1)
	$U1:4 = EBP
	ram[RAX] = $U1:4
	instruction(0x1e1a3)
	$U1:8 = 0x1e1a8:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x27f50:8

0x5308  MOV ESI,dword ptr [RBP + -0x4a0]
0x530e  TEST ESI,ESI
0x5310  JNZ 0x5a20
<L0> (entry=0x5308):
	instruction(0x5308)
	$U1:8 = RBP + 0xfffffffffffffb60:8
	ESI = ram[$U1:8]
	RSI = zext(ESI)
	instruction(0x530e)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = ESI & ESI
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x5310)
	$U1:1 = !ZF
	if $U1:1 jump 0x5a20:8

0x1ed5e  LEA RCX,[RAX + -0x3]
0x1ed62  ADD RDX,RDX
0x1ed65  CMP RCX,0x1
0x1ed69  JBE 0x1ef76
<L0> (entry=0x1ed5e):
	instruction(0x1ed5e)
	$U1:8 = RAX + 0xfffffffffffffffd:8
	RCX = $U1:8
	instruction(0x1ed62)
	CF = RDX carry RDX
	OF = RDX scarry RDX
	RDX = RDX + RDX
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ed65)
	CF = RCX < 0x1:8
	OF = RCX sborrow 0x1:8
	$U1:8 = RCX - 0x1:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1ed69)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x1ef76:8

0xed80  TEST R9,R9
0xed83  JNZ 0xedd7
<L0> (entry=0xed80):
	instruction(0xed80)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R9 & R9
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xed83)
	$U1:1 = !ZF
	if $U1:1 jump 0xedd7:8

0x105aa  MOVSXD R12,R12D
0x105ad  MOV EDI,dword ptr [RBP + -0x464]
0x105b3  LEA RSI,[RBP + -0x430]
0x105ba  MOV RDX,R12
0x105bd  MOV EAX,0x14
0x105c2  SYSCALL
<L0> (entry=0x105aa):
	instruction(0x105aa)
	R12 = sext(R12D)
	instruction(0x105ad)
	$U1:8 = RBP + 0xfffffffffffffb9c:8
	EDI = ram[$U1:8]
	RDI = zext(EDI)
	instruction(0x105b3)
	$U1:8 = RBP + 0xfffffffffffffbd0:8
	RSI = $U1:8
	instruction(0x105ba)
	RDX = R12
	instruction(0x105bd)
	RAX = 0x14:8
	instruction(0x105c2)
	RCX = 0x105c4:8
	$U1:1 = NT & 0x1:1
	$U2:8 = zext($U1:1)
	$U3:8 = 0x4000:8 * $U2:8
	$U4:1 = OF & 0x1:1
	$U5:8 = zext($U4:1)
	$U6:8 = 0x800:8 * $U5:8
	$U7:8 = $U3:8 | $U6:8
	$U8:1 = DF & 0x1:1
	$U9:8 = zext($U8:1)
	$U10:8 = 0x400:8 * $U9:8
	$U11:8 = $U7:8 | $U10:8
	$U12:1 = IF & 0x1:1
	$U13:8 = zext($U12:1)
	$U14:8 = 0x200:8 * $U13:8
	$U15:8 = $U11:8 | $U14:8
	$U16:1 = TF & 0x1:1
	$U17:8 = zext($U16:1)
	$U18:8 = 0x100:8 * $U17:8
	$U19:8 = $U15:8 | $U18:8
	$U20:1 = SF & 0x1:1
	$U21:8 = zext($U20:1)
	$U22:8 = 0x80:8 * $U21:8
	$U23:8 = $U19:8 | $U22:8
	$U24:1 = ZF & 0x1:1
	$U25:8 = zext($U24:1)
	$U26:8 = 0x40:8 * $U25:8
	$U27:8 = $U23:8 | $U26:8
	$U28:1 = AF & 0x1:1
	$U29:8 = zext($U28:1)
	$U30:8 = 0x10:8 * $U29:8
	$U31:8 = $U27:8 | $U30:8
	$U32:1 = PF & 0x1:1
	$U33:8 = zext($U32:1)
	$U34:8 = 0x4:8 * $U33:8
	$U35:8 = $U31:8 | $U34:8
	$U36:1 = CF & 0x1:1
	$U37:8 = zext($U36:1)
	$U38:8 = 0x1:8 * $U37:8
	R11 = $U35:8 | $U38:8
	NEXT_PC = 0x105c4:8
	exception(0x101:4, 0x0:4)

0x5631  MOV qword ptr [RBP + -0x4b8],R10
0x5638  MOV R15,R14
0x563b  MOV RAX,R10
0x563e  MOV dword ptr [RBP + -0x4c8],0x1
0x5648  JMP 0x498f
<L0> (entry=0x5631):
	instruction(0x5631)
	$U1:8 = RBP + 0xfffffffffffffb48:8
	$U2:8 = R10
	ram[$U1:8] = $U2:8
	instruction(0x5638)
	R15 = R14
	instruction(0x563b)
	RAX = R10
	instruction(0x563e)
	$U1:8 = RBP + 0xfffffffffffffb38:8
	$U2:4 = 0x1:4
	ram[$U1:8] = $U2:4
	instruction(0x5648)
	jump 0x498f:8

0xe6d4  TEST EAX,EAX
0xe6d6  JNZ 0xe6c0
<L0> (entry=0xe6d4):
	instruction(0xe6d4)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xe6d6)
	$U1:1 = !ZF
	if $U1:1 jump 0xe6c0:8

0x1b7c0  JMP 0x1a530
<L0> (entry=0x1b7c0):
	jump 0x1a530:8

0x233ca  MOV RDX,qword ptr [R12 + 0x10]
0x233cf  MOV RAX,qword ptr [R15]
0x233d2  MOV R9,qword ptr [R12 + 0x28]
0x233d7  TEST byte ptr [R15 + 0x321],0x3
0x233df  JNZ 0x233af
<L0> (entry=0x233ca):
	instruction(0x233ca)
	$U1:8 = 0x10:8 + R12
	RDX = ram[$U1:8]
	instruction(0x233cf)
	RAX = ram[R15]
	instruction(0x233d2)
	$U1:8 = 0x28:8 + R12
	R9 = ram[$U1:8]
	instruction(0x233d7)
	$U5:8 = R15 + 0x321:8
	CF = 0x0:1
	OF = 0x0:1
	$U6:1 = ram[$U5:8]
	$U1:1 = $U6:1 & 0x3:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x233df)
	$U1:1 = !ZF
	if $U1:1 jump 0x233af:8

0x14afa  MOV RSP,RBX
0x14afd  JMP 0x14870
<L0> (entry=0x14afa):
	instruction(0x14afa)
	RSP = RBX
	instruction(0x14afd)
	jump 0x14870:8

0x1eff0  ENDBR64
0x1eff4  MOV EDX,dword ptr [0x3ab80]
0x1effa  XOR EAX,EAX
0x1effc  MOV ECX,EDX
0x1effe  AND ECX,0x8100
0x1f004  CMP ECX,0x8100
0x1f00a  JZ 0x1f010
<L0> (entry=0x1eff0):
	instruction(0x1eff0)
	instruction(0x1eff4)
	EDX = ram[0x3ab80:8]
	RDX = zext(EDX)
	instruction(0x1effa)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1effc)
	ECX = EDX
	RCX = zext(ECX)
	instruction(0x1effe)
	CF = 0x0:1
	OF = 0x0:1
	ECX = ECX & 0x8100:4
	RCX = zext(ECX)
	SF = ECX s< 0x0:4
	ZF = ECX == 0x0:4
	$U1:4 = ECX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1f004)
	CF = ECX < 0x8100:4
	OF = ECX sborrow 0x8100:4
	$U1:4 = ECX - 0x8100:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1f00a)
	if ZF jump 0x1f010:8

0x1e596  MOV RDI,R13
0x1e599  MOV qword ptr [RBP + -0x80],R12
0x1e59d  MOV qword ptr [RBP + -0xb0],RBX
0x1e5a4  SHL RDI,0x4
0x1e5a8  MOV qword ptr [RBP + -0x88],R13
0x1e5af  CALL qword ptr [0x3aa60]
<L0> (entry=0x1e596):
	instruction(0x1e596)
	RDI = R13
	instruction(0x1e599)
	$U1:8 = RBP + 0xffffffffffffff80:8
	$U2:8 = R12
	ram[$U1:8] = $U2:8
	instruction(0x1e59d)
	$U1:8 = RBP + 0xffffffffffffff50:8
	$U2:8 = RBX
	ram[$U1:8] = $U2:8
	instruction(0x1e5a4)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RDI
	RDI = RDI << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RDI s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RDI s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RDI == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RDI & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1e5a8)
	$U1:8 = RBP + 0xffffffffffffff78:8
	$U2:8 = R13
	ram[$U1:8] = $U2:8
	instruction(0x1e5af)
	$U1:8 = ram[0x3aa60:8]
	$U2:8 = 0x1e5b5:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U2:8
	call $U1:8

0x9bc6  RET
<L0> (entry=0x9bc6):
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0xba41  MOV RAX,R12
0xba44  TEST R12,R12
0xba47  JZ 0xbc3c
<L0> (entry=0xba41):
	instruction(0xba41)
	RAX = R12
	instruction(0xba44)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R12 & R12
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xba47)
	if ZF jump 0xbc3c:8

0x24265  MOV RAX,qword ptr [R15 + 0x270]
0x2426c  TEST RAX,RAX
0x2426f  JZ 0x242ab
<L0> (entry=0x24265):
	instruction(0x24265)
	$U1:8 = R15 + 0x270:8
	RAX = ram[$U1:8]
	instruction(0x2426c)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2426f)
	if ZF jump 0x242ab:8

0x1e070  PUSH R13
0x1e072  LEA RAX,[0x2fee9]
0x1e079  MOV R13,RSI
0x1e07c  MOV R9,RCX
0x1e07f  PUSH R12
0x1e081  MOV R12,RDX
0x1e084  MOV RDX,RAX
0x1e087  SUB RSP,0x418
0x1e08e  TEST EDI,EDI
0x1e090  JNZ 0x1e0e5
<L0> (entry=0x1e070):
	instruction(0x1e070)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1e072)
	RAX = 0x2fee9:8
	instruction(0x1e079)
	R13 = RSI
	instruction(0x1e07c)
	R9 = RCX
	instruction(0x1e07f)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1e081)
	R12 = RDX
	instruction(0x1e084)
	RDX = RAX
	instruction(0x1e087)
	CF = RSP < 0x418:8
	OF = RSP sborrow 0x418:8
	RSP = RSP - 0x418:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e08e)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EDI & EDI
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e090)
	$U1:1 = !ZF
	if $U1:1 jump 0x1e0e5:8

0xb47d  MOVZX EDX,byte ptr [R14 + 0x31d]
0xb485  MOVZX EAX,byte ptr [R14 + 0x31e]
0xb48d  SHR DL,0x5
0xb490  SHR AL,0x1
0xb492  OR EAX,EDX
0xb494  TEST AL,0x1
0xb496  JNZ 0xb470
<L0> (entry=0xb47d):
	instruction(0xb47d)
	$U1:8 = R14 + 0x31d:8
	$U2:1 = ram[$U1:8]
	EDX = zext($U2:1)
	RDX = zext(EDX)
	instruction(0xb485)
	$U1:8 = R14 + 0x31e:8
	$U2:1 = ram[$U1:8]
	EAX = zext($U2:1)
	RAX = zext(EAX)
	instruction(0xb48d)
	$U1:8 = 0x5:8 & 0x1f:8
	$U2:1 = DL
	DL = DL >> $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:1 = $U2:1 >> $U5:8
	$U7:1 = $U6:1 & 0x1:1
	$U4:1 = $U7:1 != 0x0:1
	$U8:1 = !$U3:1
	$U9:1 = $U8:1 && CF
	$U10:1 = $U3:1 && $U4:1
	CF = $U9:1 || $U10:1
	$U11:1 = $U1:8 == 0x1:8
	$U12:1 = $U2:1 s< 0x0:1
	$U13:1 = !$U11:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U11:1 && $U12:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = DL s< 0x0:1
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = DL == 0x0:1
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:1 = DL & 0xff:1
	$U27:1 = count_ones($U26:1)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0xb490)
	CF = AL & 0x1:1
	OF = 0x0:1
	AL = AL >> 0x1:8
	SF = AL s< 0x0:1
	ZF = AL == 0x0:1
	$U1:1 = AL & 0xff:1
	$U2:1 = count_ones($U1:1)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xb492)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX | EDX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xb494)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = AL & 0x1:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb496)
	$U1:1 = !ZF
	if $U1:1 jump 0xb470:8

0x105c4  LEA RSP,[RBP + -0x28]
0x105c8  POP RBX
0x105c9  POP R12
0x105cb  POP R13
0x105cd  POP R14
0x105cf  POP R15
0x105d1  POP RBP
0x105d2  RET
<L0> (entry=0x105c4):
	instruction(0x105c4)
	$U1:8 = RBP + 0xffffffffffffffd8:8
	RSP = $U1:8
	instruction(0x105c8)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0x105c9)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R12 = $U1:8
	instruction(0x105cb)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R13 = $U1:8
	instruction(0x105cd)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R14 = $U1:8
	instruction(0x105cf)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R15 = $U1:8
	instruction(0x105d1)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBP = $U1:8
	instruction(0x105d2)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x22a1f  MOV RBX,qword ptr [0x3aac0]
0x22a26  MOV RCX,qword ptr [RBP + -0x280]
0x22a2d  LEA RAX,[0x21290]
0x22a34  MOV RDI,qword ptr [RBX]
0x22a37  MOV qword ptr [RBP + -0x298],RDI
0x22a3e  CMP qword ptr [RCX],RAX
0x22a41  JNZ 0x2321d
<L0> (entry=0x22a1f):
	instruction(0x22a1f)
	RBX = ram[0x3aac0:8]
	instruction(0x22a26)
	$U1:8 = RBP + 0xfffffffffffffd80:8
	RCX = ram[$U1:8]
	instruction(0x22a2d)
	RAX = 0x21290:8
	instruction(0x22a34)
	RDI = ram[RBX]
	instruction(0x22a37)
	$U1:8 = RBP + 0xfffffffffffffd68:8
	$U2:8 = RDI
	ram[$U1:8] = $U2:8
	instruction(0x22a3e)
	$U5:8 = ram[RCX]
	CF = $U5:8 < RAX
	$U6:8 = ram[RCX]
	OF = $U6:8 sborrow RAX
	$U7:8 = ram[RCX]
	$U1:8 = $U7:8 - RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x22a41)
	$U1:1 = !ZF
	if $U1:1 jump 0x2321d:8

0x7fde  AND ECX,0xfff
0x7fe4  SUB RSP,RCX
0x7fe7  TEST RCX,RCX
0x7fea  JNZ 0x84ee
<L0> (entry=0x7fde):
	instruction(0x7fde)
	CF = 0x0:1
	OF = 0x0:1
	ECX = ECX & 0xfff:4
	RCX = zext(ECX)
	SF = ECX s< 0x0:4
	ZF = ECX == 0x0:4
	$U1:4 = ECX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7fe4)
	CF = RSP < RCX
	OF = RSP sborrow RCX
	RSP = RSP - RCX
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7fe7)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RCX & RCX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7fea)
	$U1:1 = !ZF
	if $U1:1 jump 0x84ee:8

0x20538  TEST SIL,SIL
0x2053b  JZ 0x20548
<L0> (entry=0x20538):
	instruction(0x20538)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = SIL & SIL
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2053b)
	if ZF jump 0x20548:8

0x20b09  ADD RSP,0x1d0
0x20b10  POP RBX
0x20b11  POP RBP
0x20b12  POP R12
0x20b14  RET
<L0> (entry=0x20b09):
	instruction(0x20b09)
	CF = RSP carry 0x1d0:8
	OF = RSP scarry 0x1d0:8
	RSP = RSP + 0x1d0:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x20b10)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0x20b11)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBP = $U1:8
	instruction(0x20b12)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R12 = $U1:8
	instruction(0x20b14)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x20678  MOV RAX,qword ptr [RDX + 0x8]
0x2067c  ADD RDX,0x10
0x20680  MOV R8D,0x1
0x20686  MOV qword ptr [RSP + 0x8],RAX
0x2068b  MOV RAX,qword ptr [RDX]
0x2068e  TEST RAX,RAX
0x20691  JNZ 0x20508
<L0> (entry=0x20678):
	instruction(0x20678)
	$U1:8 = RDX + 0x8:8
	RAX = ram[$U1:8]
	instruction(0x2067c)
	CF = RDX carry 0x10:8
	OF = RDX scarry 0x10:8
	RDX = RDX + 0x10:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x20680)
	R8 = 0x1:8
	instruction(0x20686)
	$U1:8 = 0x8:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x2068b)
	RAX = ram[RDX]
	instruction(0x2068e)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x20691)
	$U1:1 = !ZF
	if $U1:1 jump 0x20508:8

0x5af8  LEA R15,[RAX + 0x1]
0x5afc  LEA RDI,[R15 + R14*0x1]
0x5b00  CALL qword ptr [0x3aa60]
<L0> (entry=0x5af8):
	instruction(0x5af8)
	$U1:8 = RAX + 0x1:8
	R15 = $U1:8
	instruction(0x5afc)
	$U2:8 = R14 * 0x1:8
	$U1:8 = R15 + $U2:8
	RDI = $U1:8
	instruction(0x5b00)
	$U1:8 = ram[0x3aa60:8]
	$U2:8 = 0x5b06:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U2:8
	call $U1:8

0x10ac4  MOV RDX,qword ptr [RDI + 0x8]
0x10ac8  LEA RAX,[RDX + 0x8]
0x10acc  MOV qword ptr [RDI + 0x8],RAX
0x10ad0  JMP 0x109af
<L0> (entry=0x10ac4):
	instruction(0x10ac4)
	$U1:8 = RDI + 0x8:8
	RDX = ram[$U1:8]
	instruction(0x10ac8)
	$U1:8 = RDX + 0x8:8
	RAX = $U1:8
	instruction(0x10acc)
	$U1:8 = RDI + 0x8:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x10ad0)
	jump 0x109af:8

0x225e0  MOV RSI,R13
0x225e3  SUB RSI,RAX
0x225e6  MOV RAX,RSI
0x225e9  JMP 0x220c9
<L0> (entry=0x225e0):
	instruction(0x225e0)
	RSI = R13
	instruction(0x225e3)
	CF = RSI < RAX
	OF = RSI sborrow RAX
	RSI = RSI - RAX
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x225e6)
	RAX = RSI
	instruction(0x225e9)
	jump 0x220c9:8

0x221fd  CMP qword ptr [0x3bba8],0x0
0x22205  JNZ 0x2267f
<L0> (entry=0x221fd):
	instruction(0x221fd)
	$U5:8 = ram[0x3bba8:8]
	CF = $U5:8 < 0x0:8
	$U6:8 = ram[0x3bba8:8]
	OF = $U6:8 sborrow 0x0:8
	$U7:8 = ram[0x3bba8:8]
	$U1:8 = $U7:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x22205)
	$U1:1 = !ZF
	if $U1:1 jump 0x2267f:8

0x20804  MOV qword ptr [0x3aaf0],RAX
0x2080b  XOR EDI,EDI
0x2080d  CALL 0x26ab0
<L0> (entry=0x20804):
	instruction(0x20804)
	$U1:8 = RAX
	ram[0x3aaf0:8] = $U1:8
	instruction(0x2080b)
	CF = 0x0:1
	OF = 0x0:1
	EDI = EDI ^ EDI
	RDI = zext(EDI)
	SF = EDI s< 0x0:4
	ZF = EDI == 0x0:4
	$U1:4 = EDI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2080d)
	$U1:8 = 0x20812:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x26ab0:8

0x238fa  MOV RAX,qword ptr [R15 + 0x130]
0x23901  TEST RAX,RAX
0x23904  JZ 0x23935
<L0> (entry=0x238fa):
	instruction(0x238fa)
	$U1:8 = R15 + 0x130:8
	RAX = ram[$U1:8]
	instruction(0x23901)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23904)
	if ZF jump 0x23935:8

0x106f9  CMP AL,0x73
0x106fb  JZ 0x10992
<L0> (entry=0x106f9):
	instruction(0x106f9)
	CF = AL < 0x73:1
	OF = AL sborrow 0x73:1
	$U1:1 = AL - 0x73:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x106fb)
	if ZF jump 0x10992:8

0x27860  ENDBR64
0x27864  MOV RDX,RSI
0x27867  XOR ECX,ECX
0x27869  MOV RSI,RDI
0x2786c  MOV EDI,0xffffff9c
0x27871  JMP 0x278d0
<L0> (entry=0x27860):
	instruction(0x27860)
	instruction(0x27864)
	RDX = RSI
	instruction(0x27867)
	CF = 0x0:1
	OF = 0x0:1
	ECX = ECX ^ ECX
	RCX = zext(ECX)
	SF = ECX s< 0x0:4
	ZF = ECX == 0x0:4
	$U1:4 = ECX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x27869)
	RSI = RDI
	instruction(0x2786c)
	RDI = 0xffffff9c:8
	instruction(0x27871)
	jump 0x278d0:8

0x8231  MOV RAX,qword ptr [0x39ab8]
0x8238  LEA RDX,[RBX + 0x1]
0x823c  CMP RAX,RBX
0x823f  JBE 0x81b0
<L0> (entry=0x8231):
	instruction(0x8231)
	RAX = ram[0x39ab8:8]
	instruction(0x8238)
	$U1:8 = RBX + 0x1:8
	RDX = $U1:8
	instruction(0x823c)
	CF = RAX < RBX
	OF = RAX sborrow RBX
	$U1:8 = RAX - RBX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x823f)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x81b0:8

0x1b7b0  ENDBR64
0x1b7b4  MOV EAX,dword ptr [0x3ab50]
0x1b7ba  TEST EAX,EAX
0x1b7bc  JZ 0x1b7c0
<L0> (entry=0x1b7b0):
	instruction(0x1b7b0)
	instruction(0x1b7b4)
	EAX = ram[0x3ab50:8]
	RAX = zext(EAX)
	instruction(0x1b7ba)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1b7bc)
	if ZF jump 0x1b7c0:8

0x2c1a0  ENDBR64
0x2c1a4  MOVD XMM0, ESI
0x2c1a8  MOV RAX,RDI
0x2c1ab  PUNPCKLBW XMM0, XMM0
0x2c1af  PUNPCKLWD XMM0, XMM0
0x2c1b3  PSHUFD XMM0, XMM0, 0x0
0x2c1b8  CMP RDX,0x10
0x2c1bc  JC 0x2c240
<L0> (entry=0x2c1a0):
	instruction(0x2c1a0)
	instruction(0x2c1a4)
	XMM0 = zext(ESI)
	instruction(0x2c1a8)
	RAX = RDI
	instruction(0x2c1ab)
	XMM0_Bp = XMM0_Bh
	XMM0_Bo = XMM0_Bh
	XMM0_Bn = XMM0_Bg
	XMM0_Bm = XMM0_Bg
	XMM0_Bl = XMM0_Bf
	XMM0_Bk = XMM0_Bf
	XMM0_Bj = XMM0_Be
	XMM0_Bi = XMM0_Be
	XMM0_Bh = XMM0_Bd
	XMM0_Bg = XMM0_Bd
	XMM0_Bf = XMM0_Bc
	XMM0_Be = XMM0_Bc
	XMM0_Bd = XMM0_Bb
	XMM0_Bc = XMM0_Bb
	XMM0_Bb = XMM0_Ba
	instruction(0x2c1af)
	XMM0_Wh = XMM0_Wd
	XMM0_Wg = XMM0_Wd
	XMM0_Wf = XMM0_Wc
	XMM0_We = XMM0_Wc
	XMM0_Wd = XMM0_Wb
	XMM0_Wc = XMM0_Wb
	XMM0_Wb = XMM0_Wa
	instruction(0x2c1b3)
	$U1:16 = XMM0
	$U2:16 = $U1:16 >> 0x0:1
	XMM0_Da = $U2:4
	$U2:16 = $U1:16 >> 0x0:1
	XMM0_Db = $U2:4
	$U2:16 = $U1:16 >> 0x0:1
	XMM0_Dc = $U2:4
	$U2:16 = $U1:16 >> 0x0:1
	XMM0_Dd = $U2:4
	instruction(0x2c1b8)
	CF = RDX < 0x10:8
	OF = RDX sborrow 0x10:8
	$U1:8 = RDX - 0x10:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2c1bc)
	if CF jump 0x2c240:8

0x104c0  PUSH RBP
0x104c1  MOV RBP,RSP
0x104c4  PUSH R15
0x104c6  PUSH R14
0x104c8  PUSH R13
0x104ca  PUSH R12
0x104cc  PUSH RBX
0x104cd  SUB RSP,0x448
0x104d4  MOVZX EAX,byte ptr [RDX]
0x104d7  MOV dword ptr [RBP + -0x464],EDI
0x104dd  TEST AL,AL
0x104df  JZ 0x10b8d
<L0> (entry=0x104c0):
	instruction(0x104c0)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x104c1)
	RBP = RSP
	instruction(0x104c4)
	$U1:8 = R15
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x104c6)
	$U1:8 = R14
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x104c8)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x104ca)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x104cc)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x104cd)
	CF = RSP < 0x448:8
	OF = RSP sborrow 0x448:8
	RSP = RSP - 0x448:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x104d4)
	$U1:1 = ram[RDX]
	EAX = zext($U1:1)
	RAX = zext(EAX)
	instruction(0x104d7)
	$U1:8 = RBP + 0xfffffffffffffb9c:8
	$U2:4 = EDI
	ram[$U1:8] = $U2:4
	instruction(0x104dd)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = AL & AL
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x104df)
	if ZF jump 0x10b8d:8

0x1a1e4  MOV EAX,dword ptr [0x3ac48]
0x1a1ea  TEST AL,0x1
0x1a1ec  JZ 0x1a20e
<L0> (entry=0x1a1e4):
	instruction(0x1a1e4)
	EAX = ram[0x3ac48:8]
	RAX = zext(EAX)
	instruction(0x1a1ea)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = AL & 0x1:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1a1ec)
	if ZF jump 0x1a20e:8

0x234a9  CMP R8D,0xc0008002
0x234b0  JA 0x25486
<L0> (entry=0x234a9):
	instruction(0x234a9)
	CF = R8D < 0xc0008002:4
	OF = R8D sborrow 0xc0008002:4
	$U1:4 = R8D - 0xc0008002:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x234b0)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x25486:8

0x1e369  ADD RSP,0x110
0x1e370  MOV EAX,R12D
0x1e373  POP R12
0x1e375  RET
<L0> (entry=0x1e369):
	instruction(0x1e369)
	CF = RSP carry 0x110:8
	OF = RSP scarry 0x110:8
	RSP = RSP + 0x110:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e370)
	EAX = R12D
	RAX = zext(EAX)
	instruction(0x1e373)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R12 = $U1:8
	instruction(0x1e375)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x1f130  ADD RSP,0x8
0x1f134  XOR EAX,EAX
0x1f136  POP RBX
0x1f137  POP RBP
0x1f138  RET
<L0> (entry=0x1f130):
	instruction(0x1f130)
	CF = RSP carry 0x8:8
	OF = RSP scarry 0x8:8
	RSP = RSP + 0x8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1f134)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1f136)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0x1f137)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBP = $U1:8
	instruction(0x1f138)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0xb6c3  MOV RAX,qword ptr [R12 + 0x3c0]
0xb6cb  LEA R11,[R12 + 0x3c0]
0xb6d3  CMP RAX,-0x1
0xb6d7  JZ 0xb955
<L0> (entry=0xb6c3):
	instruction(0xb6c3)
	$U1:8 = 0x3c0:8 + R12
	RAX = ram[$U1:8]
	instruction(0xb6cb)
	$U1:8 = 0x3c0:8 + R12
	R11 = $U1:8
	instruction(0xb6d3)
	CF = RAX < 0xffffffffffffffff:8
	OF = RAX sborrow 0xffffffffffffffff:8
	$U1:8 = RAX - 0xffffffffffffffff:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb6d7)
	if ZF jump 0xb955:8

0x7a77  XOR EBX,EBX
0x7a79  CMP dword ptr [R13 + 0x1c],0x1
0x7a7e  JNZ 0x7e29
<L0> (entry=0x7a77):
	instruction(0x7a77)
	CF = 0x0:1
	OF = 0x0:1
	EBX = EBX ^ EBX
	RBX = zext(EBX)
	SF = EBX s< 0x0:4
	ZF = EBX == 0x0:4
	$U1:4 = EBX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7a79)
	$U5:8 = R13 + 0x1c:8
	$U6:4 = ram[$U5:8]
	CF = $U6:4 < 0x1:4
	$U7:4 = ram[$U5:8]
	OF = $U7:4 sborrow 0x1:4
	$U8:4 = ram[$U5:8]
	$U1:4 = $U8:4 - 0x1:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7a7e)
	$U1:1 = !ZF
	if $U1:1 jump 0x7e29:8

0x2829c  MOV R8D,EDX
0x2829f  XCHG EAX,ECX
0x282a0  XCHG RDI,RSI
0x282a3  LEA R9,[RAX + 0xf]
0x282a7  SUB R9,RCX
0x282aa  LEA R10,[0x2e418]
0x282b1  MOVSXD R9,dword ptr [R10 + R9*0x4]
0x282b5  LEA R10,[R10 + R9*0x1]
0x282b9  JMP R10
<L0> (entry=0x2829c):
	instruction(0x2829c)
	R8D = EDX
	R8 = zext(R8D)
	instruction(0x2829f)
	$U1:4 = EAX
	EAX = ECX
	RAX = zext(EAX)
	ECX = $U1:4
	RCX = zext(ECX)
	instruction(0x282a0)
	$U1:8 = RDI
	RDI = RSI
	RSI = $U1:8
	instruction(0x282a3)
	$U1:8 = RAX + 0xf:8
	R9 = $U1:8
	instruction(0x282a7)
	CF = R9 < RCX
	OF = R9 sborrow RCX
	R9 = R9 - RCX
	SF = R9 s< 0x0:8
	ZF = R9 == 0x0:8
	$U1:8 = R9 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x282aa)
	R10 = 0x2e418:8
	instruction(0x282b1)
	$U2:8 = R9 * 0x4:8
	$U1:8 = R10 + $U2:8
	$U3:4 = ram[$U1:8]
	R9 = sext($U3:4)
	instruction(0x282b5)
	$U2:8 = R9 * 0x1:8
	$U1:8 = R10 + $U2:8
	R10 = $U1:8
	instruction(0x282b9)
	jump R10

0x236f9  MOV qword ptr [R15 + 0x368],RCX
0x23700  ADD RCX,RBX
0x23703  ADD RAX,0x38
0x23707  AND RCX,R10
0x2370a  MOV R11,RCX
0x2370d  CMP R12,RAX
0x23710  JA 0x23330
<L0> (entry=0x236f9):
	instruction(0x236f9)
	$U1:8 = R15 + 0x368:8
	$U2:8 = RCX
	ram[$U1:8] = $U2:8
	instruction(0x23700)
	CF = RCX carry RBX
	OF = RCX scarry RBX
	RCX = RCX + RBX
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x23703)
	CF = RAX carry 0x38:8
	OF = RAX scarry 0x38:8
	RAX = RAX + 0x38:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x23707)
	CF = 0x0:1
	OF = 0x0:1
	RCX = RCX & R10
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2370a)
	R11 = RCX
	instruction(0x2370d)
	CF = R12 < RAX
	OF = R12 sborrow RAX
	$U1:8 = R12 - RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23710)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x23330:8

0x1f245  LEA RAX,[RBP + 0x1]
0x1f249  NOP dword ptr [RAX]
0x1f250  MOV qword ptr [RBX],RAX
0x1f253  MOV RBP,RAX
0x1f256  MOVZX EDX,byte ptr [RAX]
0x1f259  ADD RAX,0x1
0x1f25d  CMP DL,0x3a
0x1f260  JZ 0x1f250
<L0> (entry=0x1f245):
	instruction(0x1f245)
	$U1:8 = RBP + 0x1:8
	RAX = $U1:8
	instruction(0x1f249)
	instruction(0x1f250)
	$U1:8 = RAX
	ram[RBX] = $U1:8
	instruction(0x1f253)
	RBP = RAX
	instruction(0x1f256)
	$U1:1 = ram[RAX]
	EDX = zext($U1:1)
	RDX = zext(EDX)
	instruction(0x1f259)
	CF = RAX carry 0x1:8
	OF = RAX scarry 0x1:8
	RAX = RAX + 0x1:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1f25d)
	CF = DL < 0x3a:1
	OF = DL sborrow 0x3a:1
	$U1:1 = DL - 0x3a:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1f260)
	if ZF jump 0x1f250:8

0x20790  MOV RAX,qword ptr [RDX + 0x8]
0x20794  ADD RDX,0x10
0x20798  MOV byte ptr [RSP + 0x1d],0x1
0x2079d  MOV qword ptr [RSP + 0x40],RAX
0x207a2  MOV RAX,qword ptr [RDX]
0x207a5  TEST RAX,RAX
0x207a8  JNZ 0x20508
<L0> (entry=0x20790):
	instruction(0x20790)
	$U1:8 = RDX + 0x8:8
	RAX = ram[$U1:8]
	instruction(0x20794)
	CF = RDX carry 0x10:8
	OF = RDX scarry 0x10:8
	RDX = RDX + 0x10:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x20798)
	$U1:8 = 0x1d:8 + RSP
	$U2:1 = 0x1:1
	ram[$U1:8] = $U2:1
	instruction(0x2079d)
	$U1:8 = 0x40:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x207a2)
	RAX = ram[RDX]
	instruction(0x207a5)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x207a8)
	$U1:1 = !ZF
	if $U1:1 jump 0x20508:8

0x14b8c  JMP 0x14afa
<L0> (entry=0x14b8c):
	jump 0x14afa:8

0x1af48  MOV EDI,0xbc
0x1af4d  MOV dword ptr [RSP + 0x7c],R8D
0x1af52  CALL 0x19f10
<L0> (entry=0x1af48):
	instruction(0x1af48)
	RDI = 0xbc:8
	instruction(0x1af4d)
	$U1:8 = 0x7c:8 + RSP
	$U2:4 = R8D
	ram[$U1:8] = $U2:4
	instruction(0x1af52)
	$U1:8 = 0x1af57:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x19f10:8

0x1a20e  MOV EDX,R9D
0x1a211  XOR EAX,EAX
0x1a213  AND EDX,0x8100
0x1a219  CMP EDX,0x8100
0x1a21f  JZ 0x1a300
<L0> (entry=0x1a20e):
	instruction(0x1a20e)
	EDX = R9D
	RDX = zext(EDX)
	instruction(0x1a211)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a213)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX & 0x8100:4
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a219)
	CF = EDX < 0x8100:4
	OF = EDX sborrow 0x8100:4
	$U1:4 = EDX - 0x8100:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1a21f)
	if ZF jump 0x1a300:8

0x20440  ENDBR64
0x20444  PUSH R15
0x20446  MOV RAX,RDI
0x20449  PUSH R14
0x2044b  ADD RAX,0x8
0x2044f  PUSH R13
0x20451  PUSH R12
0x20453  PUSH RBP
0x20454  PUSH RBX
0x20455  MOV RBX,RSI
0x20458  SUB RSP,0x68
0x2045c  MOV RDX,qword ptr [RDI]
0x2045f  MOV qword ptr [0x3aa90],RDI
0x20466  MOV qword ptr [0x3aac0],RAX
0x2046d  MOV dword ptr [0x3aac8],EDX
0x20473  MOVSXD RDX,EDX
0x20476  LEA RDI,[RAX + RDX*0x8 + 0x8]
0x2047b  MOV qword ptr [0x3c2d0],RDI
0x20482  CMP qword ptr [RDI],0x0
0x20486  MOV RAX,RDI
0x20489  JZ 0x20495
<L0> (entry=0x20440):
	instruction(0x20440)
	instruction(0x20444)
	$U1:8 = R15
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x20446)
	RAX = RDI
	instruction(0x20449)
	$U1:8 = R14
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x2044b)
	CF = RAX carry 0x8:8
	OF = RAX scarry 0x8:8
	RAX = RAX + 0x8:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2044f)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x20451)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x20453)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x20454)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x20455)
	RBX = RSI
	instruction(0x20458)
	CF = RSP < 0x68:8
	OF = RSP sborrow 0x68:8
	RSP = RSP - 0x68:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2045c)
	RDX = ram[RDI]
	instruction(0x2045f)
	$U1:8 = RDI
	ram[0x3aa90:8] = $U1:8
	instruction(0x20466)
	$U1:8 = RAX
	ram[0x3aac0:8] = $U1:8
	instruction(0x2046d)
	$U1:4 = EDX
	ram[0x3aac8:8] = $U1:4
	instruction(0x20473)
	RDX = sext(EDX)
	instruction(0x20476)
	$U2:8 = 0x8:8 + RAX
	$U3:8 = RDX * 0x8:8
	$U1:8 = $U2:8 + $U3:8
	RDI = $U1:8
	instruction(0x2047b)
	$U1:8 = RDI
	ram[0x3c2d0:8] = $U1:8
	instruction(0x20482)
	$U5:8 = ram[RDI]
	CF = $U5:8 < 0x0:8
	$U6:8 = ram[RDI]
	OF = $U6:8 sborrow 0x0:8
	$U7:8 = ram[RDI]
	$U1:8 = $U7:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x20486)
	RAX = RDI
	instruction(0x20489)
	if ZF jump 0x20495:8

0x2397a  CMP qword ptr [R15 + 0x128],0x0
0x23982  JZ 0x2398f
<L0> (entry=0x2397a):
	instruction(0x2397a)
	$U5:8 = R15 + 0x128:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x0:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x0:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23982)
	if ZF jump 0x2398f:8

0x19928  MOV byte ptr [RSP + -0x2],0x1
0x1992d  MOV R8,RDX
0x19930  MOV EBP,0xffffffff
0x19935  MOV byte ptr [RSP + -0x3],0x0
0x1993a  MOV dword ptr [RSP + -0xc],0x2
0x19942  JMP 0x197d5
<L0> (entry=0x19928):
	instruction(0x19928)
	$U1:8 = 0xfffffffffffffffe:8 + RSP
	$U2:1 = 0x1:1
	ram[$U1:8] = $U2:1
	instruction(0x1992d)
	R8 = RDX
	instruction(0x19930)
	RBP = 0xffffffff:8
	instruction(0x19935)
	$U1:8 = 0xfffffffffffffffd:8 + RSP
	$U2:1 = 0x0:1
	ram[$U1:8] = $U2:1
	instruction(0x1993a)
	$U1:8 = 0xfffffffffffffff4:8 + RSP
	$U2:4 = 0x2:4
	ram[$U1:8] = $U2:4
	instruction(0x19942)
	jump 0x197d5:8

0x1e4ce  MOV RAX,qword ptr [RBP + -0x50]
0x1e4d2  AND RAX,qword ptr [0x3ab40]
0x1e4d9  MOV qword ptr [RBP + -0xa0],RAX
0x1e4e0  XOR EAX,EAX
0x1e4e2  CMP qword ptr [0x3aae8],0x0
0x1e4ea  SETNZ AL
0x1e4ed  XOR R12D,R12D
0x1e4f0  XOR R13D,R13D
0x1e4f3  MOV qword ptr [RBP + -0x78],RAX
0x1e4f7  CALL 0x1eff0
<L0> (entry=0x1e4ce):
	instruction(0x1e4ce)
	$U1:8 = RBP + 0xffffffffffffffb0:8
	RAX = ram[$U1:8]
	instruction(0x1e4d2)
	CF = 0x0:1
	OF = 0x0:1
	$U4:8 = ram[0x3ab40:8]
	RAX = RAX & $U4:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e4d9)
	$U1:8 = RBP + 0xffffffffffffff60:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1e4e0)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e4e2)
	$U5:8 = ram[0x3aae8:8]
	CF = $U5:8 < 0x0:8
	$U6:8 = ram[0x3aae8:8]
	OF = $U6:8 sborrow 0x0:8
	$U7:8 = ram[0x3aae8:8]
	$U1:8 = $U7:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e4ea)
	$U1:1 = !ZF
	AL = $U1:1
	instruction(0x1e4ed)
	CF = 0x0:1
	OF = 0x0:1
	R12D = R12D ^ R12D
	R12 = zext(R12D)
	SF = R12D s< 0x0:4
	ZF = R12D == 0x0:4
	$U1:4 = R12D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e4f0)
	CF = 0x0:1
	OF = 0x0:1
	R13D = R13D ^ R13D
	R13 = zext(R13D)
	SF = R13D s< 0x0:4
	ZF = R13D == 0x0:4
	$U1:4 = R13D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e4f3)
	$U1:8 = RBP + 0xffffffffffffff88:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1e4f7)
	$U1:8 = 0x1e4fc:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x1eff0:8

0x1e7bb  MOV RAX,RDI
0x1e7be  MOV RCX,RSP
0x1e7c1  MOV qword ptr [RBP + -0x78],RDI
0x1e7c5  ADD RAX,0x1
0x1e7c9  MOV qword ptr [RBP + -0x80],RAX
0x1e7cd  SHL RAX,0x4
0x1e7d1  MOV qword ptr [RBP + -0xb8],RAX
0x1e7d8  ADD RAX,0x10
0x1e7dc  MOV RSI,RAX
0x1e7df  AND RSI,-0x1000
0x1e7e6  SUB RCX,RSI
0x1e7e9  CMP RSP,RCX
0x1e7ec  JZ 0x1e803
<L0> (entry=0x1e7bb):
	instruction(0x1e7bb)
	RAX = RDI
	instruction(0x1e7be)
	RCX = RSP
	instruction(0x1e7c1)
	$U1:8 = RBP + 0xffffffffffffff88:8
	$U2:8 = RDI
	ram[$U1:8] = $U2:8
	instruction(0x1e7c5)
	CF = RAX carry 0x1:8
	OF = RAX scarry 0x1:8
	RAX = RAX + 0x1:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e7c9)
	$U1:8 = RBP + 0xffffffffffffff80:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1e7cd)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RAX
	RAX = RAX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RAX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RAX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RAX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RAX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1e7d1)
	$U1:8 = RBP + 0xffffffffffffff48:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1e7d8)
	CF = RAX carry 0x10:8
	OF = RAX scarry 0x10:8
	RAX = RAX + 0x10:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e7dc)
	RSI = RAX
	instruction(0x1e7df)
	CF = 0x0:1
	OF = 0x0:1
	RSI = RSI & 0xfffffffffffff000:8
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e7e6)
	CF = RCX < RSI
	OF = RCX sborrow RSI
	RCX = RCX - RSI
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e7e9)
	CF = RSP < RCX
	OF = RSP sborrow RCX
	$U1:8 = RSP - RCX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e7ec)
	if ZF jump 0x1e803:8

0x1e8bb  MOV qword ptr [RAX],RDX
0x1e8be  MOV RDX,qword ptr [0x3aaf0]
0x1e8c5  ADD RSI,0x1
0x1e8c9  MOV qword ptr [RAX + 0x8],RDX
0x1e8cd  MOV RAX,RSI
0x1e8d0  SHL RAX,0x4
0x1e8d4  ADD RAX,qword ptr [RBP + -0x58]
0x1e8d8  LEA RCX,[0x2f85c]
0x1e8df  MOV qword ptr [RAX + 0x8],0x3
0x1e8e7  MOV qword ptr [RAX],RCX
0x1e8ea  CMP RSI,qword ptr [RBP + -0x78]
0x1e8ee  JNZ 0x1ef85
<L0> (entry=0x1e8bb):
	instruction(0x1e8bb)
	$U1:8 = RDX
	ram[RAX] = $U1:8
	instruction(0x1e8be)
	RDX = ram[0x3aaf0:8]
	instruction(0x1e8c5)
	CF = RSI carry 0x1:8
	OF = RSI scarry 0x1:8
	RSI = RSI + 0x1:8
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e8c9)
	$U1:8 = RAX + 0x8:8
	$U2:8 = RDX
	ram[$U1:8] = $U2:8
	instruction(0x1e8cd)
	RAX = RSI
	instruction(0x1e8d0)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RAX
	RAX = RAX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RAX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RAX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RAX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RAX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1e8d4)
	$U4:8 = RBP + 0xffffffffffffffa8:8
	$U5:8 = ram[$U4:8]
	CF = RAX carry $U5:8
	$U6:8 = ram[$U4:8]
	OF = RAX scarry $U6:8
	$U7:8 = ram[$U4:8]
	RAX = RAX + $U7:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e8d8)
	RCX = 0x2f85c:8
	instruction(0x1e8df)
	$U1:8 = RAX + 0x8:8
	$U2:8 = 0x3:8
	ram[$U1:8] = $U2:8
	instruction(0x1e8e7)
	$U1:8 = RCX
	ram[RAX] = $U1:8
	instruction(0x1e8ea)
	$U5:8 = RBP + 0xffffffffffffff88:8
	$U6:8 = ram[$U5:8]
	CF = RSI < $U6:8
	$U7:8 = ram[$U5:8]
	OF = RSI sborrow $U7:8
	$U8:8 = ram[$U5:8]
	$U1:8 = RSI - $U8:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e8ee)
	$U1:1 = !ZF
	if $U1:1 jump 0x1ef85:8

0x26a80  ENDBR64
0x26a84  MOV EAX,0xc
0x26a89  SYSCALL
<L0> (entry=0x26a80):
	instruction(0x26a80)
	instruction(0x26a84)
	RAX = 0xc:8
	instruction(0x26a89)
	RCX = 0x26a8b:8
	$U1:1 = NT & 0x1:1
	$U2:8 = zext($U1:1)
	$U3:8 = 0x4000:8 * $U2:8
	$U4:1 = OF & 0x1:1
	$U5:8 = zext($U4:1)
	$U6:8 = 0x800:8 * $U5:8
	$U7:8 = $U3:8 | $U6:8
	$U8:1 = DF & 0x1:1
	$U9:8 = zext($U8:1)
	$U10:8 = 0x400:8 * $U9:8
	$U11:8 = $U7:8 | $U10:8
	$U12:1 = IF & 0x1:1
	$U13:8 = zext($U12:1)
	$U14:8 = 0x200:8 * $U13:8
	$U15:8 = $U11:8 | $U14:8
	$U16:1 = TF & 0x1:1
	$U17:8 = zext($U16:1)
	$U18:8 = 0x100:8 * $U17:8
	$U19:8 = $U15:8 | $U18:8
	$U20:1 = SF & 0x1:1
	$U21:8 = zext($U20:1)
	$U22:8 = 0x80:8 * $U21:8
	$U23:8 = $U19:8 | $U22:8
	$U24:1 = ZF & 0x1:1
	$U25:8 = zext($U24:1)
	$U26:8 = 0x40:8 * $U25:8
	$U27:8 = $U23:8 | $U26:8
	$U28:1 = AF & 0x1:1
	$U29:8 = zext($U28:1)
	$U30:8 = 0x10:8 * $U29:8
	$U31:8 = $U27:8 | $U30:8
	$U32:1 = PF & 0x1:1
	$U33:8 = zext($U32:1)
	$U34:8 = 0x4:8 * $U33:8
	$U35:8 = $U31:8 | $U34:8
	$U36:1 = CF & 0x1:1
	$U37:8 = zext($U36:1)
	$U38:8 = 0x1:8 * $U37:8
	R11 = $U35:8 | $U38:8
	NEXT_PC = 0x26a8b:8
	exception(0x101:4, 0x0:4)

0x1e840  BT RBX,R12
0x1e844  JNC 0x1e89f
<L0> (entry=0x1e840):
	instruction(0x1e840)
	$U1:8 = R12 & 0x3f:8
	$U2:8 = RBX >> $U1:8
	$U3:8 = $U2:8 & 0x1:8
	CF = $U3:8 != 0x0:8
	instruction(0x1e844)
	$U1:1 = !CF
	if $U1:1 jump 0x1e89f:8

0x27e73  RET
<L0> (entry=0x27e73):
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x98f1  MOV RAX,qword ptr [RBX + 0x128]
0x98f8  TEST RAX,RAX
0x98fb  JZ 0x99ad
<L0> (entry=0x98f1):
	instruction(0x98f1)
	$U1:8 = RBX + 0x128:8
	RAX = ram[$U1:8]
	instruction(0x98f8)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x98fb)
	if ZF jump 0x99ad:8

0xbae6  MOV RAX,qword ptr [RCX + 0x330]
0xbaed  LEA R11,[RCX + 0x330]
0xbaf4  CMP RAX,-0x1
0xbaf8  JZ 0xbe21
<L0> (entry=0xbae6):
	instruction(0xbae6)
	$U1:8 = RCX + 0x330:8
	RAX = ram[$U1:8]
	instruction(0xbaed)
	$U1:8 = RCX + 0x330:8
	R11 = $U1:8
	instruction(0xbaf4)
	CF = RAX < 0xffffffffffffffff:8
	OF = RAX sborrow 0xffffffffffffffff:8
	$U1:8 = RAX - 0xffffffffffffffff:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xbaf8)
	if ZF jump 0xbe21:8

0x829c  MOV R8D,EAX
0x829f  MOV EAX,0x1
0x82a4  TEST R8D,R8D
0x82a7  JNZ 0x82db
<L0> (entry=0x829c):
	instruction(0x829c)
	R8D = EAX
	R8 = zext(R8D)
	instruction(0x829f)
	RAX = 0x1:8
	instruction(0x82a4)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = R8D & R8D
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x82a7)
	$U1:1 = !ZF
	if $U1:1 jump 0x82db:8

0xa523  MOV EDI,dword ptr [RBP + -0xd8]
0xa529  MOV RCX,R12
0xa52c  XOR EDX,EDX
0xa52e  MOV RSI,qword ptr [RBP + -0xf8]
0xa535  CALL 0x3070
<L0> (entry=0xa523):
	instruction(0xa523)
	$U1:8 = RBP + 0xffffffffffffff28:8
	EDI = ram[$U1:8]
	RDI = zext(EDI)
	instruction(0xa529)
	RCX = R12
	instruction(0xa52c)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX ^ EDX
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xa52e)
	$U1:8 = RBP + 0xffffffffffffff08:8
	RSI = ram[$U1:8]
	instruction(0xa535)
	$U1:8 = 0xa53a:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x3070:8

0x4387  TEST RDI,RDI
0x438a  CMOVZ RDI,qword ptr [0x3c138]
0x4392  LEA RAX,[0x4300]
0x4399  MOV qword ptr [R8 + 0x28],0x0
0x43a1  MOV qword ptr [R8 + 0x10],RAX
0x43a5  MOV qword ptr [R8 + 0x20],RDI
0x43a9  CMP qword ptr [R8 + 0x8],0x0
0x43ae  JZ 0x4440
<L0> (entry=0x4387):
	instruction(0x4387)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RDI & RDI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x438a)
	$U1:8 = ram[0x3c138:8]
	$U2:1 = !ZF
	if $U2:1 jump <L670>
<L1>:
	RDI = $U1:8
<L2>:
	instruction(0x4392)
	RAX = 0x4300:8
	instruction(0x4399)
	$U1:8 = R8 + 0x28:8
	$U2:8 = 0x0:8
	ram[$U1:8] = $U2:8
	instruction(0x43a1)
	$U1:8 = R8 + 0x10:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x43a5)
	$U1:8 = R8 + 0x20:8
	$U2:8 = RDI
	ram[$U1:8] = $U2:8
	instruction(0x43a9)
	$U5:8 = R8 + 0x8:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x0:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x0:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x43ae)
	if ZF jump 0x4440:8

0x149cd  MOV R9D,ESI
0x149d0  MOV EAX,ECX
0x149d2  MOV RBX,RSP
0x149d5  SHL R9,0x3
0x149d9  SUB ESI,0x1
0x149dc  MOVSXD RCX,ESI
0x149df  JS 0x14b02
<L0> (entry=0x149cd):
	instruction(0x149cd)
	R9D = ESI
	R9 = zext(R9D)
	instruction(0x149d0)
	EAX = ECX
	RAX = zext(EAX)
	instruction(0x149d2)
	RBX = RSP
	instruction(0x149d5)
	$U1:8 = 0x3:8 & 0x3f:8
	$U2:8 = R9
	R9 = R9 << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = R9 s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = R9 s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = R9 == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = R9 & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x149d9)
	CF = ESI < 0x1:4
	OF = ESI sborrow 0x1:4
	ESI = ESI - 0x1:4
	RSI = zext(ESI)
	SF = ESI s< 0x0:4
	ZF = ESI == 0x0:4
	$U1:4 = ESI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x149dc)
	RCX = sext(ESI)
	instruction(0x149df)
	if SF jump 0x14b02:8

0x109a4  MOV EDX,EAX
0x109a6  ADD EAX,0x8
0x109a9  ADD RDX,qword ptr [RDI + 0x10]
0x109ad  MOV dword ptr [RDI],EAX
0x109af  MOV RDI,qword ptr [RDX]
0x109b2  MOVSXD RDX,R12D
0x109b5  MOV dword ptr [RBP + -0x460],R9D
0x109bc  SHL RDX,0x4
0x109c0  MOV dword ptr [RBP + -0x45c],ECX
0x109c6  MOV qword ptr [RBP + RDX*0x1 + -0x430],RDI
0x109ce  MOV qword ptr [RBP + -0x458],RDX
0x109d5  CALL 0x2ba40
<L0> (entry=0x109a4):
	instruction(0x109a4)
	EDX = EAX
	RDX = zext(EDX)
	instruction(0x109a6)
	CF = EAX carry 0x8:4
	OF = EAX scarry 0x8:4
	EAX = EAX + 0x8:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x109a9)
	$U4:8 = RDI + 0x10:8
	$U5:8 = ram[$U4:8]
	CF = RDX carry $U5:8
	$U6:8 = ram[$U4:8]
	OF = RDX scarry $U6:8
	$U7:8 = ram[$U4:8]
	RDX = RDX + $U7:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x109ad)
	$U1:4 = EAX
	ram[RDI] = $U1:4
	instruction(0x109af)
	RDI = ram[RDX]
	instruction(0x109b2)
	RDX = sext(R12D)
	instruction(0x109b5)
	$U1:8 = RBP + 0xfffffffffffffba0:8
	$U2:4 = R9D
	ram[$U1:8] = $U2:4
	instruction(0x109bc)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RDX
	RDX = RDX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RDX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RDX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RDX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RDX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x109c0)
	$U1:8 = RBP + 0xfffffffffffffba4:8
	$U2:4 = ECX
	ram[$U1:8] = $U2:4
	instruction(0x109c6)
	$U2:8 = 0xfffffffffffffbd0:8 + RBP
	$U3:8 = RDX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	$U4:8 = RDI
	ram[$U1:8] = $U4:8
	instruction(0x109ce)
	$U1:8 = RBP + 0xfffffffffffffba8:8
	$U2:8 = RDX
	ram[$U1:8] = $U2:8
	instruction(0x109d5)
	$U1:8 = 0x109da:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2ba40:8

0x18da2  MOV dword ptr [RSI],EAX
0x18da4  LEA RAX,[RDI*0x8]
0x18dac  SUB RAX,RDI
0x18daf  SHL RAX,0x4
0x18db3  CMP byte ptr [RCX + RAX*0x1 + 0x50],0x0
0x18db8  JZ 0x18dd0
<L0> (entry=0x18da2):
	instruction(0x18da2)
	$U1:4 = EAX
	ram[RSI] = $U1:4
	instruction(0x18da4)
	$U1:8 = RDI * 0x8:8
	RAX = $U1:8
	instruction(0x18dac)
	CF = RAX < RDI
	OF = RAX sborrow RDI
	RAX = RAX - RDI
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x18daf)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RAX
	RAX = RAX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RAX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RAX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RAX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RAX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x18db3)
	$U6:8 = 0x50:8 + RCX
	$U7:8 = RAX * 0x1:8
	$U5:8 = $U6:8 + $U7:8
	$U8:1 = ram[$U5:8]
	CF = $U8:1 < 0x0:1
	$U9:1 = ram[$U5:8]
	OF = $U9:1 sborrow 0x0:1
	$U10:1 = ram[$U5:8]
	$U1:1 = $U10:1 - 0x0:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x18db8)
	if ZF jump 0x18dd0:8

0x223b9  XOR EAX,EAX
0x223bb  TEST R15,R15
0x223be  JZ 0x223ec
<L0> (entry=0x223b9):
	instruction(0x223b9)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x223bb)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R15 & R15
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x223be)
	if ZF jump 0x223ec:8

0x26aea  ADD RSP,0x8
0x26aee  MOV RAX,R12
0x26af1  POP RBX
0x26af2  POP R12
0x26af4  RET
<L0> (entry=0x26aea):
	instruction(0x26aea)
	CF = RSP carry 0x8:8
	OF = RSP scarry 0x8:8
	RSP = RSP + 0x8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x26aee)
	RAX = R12
	instruction(0x26af1)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0x26af2)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R12 = $U1:8
	instruction(0x26af4)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x8108  MOV R8D,EAX
0x810b  MOV EAX,dword ptr [R12 + RBX*0x4 + 0x24]
0x8110  TEST EAX,EAX
0x8112  JNZ 0x8218
<L0> (entry=0x8108):
	instruction(0x8108)
	R8D = EAX
	R8 = zext(R8D)
	instruction(0x810b)
	$U2:8 = 0x24:8 + R12
	$U3:8 = RBX * 0x4:8
	$U1:8 = $U2:8 + $U3:8
	EAX = ram[$U1:8]
	RAX = zext(EAX)
	instruction(0x8110)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x8112)
	$U1:1 = !ZF
	if $U1:1 jump 0x8218:8

0x1a530  PUSH R15
0x1a532  XOR EAX,EAX
0x1a534  PUSH R14
0x1a536  PUSH R13
0x1a538  PUSH R12
0x1a53a  PUSH RBP
0x1a53b  PUSH RBX
0x1a53c  SUB RSP,0xd8
0x1a543  MOV dword ptr [RSP + 0x88],0x0
0x1a54e  MOV dword ptr [RSP + 0x8c],0x0
0x1a559  MOV dword ptr [RSP + 0x90],0x0
0x1a564  CPUID
0x1a566  MOV dword ptr [0x3ab54],EAX
0x1a56c  CMP EBX,0x756e6547
0x1a572  JNZ 0x1a6e0
<L0> (entry=0x1a530):
	instruction(0x1a530)
	$U1:8 = R15
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1a532)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a534)
	$U1:8 = R14
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1a536)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1a538)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1a53a)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1a53b)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1a53c)
	CF = RSP < 0xd8:8
	OF = RSP sborrow 0xd8:8
	RSP = RSP - 0xd8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a543)
	$U1:8 = 0x88:8 + RSP
	$U2:4 = 0x0:4
	ram[$U1:8] = $U2:4
	instruction(0x1a54e)
	$U1:8 = 0x8c:8 + RSP
	$U2:4 = 0x0:4
	ram[$U1:8] = $U2:4
	instruction(0x1a559)
	$U1:8 = 0x90:8 + RSP
	$U2:4 = 0x0:4
	ram[$U1:8] = $U2:4
	instruction(0x1a564)
	$U2:1 = EAX == 0x0:4
	if $U2:1 jump <L136>
<L1>:
	$U3:1 = EAX == 0x1:4
	if $U3:1 jump <L137>
<L2>:
	$U4:1 = EAX == 0x2:4
	if $U4:1 jump <L138>
<L3>:
	$U5:1 = EAX == 0x3:4
	if $U5:1 jump <L139>
<L4>:
	$U6:1 = EAX == 0x4:4
	if $U6:1 jump <L140>
<L5>:
	$U7:1 = EAX == 0x5:4
	if $U7:1 jump <L141>
<L6>:
	$U8:1 = EAX == 0x6:4
	if $U8:1 jump <L142>
<L7>:
	$U9:1 = EAX == 0x7:4
	if $U9:1 jump <L143>
<L8>:
	$U10:1 = EAX == 0x9:4
	if $U10:1 jump <L144>
<L9>:
	$U11:1 = EAX == 0xa:4
	if $U11:1 jump <L145>
<L10>:
	$U12:1 = EAX == 0xb:4
	if $U12:1 jump <L146>
<L11>:
	$U13:1 = EAX == 0xd:4
	if $U13:1 jump <L147>
<L12>:
	$U14:1 = EAX == 0xf:4
	if $U14:1 jump <L148>
<L13>:
	$U15:1 = EAX == 0x80000002:4
	if $U15:1 jump <L149>
<L14>:
	$U16:1 = EAX == 0x80000003:4
	if $U16:1 jump <L150>
<L15>:
	$U17:1 = EAX == 0x80000004:4
	if $U17:1 jump <L151>
<L16>:
	$tmp0 = cpuid(EAX, ECX)
	jump <L152>
<L17>:
	$tmp0 = cpuid_basic_info(EAX, ECX)
	jump <L152>
<L18>:
	$tmp0 = cpuid_Version_info(EAX, ECX)
	jump <L152>
<L19>:
	$tmp0 = cpuid_cache_tlb_info(EAX, ECX)
	jump <L152>
<L20>:
	$tmp0 = cpuid_serial_info(EAX, ECX)
	jump <L152>
<L21>:
	$tmp0 = cpuid_Deterministic_Cache_Parameters_info(EAX, ECX)
	jump <L152>
<L22>:
	$tmp0 = cpuid_MONITOR_MWAIT_Features_info(EAX, ECX)
	jump <L152>
<L23>:
	$tmp0 = cpuid_Thermal_Power_Management_info(EAX, ECX)
	jump <L152>
<L24>:
	$tmp0 = cpuid_Extended_Feature_Enumeration_info(EAX, ECX)
	jump <L152>
<L25>:
	$tmp0 = cpuid_Direct_Cache_Access_info(EAX, ECX)
	jump <L152>
<L26>:
	$tmp0 = cpuid_Architectural_Performance_Monitoring_info(EAX, ECX)
	jump <L152>
<L27>:
	$tmp0 = cpuid_Extended_Topology_info(EAX, ECX)
	jump <L152>
<L28>:
	$tmp0 = cpuid_Processor_Extended_States_info(EAX, ECX)
	jump <L152>
<L29>:
	$tmp0 = cpuid_Quality_of_Service_info(EAX, ECX)
	jump <L152>
<L30>:
	$tmp0 = cpuid_brand_part1_info(EAX, ECX)
	jump <L152>
<L31>:
	$tmp0 = cpuid_brand_part2_info(EAX, ECX)
	jump <L152>
<L32>:
	$tmp0 = cpuid_brand_part3_info(EAX, ECX)
<L33>:
	RAX = zext($tmp0:4)
	RBX = zext($tmp0[4]:4)
	RDX = zext($tmp0[8]:4)
	RCX = zext($tmp0[12]:4)
	instruction(0x1a566)
	$U1:4 = EAX
	ram[0x3ab54:8] = $U1:4
	instruction(0x1a56c)
	CF = EBX < 0x756e6547:4
	OF = EBX sborrow 0x756e6547:4
	$U1:4 = EBX - 0x756e6547:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1a572)
	$U1:1 = !ZF
	if $U1:1 jump 0x1a6e0:8

0xec3d  ADD RSP,0x38
0xec41  MOV RAX,R14
0xec44  POP RBX
0xec45  POP RBP
0xec46  POP R12
0xec48  POP R13
0xec4a  POP R14
0xec4c  POP R15
0xec4e  RET
<L0> (entry=0xec3d):
	instruction(0xec3d)
	CF = RSP carry 0x38:8
	OF = RSP scarry 0x38:8
	RSP = RSP + 0x38:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xec41)
	RAX = R14
	instruction(0xec44)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0xec45)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBP = $U1:8
	instruction(0xec46)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R12 = $U1:8
	instruction(0xec48)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R13 = $U1:8
	instruction(0xec4a)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R14 = $U1:8
	instruction(0xec4c)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R15 = $U1:8
	instruction(0xec4e)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x1eb92  MOV byte ptr [RAX],0x2f
0x1eb95  LEA RDI,[RAX + 0x1]
0x1eb99  SUB RBX,0x1
0x1eb9d  JNZ 0x1eb72
<L0> (entry=0x1eb92):
	instruction(0x1eb92)
	$U1:1 = 0x2f:1
	ram[RAX] = $U1:1
	instruction(0x1eb95)
	$U1:8 = RAX + 0x1:8
	RDI = $U1:8
	instruction(0x1eb99)
	CF = RBX < 0x1:8
	OF = RBX sborrow 0x1:8
	RBX = RBX - 0x1:8
	SF = RBX s< 0x0:8
	ZF = RBX == 0x0:8
	$U1:8 = RBX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1eb9d)
	$U1:1 = !ZF
	if $U1:1 jump 0x1eb72:8

0x79d3  CMP RAX,0x3f
0x79d7  JLE 0x7db8
<L0> (entry=0x79d3):
	instruction(0x79d3)
	CF = RAX < 0x3f:8
	OF = RAX sborrow 0x3f:8
	$U1:8 = RAX - 0x3f:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x79d7)
	$U2:1 = OF != SF
	$U1:1 = ZF || $U2:1
	if $U1:1 jump 0x7db8:8

0x207e7  XOR EDI,EDI
0x207e9  CALL 0x26a80
<L0> (entry=0x207e7):
	instruction(0x207e7)
	CF = 0x0:1
	OF = 0x0:1
	EDI = EDI ^ EDI
	RDI = zext(EDI)
	SF = EDI s< 0x0:4
	ZF = EDI == 0x0:4
	$U1:4 = EDI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x207e9)
	$U1:8 = 0x207ee:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x26a80:8

0x1a815  TEST AH,0x80
0x1a818  JZ 0x1a824
<L0> (entry=0x1a815):
	instruction(0x1a815)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = AH & 0x80:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1a818)
	if ZF jump 0x1a824:8

0x223f8  TEST R13D,0xfffffff8
0x223ff  JZ 0x22380
<L0> (entry=0x223f8):
	instruction(0x223f8)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = R13D & 0xfffffff8:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x223ff)
	if ZF jump 0x22380:8

0x1e333  ENDBR64
0x1e337  MOV R12D,EAX
0x1e33a  TEST EAX,EAX
0x1e33c  JNZ 0x1e3b0
<L0> (entry=0x1e333):
	instruction(0x1e333)
	instruction(0x1e337)
	R12D = EAX
	R12 = zext(R12D)
	instruction(0x1e33a)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e33c)
	$U1:1 = !ZF
	if $U1:1 jump 0x1e3b0:8

0xb722  TEST byte ptr [0x3aae0],0x1
0xb729  JNZ 0xbc21
<L0> (entry=0xb722):
	instruction(0xb722)
	CF = 0x0:1
	OF = 0x0:1
	$U5:1 = ram[0x3aae0:8]
	$U1:1 = $U5:1 & 0x1:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb729)
	$U1:1 = !ZF
	if $U1:1 jump 0xbc21:8

0x20580  MOV EAX,dword ptr [RSP + 0x38]
0x20584  MOV dword ptr [0x3ab20],EAX
0x2058a  TEST R13B,R13B
0x2058d  JZ 0x2059b
<L0> (entry=0x20580):
	instruction(0x20580)
	$U1:8 = 0x38:8 + RSP
	EAX = ram[$U1:8]
	RAX = zext(EAX)
	instruction(0x20584)
	$U1:4 = EAX
	ram[0x3ab20:8] = $U1:4
	instruction(0x2058a)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = R13B & R13B
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2058d)
	if ZF jump 0x2059b:8

0xed78  MOV EDX,dword ptr [RSP + 0x10]
0xed7c  TEST EDX,EDX
0xed7e  JNZ 0xedb8
<L0> (entry=0xed78):
	instruction(0xed78)
	$U1:8 = 0x10:8 + RSP
	EDX = ram[$U1:8]
	RDX = zext(EDX)
	instruction(0xed7c)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EDX & EDX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xed7e)
	$U1:1 = !ZF
	if $U1:1 jump 0xedb8:8

0x238e8  MOV RAX,qword ptr [R15 + 0x88]
0x238ef  CMP qword ptr [RAX + 0x8],0x18
0x238f4  JNZ 0x26787
<L0> (entry=0x238e8):
	instruction(0x238e8)
	$U1:8 = R15 + 0x88:8
	RAX = ram[$U1:8]
	instruction(0x238ef)
	$U5:8 = RAX + 0x8:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x18:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x18:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x18:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x238f4)
	$U1:1 = !ZF
	if $U1:1 jump 0x26787:8

0x220c9  MOV qword ptr [RCX + RAX*0x8],RDX
0x220cd  MOV RAX,qword ptr [RDX + 0x10]
0x220d1  ADD RDX,0x10
0x220d5  TEST RAX,RAX
0x220d8  JZ 0x22128
<L0> (entry=0x220c9):
	instruction(0x220c9)
	$U2:8 = RAX * 0x8:8
	$U1:8 = RCX + $U2:8
	$U3:8 = RDX
	ram[$U1:8] = $U3:8
	instruction(0x220cd)
	$U1:8 = RDX + 0x10:8
	RAX = ram[$U1:8]
	instruction(0x220d1)
	CF = RDX carry 0x10:8
	OF = RDX scarry 0x10:8
	RDX = RDX + 0x10:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x220d5)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x220d8)
	if ZF jump 0x22128:8

0x2bff3  MOVZX ESI,word ptr [RSI + RDX*0x1 + -0x2]
0x2bff8  MOV word ptr [RDI + RDX*0x1 + -0x2],SI
0x2bffd  MOV byte ptr [RDI],CL
0x2bfff  RET
<L0> (entry=0x2bff3):
	instruction(0x2bff3)
	$U2:8 = 0xfffffffffffffffe:8 + RSI
	$U3:8 = RDX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	$U4:2 = ram[$U1:8]
	ESI = zext($U4:2)
	RSI = zext(ESI)
	instruction(0x2bff8)
	$U2:8 = 0xfffffffffffffffe:8 + RDI
	$U3:8 = RDX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	$U4:2 = SI
	ram[$U1:8] = $U4:2
	instruction(0x2bffd)
	$U1:1 = CL
	ram[RDI] = $U1:1
	instruction(0x2bfff)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x234e4  LEA R11,[RCX + 0x8]
0x234e8  MOV ESI,EBX
0x234ea  LEA R14,[R11 + RSI*0x1]
0x234ee  CMP R13,R14
0x234f1  JC 0x233af
<L0> (entry=0x234e4):
	instruction(0x234e4)
	$U1:8 = RCX + 0x8:8
	R11 = $U1:8
	instruction(0x234e8)
	ESI = EBX
	RSI = zext(ESI)
	instruction(0x234ea)
	$U2:8 = RSI * 0x1:8
	$U1:8 = R11 + $U2:8
	R14 = $U1:8
	instruction(0x234ee)
	CF = R13 < R14
	OF = R13 sborrow R14
	$U1:8 = R13 - R14
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x234f1)
	if CF jump 0x233af:8

0x1e58a  MOV RDI,R14
0x1e58d  CALL 0x1f220
<L0> (entry=0x1e58a):
	instruction(0x1e58a)
	RDI = R14
	instruction(0x1e58d)
	$U1:8 = 0x1e592:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x1f220:8

0x1c1d4  ADD RSP,0x8
0x1c1d8  POP RBX
0x1c1d9  POP RBP
0x1c1da  POP R12
0x1c1dc  POP R13
0x1c1de  RET
<L0> (entry=0x1c1d4):
	instruction(0x1c1d4)
	CF = RSP carry 0x8:8
	OF = RSP scarry 0x8:8
	RSP = RSP + 0x8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1c1d8)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0x1c1d9)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBP = $U1:8
	instruction(0x1c1da)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R12 = $U1:8
	instruction(0x1c1dc)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R13 = $U1:8
	instruction(0x1c1de)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0xe640  MOV RSI,RSP
0xe643  MOV EDI,EAX
0xe645  MOV EBP,EAX
0xe647  CALL 0x27880
<L0> (entry=0xe640):
	instruction(0xe640)
	RSI = RSP
	instruction(0xe643)
	EDI = EAX
	RDI = zext(EDI)
	instruction(0xe645)
	EBP = EAX
	RBP = zext(EBP)
	instruction(0xe647)
	$U1:8 = 0xe64c:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x27880:8

0x241e0  MOV RCX,RDX
0x241e3  SUB RAX,0x1
0x241e7  SUB RDX,0x38
0x241eb  CMP dword ptr [RCX],0x6474e552
0x241f1  JZ 0x246f0
<L0> (entry=0x241e0):
	instruction(0x241e0)
	RCX = RDX
	instruction(0x241e3)
	CF = RAX < 0x1:8
	OF = RAX sborrow 0x1:8
	RAX = RAX - 0x1:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x241e7)
	CF = RDX < 0x38:8
	OF = RDX sborrow 0x38:8
	RDX = RDX - 0x38:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x241eb)
	$U5:4 = ram[RCX]
	CF = $U5:4 < 0x6474e552:4
	$U6:4 = ram[RCX]
	OF = $U6:4 sborrow 0x6474e552:4
	$U7:4 = ram[RCX]
	$U1:4 = $U7:4 - 0x6474e552:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x241f1)
	if ZF jump 0x246f0:8

0x1ac7d  MOV RSI,R14
0x1ac80  LEA RDX,[0x20340]
0x1ac87  MOV EDI,0x17
0x1ac8c  CALL 0x18d70
<L0> (entry=0x1ac7d):
	instruction(0x1ac7d)
	RSI = R14
	instruction(0x1ac80)
	RDX = 0x20340:8
	instruction(0x1ac87)
	RDI = 0x17:8
	instruction(0x1ac8c)
	$U1:8 = 0x1ac91:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x18d70:8

0x7a84  CMP word ptr [R13 + 0x1a],0x3e
0x7a8a  JNZ 0x7e38
<L0> (entry=0x7a84):
	instruction(0x7a84)
	$U5:8 = R13 + 0x1a:8
	$U6:2 = ram[$U5:8]
	CF = $U6:2 < 0x3e:2
	$U7:2 = ram[$U5:8]
	OF = $U7:2 sborrow 0x3e:2
	$U8:2 = ram[$U5:8]
	$U1:2 = $U8:2 - 0x3e:2
	SF = $U1:2 s< 0x0:2
	ZF = $U1:2 == 0x0:2
	$U2:2 = $U1:2 & 0xff:2
	$U3:1 = count_ones($U2:2)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7a8a)
	$U1:1 = !ZF
	if $U1:1 jump 0x7e38:8

0x1aa89  MOV RAX,qword ptr [RSP + 0x38]
0x1aa8e  MOV RCX,R14
0x1aa91  MOV RDX,R15
0x1aa94  MOV R12,qword ptr [RSP + 0xb0]
0x1aa9c  MOVQ XMM1, qword ptr [RSP]
0x1aaa1  MOV RSI,RBP
0x1aaa4  MOV EDI,0x1c
0x1aaa9  MOV qword ptr [RSP + 0xa0],RAX
0x1aab1  MOVQ XMM5, R12
0x1aab6  MOV qword ptr [RSP + 0xb0],-0x1
0x1aac2  MOV qword ptr [RSP + 0xa8],0x0
0x1aace  PUNPCKLQDQ XMM1, XMM5
0x1aad2  MOVAPS xmmword ptr [RSP], XMM1
0x1aad6  CALL 0x18820
<L0> (entry=0x1aa89):
	instruction(0x1aa89)
	$U1:8 = 0x38:8 + RSP
	RAX = ram[$U1:8]
	instruction(0x1aa8e)
	RCX = R14
	instruction(0x1aa91)
	RDX = R15
	instruction(0x1aa94)
	$U1:8 = 0xb0:8 + RSP
	R12 = ram[$U1:8]
	instruction(0x1aa9c)
	$U1:8 = ram[RSP]
	XMM1 = zext($U1:8)
	instruction(0x1aaa1)
	RSI = RBP
	instruction(0x1aaa4)
	RDI = 0x1c:8
	instruction(0x1aaa9)
	$U1:8 = 0xa0:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1aab1)
	XMM5 = zext(R12)
	instruction(0x1aab6)
	$U1:8 = 0xb0:8 + RSP
	$U2:8 = 0xffffffffffffffff:8
	ram[$U1:8] = $U2:8
	instruction(0x1aac2)
	$U1:8 = 0xa8:8 + RSP
	$U2:8 = 0x0:8
	ram[$U1:8] = $U2:8
	instruction(0x1aace)
	XMM1_Qb = XMM5_Qa
	instruction(0x1aad2)
	$U1:16 = XMM1
	ram[RSP] = $U1:16
	instruction(0x1aad6)
	$U1:8 = 0x1aadb:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x18820:8

0x106ac  CMP AL,0x5a
0x106ae  JNZ 0x106f9
<L0> (entry=0x106ac):
	instruction(0x106ac)
	CF = AL < 0x5a:1
	OF = AL sborrow 0x5a:1
	$U1:1 = AL - 0x5a:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x106ae)
	$U1:1 = !ZF
	if $U1:1 jump 0x106f9:8

0x2431f  XOR R12D,R12D
0x24322  CMP qword ptr [RBP + -0x58],0x0
0x24327  JNZ 0x25a9a
<L0> (entry=0x2431f):
	instruction(0x2431f)
	CF = 0x0:1
	OF = 0x0:1
	R12D = R12D ^ R12D
	R12 = zext(R12D)
	SF = R12D s< 0x0:4
	ZF = R12D == 0x0:4
	$U1:4 = R12D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x24322)
	$U5:8 = RBP + 0xffffffffffffffa8:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x0:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x0:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x24327)
	$U1:1 = !ZF
	if $U1:1 jump 0x25a9a:8

0x236c8  AND R9D,0xfffffffb
0x236cc  MOV byte ptr [R15 + 0x31e],R9B
0x236d3  ADD RCX,qword ptr [RAX + 0x28]
0x236d7  ADD RCX,RDI
0x236da  CMP RCX,qword ptr [R15 + 0x360]
0x236e1  JBE 0x236ea
<L0> (entry=0x236c8):
	instruction(0x236c8)
	CF = 0x0:1
	OF = 0x0:1
	R9D = R9D & 0xfffffffb:4
	R9 = zext(R9D)
	SF = R9D s< 0x0:4
	ZF = R9D == 0x0:4
	$U1:4 = R9D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x236cc)
	$U1:8 = R15 + 0x31e:8
	$U2:1 = R9B
	ram[$U1:8] = $U2:1
	instruction(0x236d3)
	$U4:8 = RAX + 0x28:8
	$U5:8 = ram[$U4:8]
	CF = RCX carry $U5:8
	$U6:8 = ram[$U4:8]
	OF = RCX scarry $U6:8
	$U7:8 = ram[$U4:8]
	RCX = RCX + $U7:8
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x236d7)
	CF = RCX carry RDI
	OF = RCX scarry RDI
	RCX = RCX + RDI
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x236da)
	$U5:8 = R15 + 0x360:8
	$U6:8 = ram[$U5:8]
	CF = RCX < $U6:8
	$U7:8 = ram[$U5:8]
	OF = RCX sborrow $U7:8
	$U8:8 = ram[$U5:8]
	$U1:8 = RCX - $U8:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x236e1)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x236ea:8

0x207ee  CALL 0x1b7b0
<L0> (entry=0x207ee):
	$U1:8 = 0x207f3:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x1b7b0:8

0x1e814  LEA RBX,[RSP + 0xf]
0x1e819  XOR ESI,ESI
0x1e81b  LEA R15,[0x3aae0]
0x1e822  MOV R13D,0x1
0x1e828  AND RBX,-0x10
0x1e82c  MOV qword ptr [RBP + -0x58],RBX
0x1e830  MOV RDX,RBX
0x1e833  MOV RBX,qword ptr [RBP + -0xa0]
0x1e83a  NOP word ptr [RAX + RAX*0x1]
0x1e840  BT RBX,R12
0x1e844  JNC 0x1e89f
<L0> (entry=0x1e814):
	instruction(0x1e814)
	$U1:8 = 0xf:8 + RSP
	RBX = $U1:8
	instruction(0x1e819)
	CF = 0x0:1
	OF = 0x0:1
	ESI = ESI ^ ESI
	RSI = zext(ESI)
	SF = ESI s< 0x0:4
	ZF = ESI == 0x0:4
	$U1:4 = ESI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e81b)
	R15 = 0x3aae0:8
	instruction(0x1e822)
	R13 = 0x1:8
	instruction(0x1e828)
	CF = 0x0:1
	OF = 0x0:1
	RBX = RBX & 0xfffffffffffffff0:8
	SF = RBX s< 0x0:8
	ZF = RBX == 0x0:8
	$U1:8 = RBX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e82c)
	$U1:8 = RBP + 0xffffffffffffffa8:8
	$U2:8 = RBX
	ram[$U1:8] = $U2:8
	instruction(0x1e830)
	RDX = RBX
	instruction(0x1e833)
	$U1:8 = RBP + 0xffffffffffffff60:8
	RBX = ram[$U1:8]
	instruction(0x1e83a)
	$U2:8 = RAX * 0x1:8
	$U1:8 = RAX + $U2:8
	instruction(0x1e840)
	$U1:8 = R12 & 0x3f:8
	$U2:8 = RBX >> $U1:8
	$U3:8 = $U2:8 & 0x1:8
	CF = $U3:8 != 0x0:8
	instruction(0x1e844)
	$U1:1 = !CF
	if $U1:1 jump 0x1e89f:8

0xe62e  ADD RSP,0x98
0xe635  MOV RAX,R12
0xe638  POP RBX
0xe639  POP RBP
0xe63a  POP R12
0xe63c  POP R13
0xe63e  RET
<L0> (entry=0xe62e):
	instruction(0xe62e)
	CF = RSP carry 0x98:8
	OF = RSP scarry 0x98:8
	RSP = RSP + 0x98:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xe635)
	RAX = R12
	instruction(0xe638)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0xe639)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBP = $U1:8
	instruction(0xe63a)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R12 = $U1:8
	instruction(0xe63c)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R13 = $U1:8
	instruction(0xe63e)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x1e918  LEA RDX,[RAX + RCX*0x1 + 0x2]
0x1e91d  MOV RAX,qword ptr [RBP + -0x58]
0x1e921  MOV RCX,qword ptr [RBP + -0xb8]
0x1e928  ADD RDX,qword ptr [RAX + RCX*0x1 + -0x8]
0x1e92d  MOV RAX,qword ptr [RBP + -0x80]
0x1e931  CMP RAX,0x2
0x1e935  JA 0x1ed5e
<L0> (entry=0x1e918):
	instruction(0x1e918)
	$U2:8 = 0x2:8 + RAX
	$U3:8 = RCX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	RDX = $U1:8
	instruction(0x1e91d)
	$U1:8 = RBP + 0xffffffffffffffa8:8
	RAX = ram[$U1:8]
	instruction(0x1e921)
	$U1:8 = RBP + 0xffffffffffffff48:8
	RCX = ram[$U1:8]
	instruction(0x1e928)
	$U5:8 = 0xfffffffffffffff8:8 + RAX
	$U6:8 = RCX * 0x1:8
	$U4:8 = $U5:8 + $U6:8
	$U7:8 = ram[$U4:8]
	CF = RDX carry $U7:8
	$U8:8 = ram[$U4:8]
	OF = RDX scarry $U8:8
	$U9:8 = ram[$U4:8]
	RDX = RDX + $U9:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e92d)
	$U1:8 = RBP + 0xffffffffffffff80:8
	RAX = ram[$U1:8]
	instruction(0x1e931)
	CF = RAX < 0x2:8
	OF = RAX sborrow 0x2:8
	$U1:8 = RAX - 0x2:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e935)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x1ed5e:8

0x17bb8  MOV R13,RAX
0x17bbb  CMP RAX,-0x1
0x17bbf  JZ 0x17c75
<L0> (entry=0x17bb8):
	instruction(0x17bb8)
	R13 = RAX
	instruction(0x17bbb)
	CF = RAX < 0xffffffffffffffff:8
	OF = RAX sborrow 0xffffffffffffffff:8
	$U1:8 = RAX - 0xffffffffffffffff:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x17bbf)
	if ZF jump 0x17c75:8

0x2238a  ADD RBX,0x18
0x2238e  CMP RDI,RBX
0x22391  JBE 0x22428
<L0> (entry=0x2238a):
	instruction(0x2238a)
	CF = RBX carry 0x18:8
	OF = RBX scarry 0x18:8
	RBX = RBX + 0x18:8
	SF = RBX s< 0x0:8
	ZF = RBX == 0x0:8
	$U1:8 = RBX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2238e)
	CF = RDI < RBX
	OF = RDI sborrow RBX
	$U1:8 = RDI - RBX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x22391)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x22428:8

0x14530  ENDBR64
0x14534  MOV RDX,qword ptr [RDI + 0x2a0]
0x1453b  MOV RAX,RDI
0x1453e  TEST RDX,RDX
0x14541  JZ 0x145b8
<L0> (entry=0x14530):
	instruction(0x14530)
	instruction(0x14534)
	$U1:8 = RDI + 0x2a0:8
	RDX = ram[$U1:8]
	instruction(0x1453b)
	RAX = RDI
	instruction(0x1453e)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RDX & RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x14541)
	if ZF jump 0x145b8:8

0x4430  MOV dword ptr [0x3c118],0x1
0x443a  JMP 0x4380
<L0> (entry=0x4430):
	instruction(0x4430)
	$U1:4 = 0x1:4
	ram[0x3c118:8] = $U1:4
	instruction(0x443a)
	jump 0x4380:8

0x80ef  MOV R8,qword ptr [RBP + 0x20]
0x80f3  MOV ECX,dword ptr [RBP + 0x18]
0x80f6  MOV RDX,R15
0x80f9  MOV RDI,R14
0x80fc  MOV RSI,qword ptr [RBP + -0xe8]
0x8103  CALL 0x7940
<L0> (entry=0x80ef):
	instruction(0x80ef)
	$U1:8 = RBP + 0x20:8
	R8 = ram[$U1:8]
	instruction(0x80f3)
	$U1:8 = RBP + 0x18:8
	ECX = ram[$U1:8]
	RCX = zext(ECX)
	instruction(0x80f6)
	RDX = R15
	instruction(0x80f9)
	RDI = R14
	instruction(0x80fc)
	$U1:8 = RBP + 0xffffffffffffff18:8
	RSI = ram[$U1:8]
	instruction(0x8103)
	$U1:8 = 0x8108:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x7940:8

0x2c021  MOVUPS XMM2, xmmword ptr [RSI + RDX*0x1 + -0x10]
0x2c026  MOVUPS XMM3, xmmword ptr [RSI + RDX*0x1 + -0x20]
0x2c02b  MOVUPS xmmword ptr [RDI], XMM0
0x2c02e  MOVUPS xmmword ptr [RDI + 0x10], XMM1
0x2c032  MOVUPS xmmword ptr [RDI + RDX*0x1 + -0x10], XMM2
0x2c037  MOVUPS xmmword ptr [RDI + RDX*0x1 + -0x20], XMM3
0x2c03c  RET
<L0> (entry=0x2c021):
	instruction(0x2c021)
	$U3:8 = 0xfffffffffffffff0:8 + RSI
	$U4:8 = RDX * 0x1:8
	$U2:8 = $U3:8 + $U4:8
	$U1:16 = ram[$U2:8]
	XMM2_Da = $U1:4
	XMM2_Db = $U1[4]:4
	XMM2_Dc = $U1[8]:4
	XMM2_Dd = $U1[12]:4
	instruction(0x2c026)
	$U3:8 = 0xffffffffffffffe0:8 + RSI
	$U4:8 = RDX * 0x1:8
	$U2:8 = $U3:8 + $U4:8
	$U1:16 = ram[$U2:8]
	XMM3_Da = $U1:4
	XMM3_Db = $U1[4]:4
	XMM3_Dc = $U1[8]:4
	XMM3_Dd = $U1[12]:4
	instruction(0x2c02b)
	$U1:16 = XMM0
	ram[RDI] = $U1:16
	instruction(0x2c02e)
	$U1:8 = RDI + 0x10:8
	$U2:16 = XMM1
	ram[$U1:8] = $U2:16
	instruction(0x2c032)
	$U2:8 = 0xfffffffffffffff0:8 + RDI
	$U3:8 = RDX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	$U4:16 = XMM2
	ram[$U1:8] = $U4:16
	instruction(0x2c037)
	$U2:8 = 0xffffffffffffffe0:8 + RDI
	$U3:8 = RDX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	$U4:16 = XMM3
	ram[$U1:8] = $U4:16
	instruction(0x2c03c)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x1aa03  MOV RAX,qword ptr [RSP + 0xb0]
0x1aa0b  MOV RDX,0xfffffffffffbfbe
0x1aa15  LEA RCX,[RAX + -0x4041]
0x1aa1c  MOV qword ptr [RSP + 0x20],RAX
0x1aa21  CMP RCX,RDX
0x1aa24  JBE 0x1aa2e
<L0> (entry=0x1aa03):
	instruction(0x1aa03)
	$U1:8 = 0xb0:8 + RSP
	RAX = ram[$U1:8]
	instruction(0x1aa0b)
	RDX = 0xfffffffffffbfbe:8
	instruction(0x1aa15)
	$U1:8 = RAX + 0xffffffffffffbfbf:8
	RCX = $U1:8
	instruction(0x1aa1c)
	$U1:8 = 0x20:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1aa21)
	CF = RCX < RDX
	OF = RCX sborrow RDX
	$U1:8 = RCX - RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1aa24)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x1aa2e:8

0xec80  XOR EDX,EDX
0xec82  TEST R15,R15
0xec85  JNZ 0xeb38
<L0> (entry=0xec80):
	instruction(0xec80)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX ^ EDX
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xec82)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R15 & R15
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xec85)
	$U1:1 = !ZF
	if $U1:1 jump 0xeb38:8

0x2bfff  RET
<L0> (entry=0x2bfff):
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x1a584  CMP EDX,0x49656e69
0x1a58a  JZ 0x1b370
<L0> (entry=0x1a584):
	instruction(0x1a584)
	CF = EDX < 0x49656e69:4
	OF = EDX sborrow 0x49656e69:4
	$U1:4 = EDX - 0x49656e69:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1a58a)
	if ZF jump 0x1b370:8

0xeab7  MOV ECX,dword ptr [RSP + 0x8]
0xeabb  LEA RAX,[R14 + 0x488]
0xeac2  LEA EDX,[RCX + -0x1]
0xeac5  SHL RDX,0x4
0xeac9  LEA RDX,[R14 + RDX*0x1 + 0x498]
0xead1  NOP dword ptr [RAX]
0xead8  MOV qword ptr [RAX],R14
0xeadb  ADD RAX,0x10
0xeadf  CMP RAX,RDX
0xeae2  JNZ 0xead8
<L0> (entry=0xeab7):
	instruction(0xeab7)
	$U1:8 = 0x8:8 + RSP
	ECX = ram[$U1:8]
	RCX = zext(ECX)
	instruction(0xeabb)
	$U1:8 = R14 + 0x488:8
	RAX = $U1:8
	instruction(0xeac2)
	$U1:8 = RCX + 0xffffffffffffffff:8
	EDX = $U1:4
	RDX = zext(EDX)
	instruction(0xeac5)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RDX
	RDX = RDX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RDX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RDX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RDX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RDX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0xeac9)
	$U2:8 = 0x498:8 + R14
	$U3:8 = RDX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	RDX = $U1:8
	instruction(0xead1)
	instruction(0xead8)
	$U1:8 = R14
	ram[RAX] = $U1:8
	instruction(0xeadb)
	CF = RAX carry 0x10:8
	OF = RAX scarry 0x10:8
	RAX = RAX + 0x10:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xeadf)
	CF = RAX < RDX
	OF = RAX sborrow RDX
	$U1:8 = RAX - RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xeae2)
	$U1:1 = !ZF
	if $U1:1 jump 0xead8:8

0x1b415  CALL 0x1a010
<L0> (entry=0x1b415):
	$U1:8 = 0x1b41a:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x1a010:8

0x20a40  ENDBR64
0x20a44  PUSH R12
0x20a46  PUSH RBP
0x20a47  PUSH RBX
0x20a48  SUB RSP,0x1d0
0x20a4f  MOV RBP,qword ptr [0x3add0]
0x20a56  TEST RBP,RBP
0x20a59  JZ 0x20b18
<L0> (entry=0x20a40):
	instruction(0x20a40)
	instruction(0x20a44)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x20a46)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x20a47)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x20a48)
	CF = RSP < 0x1d0:8
	OF = RSP sborrow 0x1d0:8
	RSP = RSP - 0x1d0:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x20a4f)
	RBP = ram[0x3add0:8]
	instruction(0x20a56)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RBP & RBP
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x20a59)
	if ZF jump 0x20b18:8

0x1e981  MOV qword ptr [RBP + -0xc0],RAX
0x1e988  TEST RAX,RAX
0x1e98b  JZ 0x1efb9
<L0> (entry=0x1e981):
	instruction(0x1e981)
	$U1:8 = RBP + 0xffffffffffffff40:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1e988)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e98b)
	if ZF jump 0x1efb9:8

0x2432d  CMP qword ptr [RBP + -0x50],0x0
0x24332  JNZ 0x25a60
<L0> (entry=0x2432d):
	instruction(0x2432d)
	$U5:8 = RBP + 0xffffffffffffffb0:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x0:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x0:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x24332)
	$U1:1 = !ZF
	if $U1:1 jump 0x25a60:8

0x4b6d  NOP dword ptr [RAX]
0x4b70  MOV R13,qword ptr [RBP + -0x498]
0x4b77  ADD R13,qword ptr [R12 + 0x8]
0x4b7c  MOV RDI,R13
0x4b7f  CALL 0x8e70
<L0> (entry=0x4b6d):
	instruction(0x4b6d)
	instruction(0x4b70)
	$U1:8 = RBP + 0xfffffffffffffb68:8
	R13 = ram[$U1:8]
	instruction(0x4b77)
	$U4:8 = 0x8:8 + R12
	$U5:8 = ram[$U4:8]
	CF = R13 carry $U5:8
	$U6:8 = ram[$U4:8]
	OF = R13 scarry $U6:8
	$U7:8 = ram[$U4:8]
	R13 = R13 + $U7:8
	SF = R13 s< 0x0:8
	ZF = R13 == 0x0:8
	$U1:8 = R13 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x4b7c)
	RDI = R13
	instruction(0x4b7f)
	$U1:8 = 0x4b84:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x8e70:8

0x7d66  MOVZX ECX,word ptr [R13 + 0x40]
0x7d6b  LEA RDX,[RCX*0x8]
0x7d73  SUB RDX,RCX
0x7d76  SHL RDX,0x3
0x7d7a  JMP 0x7ade
<L0> (entry=0x7d66):
	instruction(0x7d66)
	$U1:8 = R13 + 0x40:8
	$U2:2 = ram[$U1:8]
	ECX = zext($U2:2)
	RCX = zext(ECX)
	instruction(0x7d6b)
	$U1:8 = RCX * 0x8:8
	RDX = $U1:8
	instruction(0x7d73)
	CF = RDX < RCX
	OF = RDX sborrow RCX
	RDX = RDX - RCX
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7d76)
	$U1:8 = 0x3:8 & 0x3f:8
	$U2:8 = RDX
	RDX = RDX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RDX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RDX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RDX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RDX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x7d7a)
	jump 0x7ade:8

0x8203  LEA RSP,[RBP + -0x28]
0x8207  MOV EAX,R8D
0x820a  POP RBX
0x820b  POP R12
0x820d  POP R13
0x820f  POP R14
0x8211  POP R15
0x8213  POP RBP
0x8214  RET
<L0> (entry=0x8203):
	instruction(0x8203)
	$U1:8 = RBP + 0xffffffffffffffd8:8
	RSP = $U1:8
	instruction(0x8207)
	EAX = R8D
	RAX = zext(EAX)
	instruction(0x820a)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0x820b)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R12 = $U1:8
	instruction(0x820d)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R13 = $U1:8
	instruction(0x820f)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R14 = $U1:8
	instruction(0x8211)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R15 = $U1:8
	instruction(0x8213)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBP = $U1:8
	instruction(0x8214)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x1a982  TEST byte ptr [0x3aba0],0x10
0x1a989  MOV EAX,0x840
0x1a98e  MOV RSI,R14
0x1a991  MOV EDI,0x1c
0x1a996  CMOVNZ RBP,RAX
0x1a99a  CMOVNZ RBX,RAX
0x1a99e  MOV RAX,qword ptr [RSP]
0x1a9a2  CMP R8D,0x2
0x1a9a6  CMOVNZ RAX,R12
0x1a9aa  XOR EDX,EDX
0x1a9ac  MOV qword ptr [RSP],RAX
0x1a9b0  CALL 0x18d70
<L0> (entry=0x1a982):
	instruction(0x1a982)
	CF = 0x0:1
	OF = 0x0:1
	$U5:1 = ram[0x3aba0:8]
	$U1:1 = $U5:1 & 0x10:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1a989)
	RAX = 0x840:8
	instruction(0x1a98e)
	RSI = R14
	instruction(0x1a991)
	RDI = 0x1c:8
	instruction(0x1a996)
	$U3:1 = !ZF
	$U1:8 = RAX
	$U2:1 = !$U3:1
	if $U2:1 jump <L282>
<L1>:
	RBP = $U1:8
<L2>:
	instruction(0x1a99a)
	$U3:1 = !ZF
	$U1:8 = RAX
	$U2:1 = !$U3:1
	if $U2:1 jump <L284>
<L3>:
	RBX = $U1:8
<L4>:
	instruction(0x1a99e)
	RAX = ram[RSP]
	instruction(0x1a9a2)
	CF = R8D < 0x2:4
	OF = R8D sborrow 0x2:4
	$U1:4 = R8D - 0x2:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1a9a6)
	$U3:1 = !ZF
	$U1:8 = R12
	$U2:1 = !$U3:1
	if $U2:1 jump <L286>
<L5>:
	RAX = $U1:8
<L6>:
	instruction(0x1a9aa)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX ^ EDX
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a9ac)
	$U1:8 = RAX
	ram[RSP] = $U1:8
	instruction(0x1a9b0)
	$U1:8 = 0x1a9b5:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x18d70:8

0x204cf  MOV byte ptr [RSP + 0x1b],0x0
0x204d4  XOR ESI,ESI
0x204d6  XOR R8D,R8D
0x204d9  XOR R9D,R9D
0x204dc  MOV byte ptr [RSP + 0x1c],0x0
0x204e1  XOR R10D,R10D
0x204e4  XOR R11D,R11D
0x204e7  XOR R13D,R13D
0x204ea  MOV byte ptr [RSP + 0x1d],0x0
0x204ef  XOR R14D,R14D
0x204f2  XOR R15D,R15D
0x204f5  XOR R12D,R12D
0x204f8  XOR EBP,EBP
0x204fa  LEA RCX,[0x2d9fc]
0x20501  NOP dword ptr [RAX]
0x20508  SUB RAX,0x3
0x2050c  CMP RAX,0x30
0x20510  JA 0x20528
<L0> (entry=0x204cf):
	instruction(0x204cf)
	$U1:8 = 0x1b:8 + RSP
	$U2:1 = 0x0:1
	ram[$U1:8] = $U2:1
	instruction(0x204d4)
	CF = 0x0:1
	OF = 0x0:1
	ESI = ESI ^ ESI
	RSI = zext(ESI)
	SF = ESI s< 0x0:4
	ZF = ESI == 0x0:4
	$U1:4 = ESI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x204d6)
	CF = 0x0:1
	OF = 0x0:1
	R8D = R8D ^ R8D
	R8 = zext(R8D)
	SF = R8D s< 0x0:4
	ZF = R8D == 0x0:4
	$U1:4 = R8D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x204d9)
	CF = 0x0:1
	OF = 0x0:1
	R9D = R9D ^ R9D
	R9 = zext(R9D)
	SF = R9D s< 0x0:4
	ZF = R9D == 0x0:4
	$U1:4 = R9D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x204dc)
	$U1:8 = 0x1c:8 + RSP
	$U2:1 = 0x0:1
	ram[$U1:8] = $U2:1
	instruction(0x204e1)
	CF = 0x0:1
	OF = 0x0:1
	R10D = R10D ^ R10D
	R10 = zext(R10D)
	SF = R10D s< 0x0:4
	ZF = R10D == 0x0:4
	$U1:4 = R10D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x204e4)
	CF = 0x0:1
	OF = 0x0:1
	R11D = R11D ^ R11D
	R11 = zext(R11D)
	SF = R11D s< 0x0:4
	ZF = R11D == 0x0:4
	$U1:4 = R11D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x204e7)
	CF = 0x0:1
	OF = 0x0:1
	R13D = R13D ^ R13D
	R13 = zext(R13D)
	SF = R13D s< 0x0:4
	ZF = R13D == 0x0:4
	$U1:4 = R13D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x204ea)
	$U1:8 = 0x1d:8 + RSP
	$U2:1 = 0x0:1
	ram[$U1:8] = $U2:1
	instruction(0x204ef)
	CF = 0x0:1
	OF = 0x0:1
	R14D = R14D ^ R14D
	R14 = zext(R14D)
	SF = R14D s< 0x0:4
	ZF = R14D == 0x0:4
	$U1:4 = R14D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x204f2)
	CF = 0x0:1
	OF = 0x0:1
	R15D = R15D ^ R15D
	R15 = zext(R15D)
	SF = R15D s< 0x0:4
	ZF = R15D == 0x0:4
	$U1:4 = R15D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x204f5)
	CF = 0x0:1
	OF = 0x0:1
	R12D = R12D ^ R12D
	R12 = zext(R12D)
	SF = R12D s< 0x0:4
	ZF = R12D == 0x0:4
	$U1:4 = R12D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x204f8)
	CF = 0x0:1
	OF = 0x0:1
	EBP = EBP ^ EBP
	RBP = zext(EBP)
	SF = EBP s< 0x0:4
	ZF = EBP == 0x0:4
	$U1:4 = EBP & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x204fa)
	RCX = 0x2d9fc:8
	instruction(0x20501)
	instruction(0x20508)
	CF = RAX < 0x3:8
	OF = RAX sborrow 0x3:8
	RAX = RAX - 0x3:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2050c)
	CF = RAX < 0x30:8
	OF = RAX sborrow 0x30:8
	$U1:8 = RAX - 0x30:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x20510)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x20528:8

0x18dd0  RET
<L0> (entry=0x18dd0):
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x23330  MOV ECX,dword ptr [RAX]
0x23332  CMP ECX,0x7
0x23335  JA 0x23350
<L0> (entry=0x23330):
	instruction(0x23330)
	ECX = ram[RAX]
	RCX = zext(ECX)
	instruction(0x23332)
	CF = ECX < 0x7:4
	OF = ECX sborrow 0x7:4
	$U1:4 = ECX - 0x7:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23335)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x23350:8

0xb740  LEA R11,[RSP + 0x70]
0xb745  JMP 0xb5d0
<L0> (entry=0xb740):
	instruction(0xb740)
	$U1:8 = 0x70:8 + RSP
	R11 = $U1:8
	instruction(0xb745)
	jump 0xb5d0:8

0x5ae1  MOV RDI,RSI
0x5ae4  MOV RBP,RSI
0x5ae7  CALL 0x2ba40
<L0> (entry=0x5ae1):
	instruction(0x5ae1)
	RDI = RSI
	instruction(0x5ae4)
	RBP = RSI
	instruction(0x5ae7)
	$U1:8 = 0x5aec:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2ba40:8

0x14a85  MOV RSI,qword ptr [R8 + R10*0x8]
0x14a89  TEST byte ptr [RSI + 0x31d],0x21
0x14a90  JNZ 0x14a9d
<L0> (entry=0x14a85):
	instruction(0x14a85)
	$U2:8 = R10 * 0x8:8
	$U1:8 = R8 + $U2:8
	RSI = ram[$U1:8]
	instruction(0x14a89)
	$U5:8 = RSI + 0x31d:8
	CF = 0x0:1
	OF = 0x0:1
	$U6:1 = ram[$U5:8]
	$U1:1 = $U6:1 & 0x21:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x14a90)
	$U1:1 = !ZF
	if $U1:1 jump 0x14a9d:8

0x1e110  ENDBR64
0x1e114  PUSH RAX
0x1e115  POP RAX
0x1e116  SUB RSP,0x8
0x1e11a  MOV RAX,qword ptr [0x3c218]
0x1e121  TEST RAX,RAX
0x1e124  JZ 0x1e14c
<L0> (entry=0x1e110):
	instruction(0x1e110)
	instruction(0x1e114)
	$U1:8 = RAX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1e115)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RAX = $U1:8
	instruction(0x1e116)
	CF = RSP < 0x8:8
	OF = RSP sborrow 0x8:8
	RSP = RSP - 0x8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e11a)
	RAX = ram[0x3c218:8]
	instruction(0x1e121)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e124)
	if ZF jump 0x1e14c:8

0x1acb4  TEST RAX,RAX
0x1acb7  JZ 0x1ad60
<L0> (entry=0x1acb4):
	instruction(0x1acb4)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1acb7)
	if ZF jump 0x1ad60:8

0x206a0  MOV EAX,dword ptr [RDX + 0x8]
0x206a3  ADD RDX,0x10
0x206a7  MOV byte ptr [RSP + 0x1b],0x1
0x206ac  MOV dword ptr [RSP + 0x3c],EAX
0x206b0  MOV RAX,qword ptr [RDX]
0x206b3  TEST RAX,RAX
0x206b6  JNZ 0x20508
<L0> (entry=0x206a0):
	instruction(0x206a0)
	$U1:8 = RDX + 0x8:8
	EAX = ram[$U1:8]
	RAX = zext(EAX)
	instruction(0x206a3)
	CF = RDX carry 0x10:8
	OF = RDX scarry 0x10:8
	RDX = RDX + 0x10:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x206a7)
	$U1:8 = 0x1b:8 + RSP
	$U2:1 = 0x1:1
	ram[$U1:8] = $U2:1
	instruction(0x206ac)
	$U1:8 = 0x3c:8 + RSP
	$U2:4 = EAX
	ram[$U1:8] = $U2:4
	instruction(0x206b0)
	RAX = ram[RDX]
	instruction(0x206b3)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x206b6)
	$U1:1 = !ZF
	if $U1:1 jump 0x20508:8

0x1052a  TEST AL,AL
0x1052c  JZ 0x10649
<L0> (entry=0x1052a):
	instruction(0x1052a)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = AL & AL
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1052c)
	if ZF jump 0x10649:8

0x1466b  TEST R12,R12
0x1466e  JNZ 0x146b0
<L0> (entry=0x1466b):
	instruction(0x1466b)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R12 & R12
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1466e)
	$U1:1 = !ZF
	if $U1:1 jump 0x146b0:8

0x1afae  MOV EDI,0xbe
0x1afb3  MOV qword ptr [RSP + 0x48],RAX
0x1afb8  CALL 0x19f10
<L0> (entry=0x1afae):
	instruction(0x1afae)
	RDI = 0xbe:8
	instruction(0x1afb3)
	$U1:8 = 0x48:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1afb8)
	$U1:8 = 0x1afbd:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x19f10:8

0x2339f  MOV RDX,R12
0x233a2  MOV ESI,0xffffffff
0x233a7  MOV RDI,R15
0x233aa  CALL 0x9b60
<L0> (entry=0x2339f):
	instruction(0x2339f)
	RDX = R12
	instruction(0x233a2)
	RSI = 0xffffffff:8
	instruction(0x233a7)
	RDI = R15
	instruction(0x233aa)
	$U1:8 = 0x233af:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x9b60:8

0x2229f  MOV R9,qword ptr [R9 + 0x8]
0x222a3  MOV qword ptr [RBP + -0x60],R9
0x222a7  TEST RAX,RAX
0x222aa  JZ 0x222ee
<L0> (entry=0x2229f):
	instruction(0x2229f)
	$U1:8 = R9 + 0x8:8
	R9 = ram[$U1:8]
	instruction(0x222a3)
	$U1:8 = RBP + 0xffffffffffffffa0:8
	$U2:8 = R9
	ram[$U1:8] = $U2:8
	instruction(0x222a7)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x222aa)
	if ZF jump 0x222ee:8

0x2348e  LEA RCX,[RDX + 0x10]
0x23492  MOV dword ptr [RBP + -0x2b0],EAX
0x23498  MOV EAX,EBX
0x2349a  LEA R13,[RCX + RDI*0x1]
0x2349e  JMP 0x234d2
<L0> (entry=0x2348e):
	instruction(0x2348e)
	$U1:8 = RDX + 0x10:8
	RCX = $U1:8
	instruction(0x23492)
	$U1:8 = RBP + 0xfffffffffffffd50:8
	$U2:4 = EAX
	ram[$U1:8] = $U2:4
	instruction(0x23498)
	EAX = EBX
	RAX = zext(EAX)
	instruction(0x2349a)
	$U2:8 = RDI * 0x1:8
	$U1:8 = RCX + $U2:8
	R13 = $U1:8
	instruction(0x2349e)
	jump 0x234d2:8

0x247d3  MOV R13,qword ptr [0x3add0]
0x247da  TEST R13,R13
0x247dd  JZ 0x25127
<L0> (entry=0x247d3):
	instruction(0x247d3)
	R13 = ram[0x3add0:8]
	instruction(0x247da)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R13 & R13
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x247dd)
	if ZF jump 0x25127:8

0x1ec01  MOV RCX,qword ptr [RBP + -0x80]
0x1ec05  MOV R8D,0x1
0x1ec0b  MOV RDI,RCX
0x1ec0e  SHL RDI,0x4
0x1ec12  ADD RDI,qword ptr [RBP + -0x58]
0x1ec16  NOP word ptr CS:[RAX + RAX*0x1]
0x1ec20  SUB RCX,0x1
0x1ec24  MOV ESI,R8D
0x1ec27  MOV RDX,RBX
0x1ec2a  MOV RAX,R11
0x1ec2d  SHL ESI,CL
0x1ec2f  MOVSXD RSI,ESI
0x1ec32  SUB RAX,0x1
0x1ec36  ADD RDX,0x10
0x1ec3a  TEST RSI,RAX
0x1ec3d  JZ 0x1ec5d
<L0> (entry=0x1ec01):
	instruction(0x1ec01)
	$U1:8 = RBP + 0xffffffffffffff80:8
	RCX = ram[$U1:8]
	instruction(0x1ec05)
	R8 = 0x1:8
	instruction(0x1ec0b)
	RDI = RCX
	instruction(0x1ec0e)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RDI
	RDI = RDI << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RDI s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RDI s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RDI == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RDI & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1ec12)
	$U4:8 = RBP + 0xffffffffffffffa8:8
	$U5:8 = ram[$U4:8]
	CF = RDI carry $U5:8
	$U6:8 = ram[$U4:8]
	OF = RDI scarry $U6:8
	$U7:8 = ram[$U4:8]
	RDI = RDI + $U7:8
	SF = RDI s< 0x0:8
	ZF = RDI == 0x0:8
	$U1:8 = RDI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ec16)
	$U2:8 = RAX * 0x1:8
	$U1:8 = RAX + $U2:8
	instruction(0x1ec20)
	CF = RCX < 0x1:8
	OF = RCX sborrow 0x1:8
	RCX = RCX - 0x1:8
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ec24)
	ESI = R8D
	RSI = zext(ESI)
	instruction(0x1ec27)
	RDX = RBX
	instruction(0x1ec2a)
	RAX = R11
	instruction(0x1ec2d)
	$U1:1 = CL & 0x1f:1
	$U2:4 = ESI
	ESI = ESI << $U1:1
	RSI = zext(ESI)
	$U3:1 = $U1:1 != 0x0:1
	$U5:1 = $U1:1 - 0x1:1
	$U6:4 = $U2:4 << $U5:1
	$U4:1 = $U6:4 s< 0x0:4
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:1 == 0x1:1
	$U12:1 = ESI s< 0x0:4
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:1 != 0x0:1
	$U17:1 = ESI s< 0x0:4
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = ESI == 0x0:4
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:4 = ESI & 0xff:4
	$U27:1 = count_ones($U26:4)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1ec2f)
	RSI = sext(ESI)
	instruction(0x1ec32)
	CF = RAX < 0x1:8
	OF = RAX sborrow 0x1:8
	RAX = RAX - 0x1:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ec36)
	CF = RDX carry 0x10:8
	OF = RDX scarry 0x10:8
	RDX = RDX + 0x10:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ec3a)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RSI & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1ec3d)
	if ZF jump 0x1ec5d:8

0x1b683  AND ESI,0xffffffef
0x1b686  CMP ESI,0x8e
0x1b68c  JNZ 0x1b43a
<L0> (entry=0x1b683):
	instruction(0x1b683)
	CF = 0x0:1
	OF = 0x0:1
	ESI = ESI & 0xffffffef:4
	RSI = zext(ESI)
	SF = ESI s< 0x0:4
	ZF = ESI == 0x0:4
	$U1:4 = ESI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1b686)
	CF = ESI < 0x8e:4
	OF = ESI sborrow 0x8e:4
	$U1:4 = ESI - 0x8e:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1b68c)
	$U1:1 = !ZF
	if $U1:1 jump 0x1b43a:8

0xea0f  MOV RDX,qword ptr [RSP + 0x20]
0xea14  MOV qword ptr [RAX + 0x28],RAX
0xea18  MOV RSI,R12
0xea1b  LEA R9,[RAX + RDX*0x1 + 0x488]
0xea23  MOV RDX,qword ptr [RSP + 0x18]
0xea28  MOV qword ptr [RAX + 0x2d0],R9
0xea2f  LEA RAX,[R9 + 0x8]
0xea33  LEA RDI,[R9 + 0x20]
0xea37  MOV qword ptr [R14 + 0x38],RAX
0xea3b  MOV qword ptr [RSP + 0x20],R9
0xea40  CALL 0x2bfb0
<L0> (entry=0xea0f):
	instruction(0xea0f)
	$U1:8 = 0x20:8 + RSP
	RDX = ram[$U1:8]
	instruction(0xea14)
	$U1:8 = RAX + 0x28:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0xea18)
	RSI = R12
	instruction(0xea1b)
	$U2:8 = 0x488:8 + RAX
	$U3:8 = RDX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	R9 = $U1:8
	instruction(0xea23)
	$U1:8 = 0x18:8 + RSP
	RDX = ram[$U1:8]
	instruction(0xea28)
	$U1:8 = RAX + 0x2d0:8
	$U2:8 = R9
	ram[$U1:8] = $U2:8
	instruction(0xea2f)
	$U1:8 = R9 + 0x8:8
	RAX = $U1:8
	instruction(0xea33)
	$U1:8 = R9 + 0x20:8
	RDI = $U1:8
	instruction(0xea37)
	$U1:8 = R14 + 0x38:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0xea3b)
	$U1:8 = 0x20:8 + RSP
	$U2:8 = R9
	ram[$U1:8] = $U2:8
	instruction(0xea40)
	$U1:8 = 0xea45:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2bfb0:8

0x9758  MOV qword ptr [0x39aa0],RAX
0x975f  TEST RAX,RAX
0x9762  JZ 0x9afd
<L0> (entry=0x9758):
	instruction(0x9758)
	$U1:8 = RAX
	ram[0x39aa0:8] = $U1:8
	instruction(0x975f)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x9762)
	if ZF jump 0x9afd:8

0x9bd0  PUSH RBP
0x9bd1  MOV RBP,RSP
0x9bd4  PUSH R15
0x9bd6  PUSH R14
0x9bd8  PUSH R13
0x9bda  PUSH R12
0x9bdc  MOV R12,R9
0x9bdf  PUSH RBX
0x9be0  SUB RSP,0x138
0x9be7  MOV qword ptr [RBP + -0xf8],RDI
0x9bee  MOV RDI,qword ptr [RBP + 0x28]
0x9bf2  MOV qword ptr [RBP + -0x120],RSI
0x9bf9  MOV dword ptr [RBP + -0xd4],EDX
0x9bff  MOV qword ptr [RBP + -0x110],RCX
0x9c06  MOV qword ptr [RBP + -0xf0],R8
0x9c0d  CALL 0x4310
<L0> (entry=0x9bd0):
	instruction(0x9bd0)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x9bd1)
	RBP = RSP
	instruction(0x9bd4)
	$U1:8 = R15
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x9bd6)
	$U1:8 = R14
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x9bd8)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x9bda)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x9bdc)
	R12 = R9
	instruction(0x9bdf)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x9be0)
	CF = RSP < 0x138:8
	OF = RSP sborrow 0x138:8
	RSP = RSP - 0x138:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x9be7)
	$U1:8 = RBP + 0xffffffffffffff08:8
	$U2:8 = RDI
	ram[$U1:8] = $U2:8
	instruction(0x9bee)
	$U1:8 = RBP + 0x28:8
	RDI = ram[$U1:8]
	instruction(0x9bf2)
	$U1:8 = RBP + 0xfffffffffffffee0:8
	$U2:8 = RSI
	ram[$U1:8] = $U2:8
	instruction(0x9bf9)
	$U1:8 = RBP + 0xffffffffffffff2c:8
	$U2:4 = EDX
	ram[$U1:8] = $U2:4
	instruction(0x9bff)
	$U1:8 = RBP + 0xfffffffffffffef0:8
	$U2:8 = RCX
	ram[$U1:8] = $U2:8
	instruction(0x9c06)
	$U1:8 = RBP + 0xffffffffffffff10:8
	$U2:8 = R8
	ram[$U1:8] = $U2:8
	instruction(0x9c0d)
	$U1:8 = 0x9c12:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x4310:8

0x109af  MOV RDI,qword ptr [RDX]
0x109b2  MOVSXD RDX,R12D
0x109b5  MOV dword ptr [RBP + -0x460],R9D
0x109bc  SHL RDX,0x4
0x109c0  MOV dword ptr [RBP + -0x45c],ECX
0x109c6  MOV qword ptr [RBP + RDX*0x1 + -0x430],RDI
0x109ce  MOV qword ptr [RBP + -0x458],RDX
0x109d5  CALL 0x2ba40
<L0> (entry=0x109af):
	instruction(0x109af)
	RDI = ram[RDX]
	instruction(0x109b2)
	RDX = sext(R12D)
	instruction(0x109b5)
	$U1:8 = RBP + 0xfffffffffffffba0:8
	$U2:4 = R9D
	ram[$U1:8] = $U2:4
	instruction(0x109bc)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RDX
	RDX = RDX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RDX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RDX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RDX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RDX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x109c0)
	$U1:8 = RBP + 0xfffffffffffffba4:8
	$U2:4 = ECX
	ram[$U1:8] = $U2:4
	instruction(0x109c6)
	$U2:8 = 0xfffffffffffffbd0:8 + RBP
	$U3:8 = RDX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	$U4:8 = RDI
	ram[$U1:8] = $U4:8
	instruction(0x109ce)
	$U1:8 = RBP + 0xfffffffffffffba8:8
	$U2:8 = RDX
	ram[$U1:8] = $U2:8
	instruction(0x109d5)
	$U1:8 = 0x109da:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2ba40:8

0x1e61e  MOV RDI,R12
0x1e621  CALL 0x1f0c0
<L0> (entry=0x1e61e):
	instruction(0x1e61e)
	RDI = R12
	instruction(0x1e621)
	$U1:8 = 0x1e626:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x1f0c0:8

0xbaca  MOVZX EAX,byte ptr [RCX + 0x31c]
0xbad1  MOV R8D,EBX
0xbad4  AND R8D,0x8000000
0xbadb  MOV byte ptr [RSP + 0x30],AL
0xbadf  AND EAX,0x3
0xbae2  CMP AL,0x2
0xbae4  JZ 0xbb5a
<L0> (entry=0xbaca):
	instruction(0xbaca)
	$U1:8 = RCX + 0x31c:8
	$U2:1 = ram[$U1:8]
	EAX = zext($U2:1)
	RAX = zext(EAX)
	instruction(0xbad1)
	R8D = EBX
	R8 = zext(R8D)
	instruction(0xbad4)
	CF = 0x0:1
	OF = 0x0:1
	R8D = R8D & 0x8000000:4
	R8 = zext(R8D)
	SF = R8D s< 0x0:4
	ZF = R8D == 0x0:4
	$U1:4 = R8D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xbadb)
	$U1:8 = 0x30:8 + RSP
	$U2:1 = AL
	ram[$U1:8] = $U2:1
	instruction(0xbadf)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX & 0x3:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xbae2)
	CF = AL < 0x2:1
	OF = AL sborrow 0x2:1
	$U1:1 = AL - 0x2:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xbae4)
	if ZF jump 0xbb5a:8

0x1b398  MOV EAX,0x80000000
0x1b39d  CPUID
0x1b39f  MOV ESI,EAX
0x1b3a1  CMP EAX,0x80000000
0x1b3a6  JBE 0x1b415
<L0> (entry=0x1b398):
	instruction(0x1b398)
	RAX = 0x80000000:8
	instruction(0x1b39d)
	$U2:1 = EAX == 0x0:4
	if $U2:1 jump <L212>
<L1>:
	$U3:1 = EAX == 0x1:4
	if $U3:1 jump <L213>
<L2>:
	$U4:1 = EAX == 0x2:4
	if $U4:1 jump <L214>
<L3>:
	$U5:1 = EAX == 0x3:4
	if $U5:1 jump <L215>
<L4>:
	$U6:1 = EAX == 0x4:4
	if $U6:1 jump <L216>
<L5>:
	$U7:1 = EAX == 0x5:4
	if $U7:1 jump <L217>
<L6>:
	$U8:1 = EAX == 0x6:4
	if $U8:1 jump <L218>
<L7>:
	$U9:1 = EAX == 0x7:4
	if $U9:1 jump <L219>
<L8>:
	$U10:1 = EAX == 0x9:4
	if $U10:1 jump <L220>
<L9>:
	$U11:1 = EAX == 0xa:4
	if $U11:1 jump <L221>
<L10>:
	$U12:1 = EAX == 0xb:4
	if $U12:1 jump <L222>
<L11>:
	$U13:1 = EAX == 0xd:4
	if $U13:1 jump <L223>
<L12>:
	$U14:1 = EAX == 0xf:4
	if $U14:1 jump <L224>
<L13>:
	$U15:1 = EAX == 0x80000002:4
	if $U15:1 jump <L225>
<L14>:
	$U16:1 = EAX == 0x80000003:4
	if $U16:1 jump <L226>
<L15>:
	$U17:1 = EAX == 0x80000004:4
	if $U17:1 jump <L227>
<L16>:
	$tmp0 = cpuid(EAX, ECX)
	jump <L228>
<L17>:
	$tmp0 = cpuid_basic_info(EAX, ECX)
	jump <L228>
<L18>:
	$tmp0 = cpuid_Version_info(EAX, ECX)
	jump <L228>
<L19>:
	$tmp0 = cpuid_cache_tlb_info(EAX, ECX)
	jump <L228>
<L20>:
	$tmp0 = cpuid_serial_info(EAX, ECX)
	jump <L228>
<L21>:
	$tmp0 = cpuid_Deterministic_Cache_Parameters_info(EAX, ECX)
	jump <L228>
<L22>:
	$tmp0 = cpuid_MONITOR_MWAIT_Features_info(EAX, ECX)
	jump <L228>
<L23>:
	$tmp0 = cpuid_Thermal_Power_Management_info(EAX, ECX)
	jump <L228>
<L24>:
	$tmp0 = cpuid_Extended_Feature_Enumeration_info(EAX, ECX)
	jump <L228>
<L25>:
	$tmp0 = cpuid_Direct_Cache_Access_info(EAX, ECX)
	jump <L228>
<L26>:
	$tmp0 = cpuid_Architectural_Performance_Monitoring_info(EAX, ECX)
	jump <L228>
<L27>:
	$tmp0 = cpuid_Extended_Topology_info(EAX, ECX)
	jump <L228>
<L28>:
	$tmp0 = cpuid_Processor_Extended_States_info(EAX, ECX)
	jump <L228>
<L29>:
	$tmp0 = cpuid_Quality_of_Service_info(EAX, ECX)
	jump <L228>
<L30>:
	$tmp0 = cpuid_brand_part1_info(EAX, ECX)
	jump <L228>
<L31>:
	$tmp0 = cpuid_brand_part2_info(EAX, ECX)
	jump <L228>
<L32>:
	$tmp0 = cpuid_brand_part3_info(EAX, ECX)
<L33>:
	RAX = zext($tmp0:4)
	RBX = zext($tmp0[4]:4)
	RDX = zext($tmp0[8]:4)
	RCX = zext($tmp0[12]:4)
	instruction(0x1b39f)
	ESI = EAX
	RSI = zext(ESI)
	instruction(0x1b3a1)
	CF = EAX < 0x80000000:4
	OF = EAX sborrow 0x80000000:4
	$U1:4 = EAX - 0x80000000:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1b3a6)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x1b415:8

0x14aa3  CMP byte ptr [RBP + -0x41],0x0
0x14aa7  JZ 0x14b7e
<L0> (entry=0x14aa3):
	instruction(0x14aa3)
	$U5:8 = RBP + 0xffffffffffffffbf:8
	$U6:1 = ram[$U5:8]
	CF = $U6:1 < 0x0:1
	$U7:1 = ram[$U5:8]
	OF = $U7:1 sborrow 0x0:1
	$U8:1 = ram[$U5:8]
	$U1:1 = $U8:1 - 0x0:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x14aa7)
	if ZF jump 0x14b7e:8

0x2344b  CMP dword ptr [RDX + 0x8],0x5
0x2344f  JNZ 0x23420
<L0> (entry=0x2344b):
	instruction(0x2344b)
	$U5:8 = RDX + 0x8:8
	$U6:4 = ram[$U5:8]
	CF = $U6:4 < 0x5:4
	$U7:4 = ram[$U5:8]
	OF = $U7:4 sborrow 0x5:4
	$U8:4 = ram[$U5:8]
	$U1:4 = $U8:4 - 0x5:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2344f)
	$U1:1 = !ZF
	if $U1:1 jump 0x23420:8

0x2ba40  ENDBR64
0x2ba44  PXOR XMM0, XMM0
0x2ba48  PXOR XMM1, XMM1
0x2ba4c  PXOR XMM2, XMM2
0x2ba50  PXOR XMM3, XMM3
0x2ba54  MOV RAX,RDI
0x2ba57  MOV RCX,RDI
0x2ba5a  AND RCX,0xfff
0x2ba61  CMP RCX,0xfcf
0x2ba68  JA 0x2bad0
<L0> (entry=0x2ba40):
	instruction(0x2ba40)
	instruction(0x2ba44)
	XMM0 = XMM0 ^ XMM0
	instruction(0x2ba48)
	XMM1 = XMM1 ^ XMM1
	instruction(0x2ba4c)
	XMM2 = XMM2 ^ XMM2
	instruction(0x2ba50)
	XMM3 = XMM3 ^ XMM3
	instruction(0x2ba54)
	RAX = RDI
	instruction(0x2ba57)
	RCX = RDI
	instruction(0x2ba5a)
	CF = 0x0:1
	OF = 0x0:1
	RCX = RCX & 0xfff:8
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2ba61)
	CF = RCX < 0xfcf:8
	OF = RCX sborrow 0xfcf:8
	$U1:8 = RCX - 0xfcf:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2ba68)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x2bad0:8

0x97b6  LEA RAX,[0x2ed6d]
0x97bd  MOV qword ptr [0x3bae8],R14
0x97c4  MOV RCX,qword ptr [0x39ab8]
0x97cb  LEA R13,[R12 + 0x8]
0x97d0  MOV dword ptr [0x39aa8],0x0
0x97da  MOV qword ptr [R12],R14
0x97de  LEA R15,[RCX*0x4]
0x97e6  LEA R12,[0x2d020]
0x97ed  MOV qword ptr [R14 + 0x8],RAX
0x97f1  LEA RAX,[0x2d040]
0x97f8  MOV qword ptr [R14 + 0x18],RAX
0x97fc  LEA RAX,[RBX*0x8]
0x9804  LEA RBX,[0x2d057]
0x980b  MOV qword ptr [RBP + -0x38],RCX
0x980f  MOV qword ptr [RBP + -0x40],RAX
0x9813  NEG RAX
0x9816  CMP qword ptr [RBP + -0x38],0x0
0x981b  MOV qword ptr [R14 + 0x10],0x0
0x9823  MOV qword ptr [R14 + 0x20],0x16
0x982b  MOV qword ptr [RBP + -0x48],RAX
0x982f  JZ 0x983f
<L0> (entry=0x97b6):
	instruction(0x97b6)
	RAX = 0x2ed6d:8
	instruction(0x97bd)
	$U1:8 = R14
	ram[0x3bae8:8] = $U1:8
	instruction(0x97c4)
	RCX = ram[0x39ab8:8]
	instruction(0x97cb)
	$U1:8 = 0x8:8 + R12
	R13 = $U1:8
	instruction(0x97d0)
	$U1:4 = 0x0:4
	ram[0x39aa8:8] = $U1:4
	instruction(0x97da)
	$U1:8 = R14
	ram[R12] = $U1:8
	instruction(0x97de)
	$U1:8 = RCX * 0x4:8
	R15 = $U1:8
	instruction(0x97e6)
	R12 = 0x2d020:8
	instruction(0x97ed)
	$U1:8 = R14 + 0x8:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x97f1)
	RAX = 0x2d040:8
	instruction(0x97f8)
	$U1:8 = R14 + 0x18:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x97fc)
	$U1:8 = RBX * 0x8:8
	RAX = $U1:8
	instruction(0x9804)
	RBX = 0x2d057:8
	instruction(0x980b)
	$U1:8 = RBP + 0xffffffffffffffc8:8
	$U2:8 = RCX
	ram[$U1:8] = $U2:8
	instruction(0x980f)
	$U1:8 = RBP + 0xffffffffffffffc0:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x9813)
	CF = RAX != 0x0:8
	OF = 0x0:8 sborrow RAX
	RAX = -RAX
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x9816)
	$U5:8 = RBP + 0xffffffffffffffc8:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x0:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x0:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x981b)
	$U1:8 = R14 + 0x10:8
	$U2:8 = 0x0:8
	ram[$U1:8] = $U2:8
	instruction(0x9823)
	$U1:8 = R14 + 0x20:8
	$U2:8 = 0x16:8
	ram[$U1:8] = $U2:8
	instruction(0x982b)
	$U1:8 = RBP + 0xffffffffffffffb8:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x982f)
	if ZF jump 0x983f:8

0x1c170  ENDBR64
0x1c174  PUSH R13
0x1c176  PUSH R12
0x1c178  PUSH RBP
0x1c179  PUSH RBX
0x1c17a  SUB RSP,0x8
0x1c17e  MOV EAX,dword ptr [0x3ae78]
0x1c184  MOV RBX,qword ptr [0x3ae70]
0x1c18b  TEST EAX,EAX
0x1c18d  JZ 0x1c1d4
<L0> (entry=0x1c170):
	instruction(0x1c170)
	instruction(0x1c174)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1c176)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1c178)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1c179)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1c17a)
	CF = RSP < 0x8:8
	OF = RSP sborrow 0x8:8
	RSP = RSP - 0x8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1c17e)
	EAX = ram[0x3ae78:8]
	RAX = zext(EAX)
	instruction(0x1c184)
	RBX = ram[0x3ae70:8]
	instruction(0x1c18b)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1c18d)
	if ZF jump 0x1c1d4:8

0xb518  TEST R12,R12
0xb51b  MOV EAX,EBX
0xb51d  SETNZ byte ptr [RSP + 0x10]
0xb522  AND EAX,0x10000000
0xb527  MOVZX ECX,byte ptr [RSP + 0x10]
0xb52c  MOV dword ptr [RSP + 0x1c],EAX
0xb530  TEST byte ptr [0x3aae0],0x40
0xb537  JZ 0xb541
<L0> (entry=0xb518):
	instruction(0xb518)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R12 & R12
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb51b)
	EAX = EBX
	RAX = zext(EAX)
	instruction(0xb51d)
	$U1:1 = !ZF
	$U2:8 = 0x10:8 + RSP
	$U3:1 = $U1:1
	ram[$U2:8] = $U3:1
	instruction(0xb522)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX & 0x10000000:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xb527)
	$U1:8 = 0x10:8 + RSP
	$U2:1 = ram[$U1:8]
	ECX = zext($U2:1)
	RCX = zext(ECX)
	instruction(0xb52c)
	$U1:8 = 0x1c:8 + RSP
	$U2:4 = EAX
	ram[$U1:8] = $U2:4
	instruction(0xb530)
	CF = 0x0:1
	OF = 0x0:1
	$U5:1 = ram[0x3aae0:8]
	$U1:1 = $U5:1 & 0x40:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb537)
	if ZF jump 0xb541:8

0x1059f  MOVZX EAX,byte ptr [RBX]
0x105a2  TEST AL,AL
0x105a4  JNZ 0x10520
<L0> (entry=0x1059f):
	instruction(0x1059f)
	$U1:1 = ram[RBX]
	EAX = zext($U1:1)
	RAX = zext(EAX)
	instruction(0x105a2)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = AL & AL
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x105a4)
	$U1:1 = !ZF
	if $U1:1 jump 0x10520:8

0x195e6  MOV R8,RDX
0x195e9  MOV R9,RCX
0x195ec  MOV EAX,0x1
0x195f1  CPUID
0x195f3  MOV dword ptr [0x3ab70],EDX
0x195f9  MOV EDX,EAX
0x195fb  SHR EDX,0x8
0x195fe  MOV dword ptr [0x3ab68],EBX
0x19604  AND EDX,0xf
0x19607  MOV dword ptr [0x3ab6c],ECX
0x1960d  MOV dword ptr [0x3ab64],EAX
0x19613  MOV dword ptr [RDI],EDX
0x19615  MOV EDX,EAX
0x19617  SHR EDX,0x4
0x1961a  AND EDX,0xf
0x1961d  MOV dword ptr [RSI],EDX
0x1961f  MOV EDX,EAX
0x19621  SHR EDX,0xc
0x19624  AND EDX,0xf0
0x1962a  MOV dword ptr [R8],EDX
0x1962d  MOV EDX,EAX
0x1962f  AND EDX,0xf
0x19632  MOV dword ptr [R9],EDX
0x19635  CMP dword ptr [RDI],0xf
0x19638  JZ 0x19760
<L0> (entry=0x195e6):
	instruction(0x195e6)
	R8 = RDX
	instruction(0x195e9)
	R9 = RCX
	instruction(0x195ec)
	RAX = 0x1:8
	instruction(0x195f1)
	$U2:1 = EAX == 0x0:4
	if $U2:1 jump <L174>
<L1>:
	$U3:1 = EAX == 0x1:4
	if $U3:1 jump <L175>
<L2>:
	$U4:1 = EAX == 0x2:4
	if $U4:1 jump <L176>
<L3>:
	$U5:1 = EAX == 0x3:4
	if $U5:1 jump <L177>
<L4>:
	$U6:1 = EAX == 0x4:4
	if $U6:1 jump <L178>
<L5>:
	$U7:1 = EAX == 0x5:4
	if $U7:1 jump <L179>
<L6>:
	$U8:1 = EAX == 0x6:4
	if $U8:1 jump <L180>
<L7>:
	$U9:1 = EAX == 0x7:4
	if $U9:1 jump <L181>
<L8>:
	$U10:1 = EAX == 0x9:4
	if $U10:1 jump <L182>
<L9>:
	$U11:1 = EAX == 0xa:4
	if $U11:1 jump <L183>
<L10>:
	$U12:1 = EAX == 0xb:4
	if $U12:1 jump <L184>
<L11>:
	$U13:1 = EAX == 0xd:4
	if $U13:1 jump <L185>
<L12>:
	$U14:1 = EAX == 0xf:4
	if $U14:1 jump <L186>
<L13>:
	$U15:1 = EAX == 0x80000002:4
	if $U15:1 jump <L187>
<L14>:
	$U16:1 = EAX == 0x80000003:4
	if $U16:1 jump <L188>
<L15>:
	$U17:1 = EAX == 0x80000004:4
	if $U17:1 jump <L189>
<L16>:
	$tmp0 = cpuid(EAX, ECX)
	jump <L190>
<L17>:
	$tmp0 = cpuid_basic_info(EAX, ECX)
	jump <L190>
<L18>:
	$tmp0 = cpuid_Version_info(EAX, ECX)
	jump <L190>
<L19>:
	$tmp0 = cpuid_cache_tlb_info(EAX, ECX)
	jump <L190>
<L20>:
	$tmp0 = cpuid_serial_info(EAX, ECX)
	jump <L190>
<L21>:
	$tmp0 = cpuid_Deterministic_Cache_Parameters_info(EAX, ECX)
	jump <L190>
<L22>:
	$tmp0 = cpuid_MONITOR_MWAIT_Features_info(EAX, ECX)
	jump <L190>
<L23>:
	$tmp0 = cpuid_Thermal_Power_Management_info(EAX, ECX)
	jump <L190>
<L24>:
	$tmp0 = cpuid_Extended_Feature_Enumeration_info(EAX, ECX)
	jump <L190>
<L25>:
	$tmp0 = cpuid_Direct_Cache_Access_info(EAX, ECX)
	jump <L190>
<L26>:
	$tmp0 = cpuid_Architectural_Performance_Monitoring_info(EAX, ECX)
	jump <L190>
<L27>:
	$tmp0 = cpuid_Extended_Topology_info(EAX, ECX)
	jump <L190>
<L28>:
	$tmp0 = cpuid_Processor_Extended_States_info(EAX, ECX)
	jump <L190>
<L29>:
	$tmp0 = cpuid_Quality_of_Service_info(EAX, ECX)
	jump <L190>
<L30>:
	$tmp0 = cpuid_brand_part1_info(EAX, ECX)
	jump <L190>
<L31>:
	$tmp0 = cpuid_brand_part2_info(EAX, ECX)
	jump <L190>
<L32>:
	$tmp0 = cpuid_brand_part3_info(EAX, ECX)
<L33>:
	RAX = zext($tmp0:4)
	RBX = zext($tmp0[4]:4)
	RDX = zext($tmp0[8]:4)
	RCX = zext($tmp0[12]:4)
	instruction(0x195f3)
	$U1:4 = EDX
	ram[0x3ab70:8] = $U1:4
	instruction(0x195f9)
	EDX = EAX
	RDX = zext(EDX)
	instruction(0x195fb)
	$U1:8 = 0x8:8 & 0x1f:8
	$U2:4 = EDX
	EDX = EDX >> $U1:8
	RDX = zext(EDX)
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:4 = $U2:4 >> $U5:8
	$U7:4 = $U6:4 & 0x1:4
	$U4:1 = $U7:4 != 0x0:4
	$U8:1 = !$U3:1
	$U9:1 = $U8:1 && CF
	$U10:1 = $U3:1 && $U4:1
	CF = $U9:1 || $U10:1
	$U11:1 = $U1:8 == 0x1:8
	$U12:1 = $U2:4 s< 0x0:4
	$U13:1 = !$U11:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U11:1 && $U12:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = EDX s< 0x0:4
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = EDX == 0x0:4
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:4 = EDX & 0xff:4
	$U27:1 = count_ones($U26:4)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x195fe)
	$U1:4 = EBX
	ram[0x3ab68:8] = $U1:4
	instruction(0x19604)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX & 0xf:4
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x19607)
	$U1:4 = ECX
	ram[0x3ab6c:8] = $U1:4
	instruction(0x1960d)
	$U1:4 = EAX
	ram[0x3ab64:8] = $U1:4
	instruction(0x19613)
	$U1:4 = EDX
	ram[RDI] = $U1:4
	instruction(0x19615)
	EDX = EAX
	RDX = zext(EDX)
	instruction(0x19617)
	$U1:8 = 0x4:8 & 0x1f:8
	$U2:4 = EDX
	EDX = EDX >> $U1:8
	RDX = zext(EDX)
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:4 = $U2:4 >> $U5:8
	$U7:4 = $U6:4 & 0x1:4
	$U4:1 = $U7:4 != 0x0:4
	$U8:1 = !$U3:1
	$U9:1 = $U8:1 && CF
	$U10:1 = $U3:1 && $U4:1
	CF = $U9:1 || $U10:1
	$U11:1 = $U1:8 == 0x1:8
	$U12:1 = $U2:4 s< 0x0:4
	$U13:1 = !$U11:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U11:1 && $U12:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = EDX s< 0x0:4
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = EDX == 0x0:4
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:4 = EDX & 0xff:4
	$U27:1 = count_ones($U26:4)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1961a)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX & 0xf:4
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1961d)
	$U1:4 = EDX
	ram[RSI] = $U1:4
	instruction(0x1961f)
	EDX = EAX
	RDX = zext(EDX)
	instruction(0x19621)
	$U1:8 = 0xc:8 & 0x1f:8
	$U2:4 = EDX
	EDX = EDX >> $U1:8
	RDX = zext(EDX)
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:4 = $U2:4 >> $U5:8
	$U7:4 = $U6:4 & 0x1:4
	$U4:1 = $U7:4 != 0x0:4
	$U8:1 = !$U3:1
	$U9:1 = $U8:1 && CF
	$U10:1 = $U3:1 && $U4:1
	CF = $U9:1 || $U10:1
	$U11:1 = $U1:8 == 0x1:8
	$U12:1 = $U2:4 s< 0x0:4
	$U13:1 = !$U11:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U11:1 && $U12:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = EDX s< 0x0:4
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = EDX == 0x0:4
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:4 = EDX & 0xff:4
	$U27:1 = count_ones($U26:4)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x19624)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX & 0xf0:4
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1962a)
	$U1:4 = EDX
	ram[R8] = $U1:4
	instruction(0x1962d)
	EDX = EAX
	RDX = zext(EDX)
	instruction(0x1962f)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX & 0xf:4
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x19632)
	$U1:4 = EDX
	ram[R9] = $U1:4
	instruction(0x19635)
	$U5:4 = ram[RDI]
	CF = $U5:4 < 0xf:4
	$U6:4 = ram[RDI]
	OF = $U6:4 sborrow 0xf:4
	$U7:4 = ram[RDI]
	$U1:4 = $U7:4 - 0xf:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x19638)
	if ZF jump 0x19760:8

0x1eaa3  TEST AL,AL
0x1eaa5  JNZ 0x1ea60
<L0> (entry=0x1eaa3):
	instruction(0x1eaa3)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = AL & AL
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1eaa5)
	$U1:1 = !ZF
	if $U1:1 jump 0x1ea60:8

0x4360  ENDBR64
0x4364  TEST RSI,RSI
0x4367  JNZ 0x43d0
<L0> (entry=0x4360):
	instruction(0x4360)
	instruction(0x4364)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RSI & RSI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x4367)
	$U1:1 = !ZF
	if $U1:1 jump 0x43d0:8

0xea45  MOV R9,qword ptr [RSP + 0x20]
0xea4a  MOV qword ptr [R9 + 0x8],RAX
0xea4e  MOV dword ptr [R9 + 0x18],0x1
0xea56  CMP byte ptr [RBP],0x0
0xea5a  JNZ 0xec60
<L0> (entry=0xea45):
	instruction(0xea45)
	$U1:8 = 0x20:8 + RSP
	R9 = ram[$U1:8]
	instruction(0xea4a)
	$U1:8 = R9 + 0x8:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0xea4e)
	$U1:8 = R9 + 0x18:8
	$U2:4 = 0x1:4
	ram[$U1:8] = $U2:4
	instruction(0xea56)
	$U5:1 = ram[RBP]
	CF = $U5:1 < 0x0:1
	$U6:1 = ram[RBP]
	OF = $U6:1 sborrow 0x0:1
	$U7:1 = ram[RBP]
	$U1:1 = $U7:1 - 0x0:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xea5a)
	$U1:1 = !ZF
	if $U1:1 jump 0xec60:8

0x1b640  LEA ECX,[RAX + -0x5f]
0x1b643  CMP ECX,0x3d
0x1b646  JA 0x1b73b
<L0> (entry=0x1b640):
	instruction(0x1b640)
	$U1:8 = RAX + 0xffffffffffffffa1:8
	ECX = $U1:4
	RCX = zext(ECX)
	instruction(0x1b643)
	CF = ECX < 0x3d:4
	OF = ECX sborrow 0x3d:4
	$U1:4 = ECX - 0x3d:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1b646)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x1b73b:8

0x22030  ENDBR64
0x22034  PUSH RBP
0x22035  MOV RBP,RSP
0x22038  PUSH R15
0x2203a  PUSH R14
0x2203c  PUSH R13
0x2203e  PUSH R12
0x22040  PUSH RBX
0x22041  SUB RSP,0x88
0x22048  MOV qword ptr [RBP + -0x78],RDI
0x2204c  RDTSC
0x2204e  LEA R12,[0x1000]
0x22055  AND byte ptr [0x3be0e],0xdf
0x2205c  MOV qword ptr [0x3baf0],R12
0x22063  SHL RDX,0x20
0x22067  OR RAX,RDX
0x2206a  LEA RDX,[0x3ae80]
0x22071  MOV qword ptr [0x3aaa0],RAX
0x22078  MOV RAX,qword ptr [0x3ae80]
0x2207f  MOV qword ptr [0x3bb00],RDX
0x22086  TEST RAX,RAX
0x22089  JZ 0x22128
<L0> (entry=0x22030):
	instruction(0x22030)
	instruction(0x22034)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x22035)
	RBP = RSP
	instruction(0x22038)
	$U1:8 = R15
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x2203a)
	$U1:8 = R14
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x2203c)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x2203e)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x22040)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x22041)
	CF = RSP < 0x88:8
	OF = RSP sborrow 0x88:8
	RSP = RSP - 0x88:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x22048)
	$U1:8 = RBP + 0xffffffffffffff88:8
	$U2:8 = RDI
	ram[$U1:8] = $U2:8
	instruction(0x2204c)
	$U1:8 = rdtsc()
	EDX = $U1[4]:4
	EAX = $U1:4
	instruction(0x2204e)
	R12 = 0x1000:8
	instruction(0x22055)
	CF = 0x0:1
	OF = 0x0:1
	$U4:1 = ram[0x3be0e:8]
	$U5:1 = $U4:1 & 0xdf:1
	ram[0x3be0e:8] = $U5:1
	$U6:1 = ram[0x3be0e:8]
	SF = $U6:1 s< 0x0:1
	$U7:1 = ram[0x3be0e:8]
	ZF = $U7:1 == 0x0:1
	$U8:1 = ram[0x3be0e:8]
	$U1:1 = $U8:1 & 0xff:1
	$U2:1 = count_ones($U1:1)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2205c)
	$U1:8 = R12
	ram[0x3baf0:8] = $U1:8
	instruction(0x22063)
	$U1:8 = 0x20:8 & 0x3f:8
	$U2:8 = RDX
	RDX = RDX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RDX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RDX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RDX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RDX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x22067)
	CF = 0x0:1
	OF = 0x0:1
	RAX = RAX | RDX
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2206a)
	RDX = 0x3ae80:8
	instruction(0x22071)
	$U1:8 = RAX
	ram[0x3aaa0:8] = $U1:8
	instruction(0x22078)
	RAX = ram[0x3ae80:8]
	instruction(0x2207f)
	$U1:8 = RDX
	ram[0x3bb00:8] = $U1:8
	instruction(0x22086)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x22089)
	if ZF jump 0x22128:8

0x9b78  MOV RDX,qword ptr [RDI]
0x9b7b  MOV ESI,0xc
0x9b80  ADD RDX,qword ptr [RAX + 0x10]
0x9b84  SUB RSI,RDX
0x9b87  JMP 0x9bb0
<L0> (entry=0x9b78):
	instruction(0x9b78)
	RDX = ram[RDI]
	instruction(0x9b7b)
	RSI = 0xc:8
	instruction(0x9b80)
	$U4:8 = RAX + 0x10:8
	$U5:8 = ram[$U4:8]
	CF = RDX carry $U5:8
	$U6:8 = ram[$U4:8]
	OF = RDX scarry $U6:8
	$U7:8 = ram[$U4:8]
	RDX = RDX + $U7:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x9b84)
	CF = RSI < RDX
	OF = RSI sborrow RDX
	RSI = RSI - RDX
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x9b87)
	jump 0x9bb0:8

0x1eb40  MOV RDX,qword ptr [RBP + -0x60]
0x1eb44  MOV RSI,qword ptr [RBP + -0x70]
0x1eb48  SUB R14,0x2
0x1eb4c  CALL 0x2bfa0
<L0> (entry=0x1eb40):
	instruction(0x1eb40)
	$U1:8 = RBP + 0xffffffffffffffa0:8
	RDX = ram[$U1:8]
	instruction(0x1eb44)
	$U1:8 = RBP + 0xffffffffffffff90:8
	RSI = ram[$U1:8]
	instruction(0x1eb48)
	CF = R14 < 0x2:8
	OF = R14 sborrow 0x2:8
	R14 = R14 - 0x2:8
	SF = R14 s< 0x0:8
	ZF = R14 == 0x0:8
	$U1:8 = R14 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1eb4c)
	$U1:8 = 0x1eb51:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2bfa0:8

0x24139  MOVZX EAX,byte ptr [0x3be0c]
0x24140  ADD dword ptr [0x3b048],0x1
0x24147  AND EAX,0xfffffffc
0x2414a  OR EAX,0x1
0x2414d  MOV byte ptr [0x3be0c],AL
0x24153  LEA RAX,[0x3baf0]
0x2415a  MOV qword ptr [R15 + 0x18],RAX
0x2415e  ADD qword ptr [0x3bac0],0x1
0x24166  CMP qword ptr [0x3ad80],-0x2
0x2416e  MOV qword ptr [0x3bb10],R15
0x24175  JNZ 0x24185
<L0> (entry=0x24139):
	instruction(0x24139)
	$U1:1 = ram[0x3be0c:8]
	EAX = zext($U1:1)
	RAX = zext(EAX)
	instruction(0x24140)
	$U4:4 = ram[0x3b048:8]
	CF = $U4:4 carry 0x1:4
	$U5:4 = ram[0x3b048:8]
	OF = $U5:4 scarry 0x1:4
	$U6:4 = ram[0x3b048:8]
	$U7:4 = $U6:4 + 0x1:4
	ram[0x3b048:8] = $U7:4
	$U8:4 = ram[0x3b048:8]
	SF = $U8:4 s< 0x0:4
	$U9:4 = ram[0x3b048:8]
	ZF = $U9:4 == 0x0:4
	$U10:4 = ram[0x3b048:8]
	$U1:4 = $U10:4 & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x24147)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX & 0xfffffffc:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2414a)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX | 0x1:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2414d)
	$U1:1 = AL
	ram[0x3be0c:8] = $U1:1
	instruction(0x24153)
	RAX = 0x3baf0:8
	instruction(0x2415a)
	$U1:8 = R15 + 0x18:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x2415e)
	$U4:8 = ram[0x3bac0:8]
	CF = $U4:8 carry 0x1:8
	$U5:8 = ram[0x3bac0:8]
	OF = $U5:8 scarry 0x1:8
	$U6:8 = ram[0x3bac0:8]
	$U7:8 = $U6:8 + 0x1:8
	ram[0x3bac0:8] = $U7:8
	$U8:8 = ram[0x3bac0:8]
	SF = $U8:8 s< 0x0:8
	$U9:8 = ram[0x3bac0:8]
	ZF = $U9:8 == 0x0:8
	$U10:8 = ram[0x3bac0:8]
	$U1:8 = $U10:8 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x24166)
	$U5:8 = ram[0x3ad80:8]
	CF = $U5:8 < 0xfffffffffffffffe:8
	$U6:8 = ram[0x3ad80:8]
	OF = $U6:8 sborrow 0xfffffffffffffffe:8
	$U7:8 = ram[0x3ad80:8]
	$U1:8 = $U7:8 - 0xfffffffffffffffe:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2416e)
	$U1:8 = R15
	ram[0x3bb10:8] = $U1:8
	instruction(0x24175)
	$U1:1 = !ZF
	if $U1:1 jump 0x24185:8

0x1ee3d  OR qword ptr [RSP + RAX*0x1 + -0x8],0x0
0x1ee43  JMP 0x1e814
<L0> (entry=0x1ee3d):
	instruction(0x1ee3d)
	$U5:8 = 0xfffffffffffffff8:8 + RSP
	$U6:8 = RAX * 0x1:8
	$U4:8 = $U5:8 + $U6:8
	CF = 0x0:1
	OF = 0x0:1
	$U7:8 = ram[$U4:8]
	$U8:8 = $U7:8 | 0x0:8
	ram[$U4:8] = $U8:8
	$U9:8 = ram[$U4:8]
	SF = $U9:8 s< 0x0:8
	$U10:8 = ram[$U4:8]
	ZF = $U10:8 == 0x0:8
	$U11:8 = ram[$U4:8]
	$U1:8 = $U11:8 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ee43)
	jump 0x1e814:8

0x236d3  ADD RCX,qword ptr [RAX + 0x28]
0x236d7  ADD RCX,RDI
0x236da  CMP RCX,qword ptr [R15 + 0x360]
0x236e1  JBE 0x236ea
<L0> (entry=0x236d3):
	instruction(0x236d3)
	$U4:8 = RAX + 0x28:8
	$U5:8 = ram[$U4:8]
	CF = RCX carry $U5:8
	$U6:8 = ram[$U4:8]
	OF = RCX scarry $U6:8
	$U7:8 = ram[$U4:8]
	RCX = RCX + $U7:8
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x236d7)
	CF = RCX carry RDI
	OF = RCX scarry RDI
	RCX = RCX + RDI
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x236da)
	$U5:8 = R15 + 0x360:8
	$U6:8 = ram[$U5:8]
	CF = RCX < $U6:8
	$U7:8 = ram[$U5:8]
	OF = RCX sborrow $U7:8
	$U8:8 = ram[$U5:8]
	$U1:8 = RCX - $U8:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x236e1)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x236ea:8

0x1e89f  ADD R12,0x1
0x1e8a3  JMP 0x1e840
<L0> (entry=0x1e89f):
	instruction(0x1e89f)
	CF = R12 carry 0x1:8
	OF = R12 scarry 0x1:8
	R12 = R12 + 0x1:8
	SF = R12 s< 0x0:8
	ZF = R12 == 0x0:8
	$U1:8 = R12 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e8a3)
	jump 0x1e840:8

0x1ad48  AND dword ptr [0x3abd4],0xffffffe8
0x1ad4f  AND EAX,0xfbffffff
0x1ad54  JMP 0x1ac18
<L0> (entry=0x1ad48):
	instruction(0x1ad48)
	CF = 0x0:1
	OF = 0x0:1
	$U4:4 = ram[0x3abd4:8]
	$U5:4 = $U4:4 & 0xffffffe8:4
	ram[0x3abd4:8] = $U5:4
	$U6:4 = ram[0x3abd4:8]
	SF = $U6:4 s< 0x0:4
	$U7:4 = ram[0x3abd4:8]
	ZF = $U7:4 == 0x0:4
	$U8:4 = ram[0x3abd4:8]
	$U1:4 = $U8:4 & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ad4f)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX & 0xfbffffff:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ad54)
	jump 0x1ac18:8

0x1e480  ENDBR64
0x1e484  PUSH RBP
0x1e485  MOV RBP,RSP
0x1e488  PUSH R15
0x1e48a  PUSH R14
0x1e48c  LEA R14,[RBP + -0x50]
0x1e490  PUSH R13
0x1e492  PUSH R12
0x1e494  PUSH RBX
0x1e495  MOV RBX,RDI
0x1e498  SUB RSP,0xb8
0x1e49f  MOV qword ptr [RBP + -0xa8],RDI
0x1e4a6  MOV EDI,0x13
0x1e4ab  MOV qword ptr [RBP + -0x98],RSI
0x1e4b2  MOV RSI,R14
0x1e4b5  MOV qword ptr [RBP + -0xc0],RDX
0x1e4bc  XOR EDX,EDX
0x1e4be  MOV qword ptr [RBP + -0xc8],RCX
0x1e4c5  MOV qword ptr [RBP + -0x70],R14
0x1e4c9  CALL 0x18d70
<L0> (entry=0x1e480):
	instruction(0x1e480)
	instruction(0x1e484)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1e485)
	RBP = RSP
	instruction(0x1e488)
	$U1:8 = R15
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1e48a)
	$U1:8 = R14
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1e48c)
	$U1:8 = RBP + 0xffffffffffffffb0:8
	R14 = $U1:8
	instruction(0x1e490)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1e492)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1e494)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1e495)
	RBX = RDI
	instruction(0x1e498)
	CF = RSP < 0xb8:8
	OF = RSP sborrow 0xb8:8
	RSP = RSP - 0xb8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e49f)
	$U1:8 = RBP + 0xffffffffffffff58:8
	$U2:8 = RDI
	ram[$U1:8] = $U2:8
	instruction(0x1e4a6)
	RDI = 0x13:8
	instruction(0x1e4ab)
	$U1:8 = RBP + 0xffffffffffffff68:8
	$U2:8 = RSI
	ram[$U1:8] = $U2:8
	instruction(0x1e4b2)
	RSI = R14
	instruction(0x1e4b5)
	$U1:8 = RBP + 0xffffffffffffff40:8
	$U2:8 = RDX
	ram[$U1:8] = $U2:8
	instruction(0x1e4bc)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX ^ EDX
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e4be)
	$U1:8 = RBP + 0xffffffffffffff38:8
	$U2:8 = RCX
	ram[$U1:8] = $U2:8
	instruction(0x1e4c5)
	$U1:8 = RBP + 0xffffffffffffff90:8
	$U2:8 = R14
	ram[$U1:8] = $U2:8
	instruction(0x1e4c9)
	$U1:8 = 0x1e4ce:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x18d70:8

0x22379  JMP 0x22428
<L0> (entry=0x22379):
	jump 0x22428:8

0x7a07  CMP word ptr [R13 + 0x15],0x0
0x7a0d  JZ 0x7a70
<L0> (entry=0x7a07):
	instruction(0x7a07)
	$U5:8 = R13 + 0x15:8
	$U6:2 = ram[$U5:8]
	CF = $U6:2 < 0x0:2
	$U7:2 = ram[$U5:8]
	OF = $U7:2 sborrow 0x0:2
	$U8:2 = ram[$U5:8]
	$U1:2 = $U8:2 - 0x0:2
	SF = $U1:2 s< 0x0:2
	ZF = $U1:2 == 0x0:2
	$U2:2 = $U1:2 & 0xff:2
	$U3:1 = count_ones($U2:2)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7a0d)
	if ZF jump 0x7a70:8

0x279e3  RET
<L0> (entry=0x279e3):
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x2823a  MOVLPD XMM1, qword ptr [RDI]
0x2823e  MOVLPD XMM2, qword ptr [RSI]
0x28242  MOVHPD XMM1, qword ptr [RDI + 0x8]
0x28247  MOVHPD XMM2, qword ptr [RSI + 0x8]
0x2824c  PXOR XMM0, XMM0
0x28250  PCMPEQB XMM0, XMM1
0x28254  PCMPEQB XMM1, XMM2
0x28258  PSUBB XMM1, XMM0
0x2825c  PMOVMSKB EDX, XMM1
0x28260  SUB EDX,0xffff
0x28266  JNZ 0x29640
<L0> (entry=0x2823a):
	instruction(0x2823a)
	XMM1_Qa = ram[RDI]
	instruction(0x2823e)
	XMM2_Qa = ram[RSI]
	instruction(0x28242)
	$U1:8 = RDI + 0x8:8
	XMM1_Qb = ram[$U1:8]
	instruction(0x28247)
	$U1:8 = RSI + 0x8:8
	XMM2_Qb = ram[$U1:8]
	instruction(0x2824c)
	XMM0 = XMM0 ^ XMM0
	instruction(0x28250)
	$U1:1 = XMM0_Ba == XMM1_Ba
	XMM0_Ba = $U1:1 * 0xff:1
	$U2:1 = XMM0_Bb == XMM1_Bb
	XMM0_Bb = $U2:1 * 0xff:1
	$U3:1 = XMM0_Bc == XMM1_Bc
	XMM0_Bc = $U3:1 * 0xff:1
	$U4:1 = XMM0_Bd == XMM1_Bd
	XMM0_Bd = $U4:1 * 0xff:1
	$U5:1 = XMM0_Be == XMM1_Be
	XMM0_Be = $U5:1 * 0xff:1
	$U6:1 = XMM0_Bf == XMM1_Bf
	XMM0_Bf = $U6:1 * 0xff:1
	$U7:1 = XMM0_Bg == XMM1_Bg
	XMM0_Bg = $U7:1 * 0xff:1
	$U8:1 = XMM0_Bh == XMM1_Bh
	XMM0_Bh = $U8:1 * 0xff:1
	$U9:1 = XMM0_Bi == XMM1_Bi
	XMM0_Bi = $U9:1 * 0xff:1
	$U10:1 = XMM0_Bj == XMM1_Bj
	XMM0_Bj = $U10:1 * 0xff:1
	$U11:1 = XMM0_Bk == XMM1_Bk
	XMM0_Bk = $U11:1 * 0xff:1
	$U12:1 = XMM0_Bl == XMM1_Bl
	XMM0_Bl = $U12:1 * 0xff:1
	$U13:1 = XMM0_Bm == XMM1_Bm
	XMM0_Bm = $U13:1 * 0xff:1
	$U14:1 = XMM0_Bn == XMM1_Bn
	XMM0_Bn = $U14:1 * 0xff:1
	$U15:1 = XMM0_Bo == XMM1_Bo
	XMM0_Bo = $U15:1 * 0xff:1
	$U16:1 = XMM0_Bp == XMM1_Bp
	XMM0_Bp = $U16:1 * 0xff:1
	instruction(0x28254)
	$U1:1 = XMM1_Ba == XMM2_Ba
	XMM1_Ba = $U1:1 * 0xff:1
	$U2:1 = XMM1_Bb == XMM2_Bb
	XMM1_Bb = $U2:1 * 0xff:1
	$U3:1 = XMM1_Bc == XMM2_Bc
	XMM1_Bc = $U3:1 * 0xff:1
	$U4:1 = XMM1_Bd == XMM2_Bd
	XMM1_Bd = $U4:1 * 0xff:1
	$U5:1 = XMM1_Be == XMM2_Be
	XMM1_Be = $U5:1 * 0xff:1
	$U6:1 = XMM1_Bf == XMM2_Bf
	XMM1_Bf = $U6:1 * 0xff:1
	$U7:1 = XMM1_Bg == XMM2_Bg
	XMM1_Bg = $U7:1 * 0xff:1
	$U8:1 = XMM1_Bh == XMM2_Bh
	XMM1_Bh = $U8:1 * 0xff:1
	$U9:1 = XMM1_Bi == XMM2_Bi
	XMM1_Bi = $U9:1 * 0xff:1
	$U10:1 = XMM1_Bj == XMM2_Bj
	XMM1_Bj = $U10:1 * 0xff:1
	$U11:1 = XMM1_Bk == XMM2_Bk
	XMM1_Bk = $U11:1 * 0xff:1
	$U12:1 = XMM1_Bl == XMM2_Bl
	XMM1_Bl = $U12:1 * 0xff:1
	$U13:1 = XMM1_Bm == XMM2_Bm
	XMM1_Bm = $U13:1 * 0xff:1
	$U14:1 = XMM1_Bn == XMM2_Bn
	XMM1_Bn = $U14:1 * 0xff:1
	$U15:1 = XMM1_Bo == XMM2_Bo
	XMM1_Bo = $U15:1 * 0xff:1
	$U16:1 = XMM1_Bp == XMM2_Bp
	XMM1_Bp = $U16:1 * 0xff:1
	instruction(0x28258)
	XMM1_Ba = XMM1_Ba - XMM0_Ba
	XMM1_Bb = XMM1_Bb - XMM0_Bb
	XMM1_Bc = XMM1_Bc - XMM0_Bc
	XMM1_Bd = XMM1_Bd - XMM0_Bd
	XMM1_Be = XMM1_Be - XMM0_Be
	XMM1_Bf = XMM1_Bf - XMM0_Bf
	XMM1_Bg = XMM1_Bg - XMM0_Bg
	XMM1_Bh = XMM1_Bh - XMM0_Bh
	XMM1_Bi = XMM1_Bi - XMM0_Bi
	XMM1_Bj = XMM1_Bj - XMM0_Bj
	XMM1_Bk = XMM1_Bk - XMM0_Bk
	XMM1_Bl = XMM1_Bl - XMM0_Bl
	XMM1_Bm = XMM1_Bm - XMM0_Bm
	XMM1_Bn = XMM1_Bn - XMM0_Bn
	XMM1_Bo = XMM1_Bo - XMM0_Bo
	XMM1_Bp = XMM1_Bp - XMM0_Bp
	instruction(0x2825c)
	$U1:2 = 0x0:2
	$U2:16 = XMM1 >> 0x7:8
	$U2:16 = $U2:16 & 0x1:16
	$U3:2 = $U1:2 & 0xfffffffffffffffe:2
	$U4:2 = zext($U2:1)
	$U4:2 = $U4:2 & 0x1:2
	$U4:2 = $U4:2 << 0x0:8
	$U1:2 = $U3:2 | $U4:2
	$U5:16 = XMM1 >> 0xf:8
	$U5:16 = $U5:16 & 0x1:16
	$U6:2 = $U1:2 & 0xfffffffffffffffd:2
	$U7:2 = zext($U5:1)
	$U7:2 = $U7:2 & 0x1:2
	$U7:2 = $U7:2 << 0x1:8
	$U1:2 = $U6:2 | $U7:2
	$U8:16 = XMM1 >> 0x17:8
	$U8:16 = $U8:16 & 0x1:16
	$U9:2 = $U1:2 & 0xfffffffffffffffb:2
	$U10:2 = zext($U8:1)
	$U10:2 = $U10:2 & 0x1:2
	$U10:2 = $U10:2 << 0x2:8
	$U1:2 = $U9:2 | $U10:2
	$U11:16 = XMM1 >> 0x1f:8
	$U11:16 = $U11:16 & 0x1:16
	$U12:2 = $U1:2 & 0xfffffffffffffff7:2
	$U13:2 = zext($U11:1)
	$U13:2 = $U13:2 & 0x1:2
	$U13:2 = $U13:2 << 0x3:8
	$U1:2 = $U12:2 | $U13:2
	$U14:16 = XMM1 >> 0x27:8
	$U14:16 = $U14:16 & 0x1:16
	$U15:2 = $U1:2 & 0xffffffffffffffef:2
	$U16:2 = zext($U14:1)
	$U16:2 = $U16:2 & 0x1:2
	$U16:2 = $U16:2 << 0x4:8
	$U1:2 = $U15:2 | $U16:2
	$U17:16 = XMM1 >> 0x2f:8
	$U17:16 = $U17:16 & 0x1:16
	$U18:2 = $U1:2 & 0xffffffffffffffdf:2
	$U19:2 = zext($U17:1)
	$U19:2 = $U19:2 & 0x1:2
	$U19:2 = $U19:2 << 0x5:8
	$U1:2 = $U18:2 | $U19:2
	$U20:16 = XMM1 >> 0x37:8
	$U20:16 = $U20:16 & 0x1:16
	$U21:2 = $U1:2 & 0xffffffffffffffbf:2
	$U22:2 = zext($U20:1)
	$U22:2 = $U22:2 & 0x1:2
	$U22:2 = $U22:2 << 0x6:8
	$U1:2 = $U21:2 | $U22:2
	$U23:16 = XMM1 >> 0x3f:8
	$U23:16 = $U23:16 & 0x1:16
	$U24:2 = $U1:2 & 0xffffffffffffff7f:2
	$U25:2 = zext($U23:1)
	$U25:2 = $U25:2 & 0x1:2
	$U25:2 = $U25:2 << 0x7:8
	$U1:2 = $U24:2 | $U25:2
	$U26:16 = XMM1 >> 0x47:8
	$U26:16 = $U26:16 & 0x1:16
	$U27:2 = $U1:2 & 0xfffffffffffffeff:2
	$U28:2 = zext($U26:1)
	$U28:2 = $U28:2 & 0x1:2
	$U28:2 = $U28:2 << 0x8:8
	$U1:2 = $U27:2 | $U28:2
	$U29:16 = XMM1 >> 0x4f:8
	$U29:16 = $U29:16 & 0x1:16
	$U30:2 = $U1:2 & 0xfffffffffffffdff:2
	$U31:2 = zext($U29:1)
	$U31:2 = $U31:2 & 0x1:2
	$U31:2 = $U31:2 << 0x9:8
	$U1:2 = $U30:2 | $U31:2
	$U32:16 = XMM1 >> 0x57:8
	$U32:16 = $U32:16 & 0x1:16
	$U33:2 = $U1:2 & 0xfffffffffffffbff:2
	$U34:2 = zext($U32:1)
	$U34:2 = $U34:2 & 0x1:2
	$U34:2 = $U34:2 << 0xa:8
	$U1:2 = $U33:2 | $U34:2
	$U35:16 = XMM1 >> 0x5f:8
	$U35:16 = $U35:16 & 0x1:16
	$U36:2 = $U1:2 & 0xfffffffffffff7ff:2
	$U37:2 = zext($U35:1)
	$U37:2 = $U37:2 & 0x1:2
	$U37:2 = $U37:2 << 0xb:8
	$U1:2 = $U36:2 | $U37:2
	$U38:16 = XMM1 >> 0x67:8
	$U38:16 = $U38:16 & 0x1:16
	$U39:2 = $U1:2 & 0xffffffffffffefff:2
	$U40:2 = zext($U38:1)
	$U40:2 = $U40:2 & 0x1:2
	$U40:2 = $U40:2 << 0xc:8
	$U1:2 = $U39:2 | $U40:2
	$U41:16 = XMM1 >> 0x6f:8
	$U41:16 = $U41:16 & 0x1:16
	$U42:2 = $U1:2 & 0xffffffffffffdfff:2
	$U43:2 = zext($U41:1)
	$U43:2 = $U43:2 & 0x1:2
	$U43:2 = $U43:2 << 0xd:8
	$U1:2 = $U42:2 | $U43:2
	$U44:16 = XMM1 >> 0x77:8
	$U44:16 = $U44:16 & 0x1:16
	$U45:2 = $U1:2 & 0xffffffffffffbfff:2
	$U46:2 = zext($U44:1)
	$U46:2 = $U46:2 & 0x1:2
	$U46:2 = $U46:2 << 0xe:8
	$U1:2 = $U45:2 | $U46:2
	$U47:16 = XMM1 >> 0x7f:8
	$U47:16 = $U47:16 & 0x1:16
	$U48:2 = $U1:2 & 0xffffffffffff7fff:2
	$U49:2 = zext($U47:1)
	$U49:2 = $U49:2 & 0x1:2
	$U49:2 = $U49:2 << 0xf:8
	$U1:2 = $U48:2 | $U49:2
	EDX = zext($U1:2)
	RDX = zext(EDX)
	instruction(0x28260)
	CF = EDX < 0xffff:4
	OF = EDX sborrow 0xffff:4
	EDX = EDX - 0xffff:4
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x28266)
	$U1:1 = !ZF
	if $U1:1 jump 0x29640:8

0x1b73b  TEST byte ptr [0x3ab6f],0x10
0x1b742  JZ 0x1b5f7
<L0> (entry=0x1b73b):
	instruction(0x1b73b)
	CF = 0x0:1
	OF = 0x0:1
	$U5:1 = ram[0x3ab6f:8]
	$U1:1 = $U5:1 & 0x10:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1b742)
	if ZF jump 0x1b5f7:8

0x1e6a7  MOV EAX,dword ptr [0x3c220]
0x1e6ad  MOV RCX,qword ptr [0x3c228]
0x1e6b4  MOV qword ptr [RBP + -0x58],0x1
0x1e6bc  MOV qword ptr [RBP + -0x60],RAX
0x1e6c0  MOV qword ptr [RBP + -0x68],RCX
0x1e6c4  CMP RAX,0x1
0x1e6c8  JBE 0x1e742
<L0> (entry=0x1e6a7):
	instruction(0x1e6a7)
	EAX = ram[0x3c220:8]
	RAX = zext(EAX)
	instruction(0x1e6ad)
	RCX = ram[0x3c228:8]
	instruction(0x1e6b4)
	$U1:8 = RBP + 0xffffffffffffffa8:8
	$U2:8 = 0x1:8
	ram[$U1:8] = $U2:8
	instruction(0x1e6bc)
	$U1:8 = RBP + 0xffffffffffffffa0:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1e6c0)
	$U1:8 = RBP + 0xffffffffffffff98:8
	$U2:8 = RCX
	ram[$U1:8] = $U2:8
	instruction(0x1e6c4)
	CF = RAX < 0x1:8
	OF = RAX sborrow 0x1:8
	$U1:8 = RAX - 0x1:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e6c8)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x1e742:8

0x4b1e  MOV RAX,qword ptr [RBP + -0x498]
0x4b25  MOV R12,qword ptr [R15 + 0x10]
0x4b29  MOV qword ptr [RBP + -0x470],R15
0x4b30  MOV qword ptr [RBP + -0x460],RAX
0x4b37  MOV RAX,qword ptr [RBP + -0x4d8]
0x4b3e  MOV qword ptr [RBP + -0x468],RAX
0x4b45  MOV RAX,qword ptr [R12]
0x4b49  TEST RAX,RAX
0x4b4c  JZ 0x5921
<L0> (entry=0x4b1e):
	instruction(0x4b1e)
	$U1:8 = RBP + 0xfffffffffffffb68:8
	RAX = ram[$U1:8]
	instruction(0x4b25)
	$U1:8 = R15 + 0x10:8
	R12 = ram[$U1:8]
	instruction(0x4b29)
	$U1:8 = RBP + 0xfffffffffffffb90:8
	$U2:8 = R15
	ram[$U1:8] = $U2:8
	instruction(0x4b30)
	$U1:8 = RBP + 0xfffffffffffffba0:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x4b37)
	$U1:8 = RBP + 0xfffffffffffffb28:8
	RAX = ram[$U1:8]
	instruction(0x4b3e)
	$U1:8 = RBP + 0xfffffffffffffb98:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x4b45)
	RAX = ram[R12]
	instruction(0x4b49)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x4b4c)
	if ZF jump 0x5921:8

0x4b52  MOV RBX,qword ptr [RBP + -0x4c0]
0x4b59  XOR R14D,R14D
0x4b5c  MOV qword ptr [RBP + -0x4e0],RBX
0x4b63  CMP RAX,0x1
0x4b67  JNZ 0x4d3b
<L0> (entry=0x4b52):
	instruction(0x4b52)
	$U1:8 = RBP + 0xfffffffffffffb40:8
	RBX = ram[$U1:8]
	instruction(0x4b59)
	CF = 0x0:1
	OF = 0x0:1
	R14D = R14D ^ R14D
	R14 = zext(R14D)
	SF = R14D s< 0x0:4
	ZF = R14D == 0x0:4
	$U1:4 = R14D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x4b5c)
	$U1:8 = RBP + 0xfffffffffffffb20:8
	$U2:8 = RBX
	ram[$U1:8] = $U2:8
	instruction(0x4b63)
	CF = RAX < 0x1:8
	OF = RAX sborrow 0x1:8
	$U1:8 = RAX - 0x1:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x4b67)
	$U1:1 = !ZF
	if $U1:1 jump 0x4d3b:8

0x27b20  RET
<L0> (entry=0x27b20):
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x10584  MOV qword ptr [RBP + RCX*0x1 + -0x430],RBX
0x1058c  ADD R12D,0x1
0x10590  CMP AL,0x25
0x10592  JZ 0x10678
<L0> (entry=0x10584):
	instruction(0x10584)
	$U2:8 = 0xfffffffffffffbd0:8 + RBP
	$U3:8 = RCX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	$U4:8 = RBX
	ram[$U1:8] = $U4:8
	instruction(0x1058c)
	CF = R12D carry 0x1:4
	OF = R12D scarry 0x1:4
	R12D = R12D + 0x1:4
	R12 = zext(R12D)
	SF = R12D s< 0x0:4
	ZF = R12D == 0x0:4
	$U1:4 = R12D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x10590)
	CF = AL < 0x25:1
	OF = AL sborrow 0x25:1
	$U1:1 = AL - 0x25:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x10592)
	if ZF jump 0x10678:8

0x14543  MOV RCX,qword ptr [RDX + 0x8]
0x14547  TEST byte ptr [RDI + 0x31e],0x20
0x1454e  JNZ 0x145b0
<L0> (entry=0x14543):
	instruction(0x14543)
	$U1:8 = RDX + 0x8:8
	RCX = ram[$U1:8]
	instruction(0x14547)
	$U5:8 = RDI + 0x31e:8
	CF = 0x0:1
	OF = 0x0:1
	$U6:1 = ram[$U5:8]
	$U1:1 = $U6:1 & 0x20:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1454e)
	$U1:1 = !ZF
	if $U1:1 jump 0x145b0:8

0x1f235  ADD RBP,qword ptr [RBX + 0x8]
0x1f239  MOV qword ptr [RBX],RBP
0x1f23c  MOVZX EDX,byte ptr [RBP]
0x1f240  CMP DL,0x3a
0x1f243  JNZ 0x1f262
<L0> (entry=0x1f235):
	instruction(0x1f235)
	$U4:8 = RBX + 0x8:8
	$U5:8 = ram[$U4:8]
	CF = RBP carry $U5:8
	$U6:8 = ram[$U4:8]
	OF = RBP scarry $U6:8
	$U7:8 = ram[$U4:8]
	RBP = RBP + $U7:8
	SF = RBP s< 0x0:8
	ZF = RBP == 0x0:8
	$U1:8 = RBP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1f239)
	$U1:8 = RBP
	ram[RBX] = $U1:8
	instruction(0x1f23c)
	$U1:1 = ram[RBP]
	EDX = zext($U1:1)
	RDX = zext(EDX)
	instruction(0x1f240)
	CF = DL < 0x3a:1
	OF = DL sborrow 0x3a:1
	$U1:1 = DL - 0x3a:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1f243)
	$U1:1 = !ZF
	if $U1:1 jump 0x1f262:8

0x4af8  MOV RAX,qword ptr [R15 + 0x68]
0x4afc  MOV RAX,qword ptr [RAX + 0x8]
0x4b00  MOV qword ptr [RBP + -0x498],RAX
0x4b07  TEST byte ptr [R15 + 0x31e],0x20
0x4b0f  JZ 0x4b1e
<L0> (entry=0x4af8):
	instruction(0x4af8)
	$U1:8 = R15 + 0x68:8
	RAX = ram[$U1:8]
	instruction(0x4afc)
	$U1:8 = RAX + 0x8:8
	RAX = ram[$U1:8]
	instruction(0x4b00)
	$U1:8 = RBP + 0xfffffffffffffb68:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x4b07)
	$U5:8 = R15 + 0x31e:8
	CF = 0x0:1
	OF = 0x0:1
	$U6:1 = ram[$U5:8]
	$U1:1 = $U6:1 & 0x20:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x4b0f)
	if ZF jump 0x4b1e:8

0x2057b  TEST R11B,R11B
0x2057e  JZ 0x2058a
<L0> (entry=0x2057b):
	instruction(0x2057b)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = R11B & R11B
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2057e)
	if ZF jump 0x2058a:8

0x23423  ADD RAX,0x13
0x23427  AND RAX,-0x8
0x2342b  LEA RAX,[RDI + RAX*0x1 + 0x7]
0x23430  AND RAX,-0x8
0x23434  ADD RDX,RAX
0x23437  LEA RAX,[RDX + R10*0x1]
0x2343b  CMP R9,RAX
0x2343e  JBE 0x24725
<L0> (entry=0x23423):
	instruction(0x23423)
	CF = RAX carry 0x13:8
	OF = RAX scarry 0x13:8
	RAX = RAX + 0x13:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x23427)
	CF = 0x0:1
	OF = 0x0:1
	RAX = RAX & 0xfffffffffffffff8:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2342b)
	$U2:8 = 0x7:8 + RDI
	$U3:8 = RAX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	RAX = $U1:8
	instruction(0x23430)
	CF = 0x0:1
	OF = 0x0:1
	RAX = RAX & 0xfffffffffffffff8:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x23434)
	CF = RDX carry RAX
	OF = RDX scarry RAX
	RDX = RDX + RAX
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x23437)
	$U2:8 = R10 * 0x1:8
	$U1:8 = RDX + $U2:8
	RAX = $U1:8
	instruction(0x2343b)
	CF = R9 < RAX
	OF = R9 sborrow RAX
	$U1:8 = R9 - RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2343e)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x24725:8

0x23796  CMP qword ptr [0x3bb28],0x0
0x2379e  JZ 0x25302
<L0> (entry=0x23796):
	instruction(0x23796)
	$U5:8 = ram[0x3bb28:8]
	CF = $U5:8 < 0x0:8
	$U6:8 = ram[0x3bb28:8]
	OF = $U6:8 sborrow 0x0:8
	$U7:8 = ram[0x3bb28:8]
	$U1:8 = $U7:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2379e)
	if ZF jump 0x25302:8

0x4300  ENDBR64
0x4304  RET
<L0> (entry=0x4300):
	instruction(0x4300)
	instruction(0x4304)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x2075f  JMP 0x20538
<L0> (entry=0x2075f):
	jump 0x20538:8

0x7cf8  LEA RAX,[RBX + 0x17]
0x7cfc  MOV RCX,RSP
0x7cff  MOV RDX,RAX
0x7d02  AND RAX,-0x1000
0x7d08  SUB RCX,RAX
0x7d0b  AND RDX,-0x10
0x7d0f  CMP RSP,RCX
0x7d12  JZ 0x7d29
<L0> (entry=0x7cf8):
	instruction(0x7cf8)
	$U1:8 = RBX + 0x17:8
	RAX = $U1:8
	instruction(0x7cfc)
	RCX = RSP
	instruction(0x7cff)
	RDX = RAX
	instruction(0x7d02)
	CF = 0x0:1
	OF = 0x0:1
	RAX = RAX & 0xfffffffffffff000:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7d08)
	CF = RCX < RAX
	OF = RCX sborrow RAX
	RCX = RCX - RAX
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7d0b)
	CF = 0x0:1
	OF = 0x0:1
	RDX = RDX & 0xfffffffffffffff0:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7d0f)
	CF = RSP < RCX
	OF = RSP sborrow RCX
	$U1:8 = RSP - RCX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7d12)
	if ZF jump 0x7d29:8

0x27faf  NOP
0x27fb0  MOV RBX,qword ptr [RDI]
0x27fb3  MOV R12,qword ptr [RDI + 0x10]
0x27fb7  MOV R13,qword ptr [RDI + 0x18]
0x27fbb  MOV R14,qword ptr [RDI + 0x20]
0x27fbf  MOV R15,qword ptr [RDI + 0x28]
0x27fc3  MOV EAX,ESI
0x27fc5  MOV RSP,R8
0x27fc8  MOV RBP,R9
0x27fcb  NOP
0x27fcc  JMP RDX
<L0> (entry=0x27faf):
	instruction(0x27faf)
	instruction(0x27fb0)
	RBX = ram[RDI]
	instruction(0x27fb3)
	$U1:8 = RDI + 0x10:8
	R12 = ram[$U1:8]
	instruction(0x27fb7)
	$U1:8 = RDI + 0x18:8
	R13 = ram[$U1:8]
	instruction(0x27fbb)
	$U1:8 = RDI + 0x20:8
	R14 = ram[$U1:8]
	instruction(0x27fbf)
	$U1:8 = RDI + 0x28:8
	R15 = ram[$U1:8]
	instruction(0x27fc3)
	EAX = ESI
	RAX = zext(EAX)
	instruction(0x27fc5)
	RSP = R8
	instruction(0x27fc8)
	RBP = R9
	instruction(0x27fcb)
	instruction(0x27fcc)
	jump RDX

0x239db  CMP dword ptr [RBP + -0x38],0x2
0x239df  JZ 0x2572a
<L0> (entry=0x239db):
	instruction(0x239db)
	$U5:8 = RBP + 0xffffffffffffffc8:8
	$U6:4 = ram[$U5:8]
	CF = $U6:4 < 0x2:4
	$U7:4 = ram[$U5:8]
	OF = $U7:4 sborrow 0x2:4
	$U8:4 = ram[$U5:8]
	$U1:4 = $U8:4 - 0x2:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x239df)
	if ZF jump 0x2572a:8

0x1ab80  MOV RCX,R14
0x1ab83  MOV RDX,R15
0x1ab86  MOV RSI,RBP
0x1ab89  MOV EDI,0xf
0x1ab8e  MOV qword ptr [RSP + 0xa0],R12
0x1ab96  MOV qword ptr [RSP + 0xb0],-0x1
0x1aba2  MOV qword ptr [RSP + 0xa8],0x1
0x1abae  CALL 0x18820
<L0> (entry=0x1ab80):
	instruction(0x1ab80)
	RCX = R14
	instruction(0x1ab83)
	RDX = R15
	instruction(0x1ab86)
	RSI = RBP
	instruction(0x1ab89)
	RDI = 0xf:8
	instruction(0x1ab8e)
	$U1:8 = 0xa0:8 + RSP
	$U2:8 = R12
	ram[$U1:8] = $U2:8
	instruction(0x1ab96)
	$U1:8 = 0xb0:8 + RSP
	$U2:8 = 0xffffffffffffffff:8
	ram[$U1:8] = $U2:8
	instruction(0x1aba2)
	$U1:8 = 0xa8:8 + RSP
	$U2:8 = 0x1:8
	ram[$U1:8] = $U2:8
	instruction(0x1abae)
	$U1:8 = 0x1abb3:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x18820:8

0xe944  LEA RAX,[RBX + RBX*0x4]
0xe948  MOV RDI,R12
0xe94b  SHL RAX,0x5
0xe94f  ADD dword ptr [RCX + RAX*0x1 + 0x8],0x1
0xe954  MOV RAX,qword ptr [0x3bac0]
0xe95b  POP RBX
0xe95c  MOV qword ptr [RBP + 0x480],RAX
0xe963  ADD RAX,0x1
0xe967  POP RBP
0xe968  MOV qword ptr [0x3bac0],RAX
0xe96f  POP R12
0xe971  JMP qword ptr [0x3aa78]
<L0> (entry=0xe944):
	instruction(0xe944)
	$U2:8 = RBX * 0x4:8
	$U1:8 = RBX + $U2:8
	RAX = $U1:8
	instruction(0xe948)
	RDI = R12
	instruction(0xe94b)
	$U1:8 = 0x5:8 & 0x3f:8
	$U2:8 = RAX
	RAX = RAX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RAX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RAX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RAX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RAX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0xe94f)
	$U5:8 = 0x8:8 + RCX
	$U6:8 = RAX * 0x1:8
	$U4:8 = $U5:8 + $U6:8
	$U7:4 = ram[$U4:8]
	CF = $U7:4 carry 0x1:4
	$U8:4 = ram[$U4:8]
	OF = $U8:4 scarry 0x1:4
	$U9:4 = ram[$U4:8]
	$U10:4 = $U9:4 + 0x1:4
	ram[$U4:8] = $U10:4
	$U11:4 = ram[$U4:8]
	SF = $U11:4 s< 0x0:4
	$U12:4 = ram[$U4:8]
	ZF = $U12:4 == 0x0:4
	$U13:4 = ram[$U4:8]
	$U1:4 = $U13:4 & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xe954)
	RAX = ram[0x3bac0:8]
	instruction(0xe95b)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0xe95c)
	$U1:8 = RBP + 0x480:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0xe963)
	CF = RAX carry 0x1:8
	OF = RAX scarry 0x1:8
	RAX = RAX + 0x1:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xe967)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBP = $U1:8
	instruction(0xe968)
	$U1:8 = RAX
	ram[0x3bac0:8] = $U1:8
	instruction(0xe96f)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R12 = $U1:8
	instruction(0xe971)
	$U1:8 = ram[0x3aa78:8]
	jump $U1:8

0x233af  CMP qword ptr [RBP + -0x268],R12
0x233b6  JZ 0x2374b
<L0> (entry=0x233af):
	instruction(0x233af)
	$U5:8 = RBP + 0xfffffffffffffd98:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < R12
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow R12
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - R12
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x233b6)
	if ZF jump 0x2374b:8

0x1a1d5  MOV EAX,dword ptr [RSP + -0x74]
0x1a1d9  TEST EAX,EAX
0x1a1db  JZ 0x1a1e4
<L0> (entry=0x1a1d5):
	instruction(0x1a1d5)
	$U1:8 = 0xffffffffffffff8c:8 + RSP
	EAX = ram[$U1:8]
	RAX = zext(EAX)
	instruction(0x1a1d9)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1a1db)
	if ZF jump 0x1a1e4:8

0x979f  MOV qword ptr [R12],RAX
0x97a3  MOV RAX,qword ptr [0x39aa0]
0x97aa  MOV R14,qword ptr [RAX]
0x97ad  TEST R14,R14
0x97b0  JZ 0x9b12
<L0> (entry=0x979f):
	instruction(0x979f)
	$U1:8 = RAX
	ram[R12] = $U1:8
	instruction(0x97a3)
	RAX = ram[0x39aa0:8]
	instruction(0x97aa)
	R14 = ram[RAX]
	instruction(0x97ad)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R14 & R14
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x97b0)
	if ZF jump 0x9b12:8

0x433b  RET
<L0> (entry=0x433b):
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x1f330  ENDBR64
0x1f334  CMP EDI,0x16
0x1f337  JA 0x1f350
<L0> (entry=0x1f330):
	instruction(0x1f330)
	instruction(0x1f334)
	CF = EDI < 0x16:4
	OF = EDI sborrow 0x16:4
	$U1:4 = EDI - 0x16:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1f337)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x1f350:8

0x225ee  ADD RDI,RSI
0x225f1  MOV qword ptr [RBP + -0x68],RDI
0x225f5  JMP 0x222ee
<L0> (entry=0x225ee):
	instruction(0x225ee)
	CF = RDI carry RSI
	OF = RDI scarry RSI
	RDI = RDI + RSI
	SF = RDI s< 0x0:8
	ZF = RDI == 0x0:8
	$U1:8 = RDI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x225f1)
	$U1:8 = RBP + 0xffffffffffffff98:8
	$U2:8 = RDI
	ram[$U1:8] = $U2:8
	instruction(0x225f5)
	jump 0x222ee:8

0x1abb3  MOVQ XMM2, qword ptr [RSP + 0x18]
0x1abb9  MOV RSI,R14
0x1abbc  MOVDQA XMM0, xmmword ptr [RSP + 0x20]
0x1abc2  MOVDQA XMM1, xmmword ptr [RSP]
0x1abc7  LEA RDX,[0x1f8e0]
0x1abce  MOV EDI,0x18
0x1abd3  MOVHPS XMM2, qword ptr [RSP + 0x30]
0x1abd8  MOVUPS xmmword ptr [0x3acb0], XMM0
0x1abdf  MOVUPS xmmword ptr [0x3aca0], XMM2
0x1abe6  MOVUPS xmmword ptr [0x3acc0], XMM1
0x1abed  CALL 0x18d70
<L0> (entry=0x1abb3):
	instruction(0x1abb3)
	$U1:8 = 0x18:8 + RSP
	$U2:8 = ram[$U1:8]
	XMM2 = zext($U2:8)
	instruction(0x1abb9)
	RSI = R14
	instruction(0x1abbc)
	$U1:8 = 0x20:8 + RSP
	XMM0 = ram[$U1:8]
	instruction(0x1abc2)
	XMM1 = ram[RSP]
	instruction(0x1abc7)
	RDX = 0x1f8e0:8
	instruction(0x1abce)
	RDI = 0x18:8
	instruction(0x1abd3)
	$U1:8 = 0x30:8 + RSP
	XMM2_Qb = ram[$U1:8]
	instruction(0x1abd8)
	$U1:16 = XMM0
	ram[0x3acb0:8] = $U1:16
	instruction(0x1abdf)
	$U1:16 = XMM2
	ram[0x3aca0:8] = $U1:16
	instruction(0x1abe6)
	$U1:16 = XMM1
	ram[0x3acc0:8] = $U1:16
	instruction(0x1abed)
	$U1:8 = 0x1abf2:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x18d70:8

0x23364  MOVDQU XMM0, xmmword ptr [RAX + 0x10]
0x23369  MOVDQU XMM2, xmmword ptr [RAX + 0x20]
0x2336e  SHUFPD XMM0, XMM2, 0x2
0x23373  MOVUPS xmmword ptr [R15 + 0x470], XMM0
0x2337b  NOP dword ptr [RAX + RAX*0x1]
0x23380  ADD RAX,0x38
0x23384  CMP R12,RAX
0x23387  JA 0x23330
<L0> (entry=0x23364):
	instruction(0x23364)
	$U1:8 = RAX + 0x10:8
	XMM0 = ram[$U1:8]
	instruction(0x23369)
	$U1:8 = RAX + 0x20:8
	XMM2 = ram[$U1:8]
	instruction(0x2336e)
	arg0 = 0x2:8
	XMM0 = shufpd(XMM0, XMM2)
	instruction(0x23373)
	$U1:8 = R15 + 0x470:8
	$U2:16 = XMM0
	ram[$U1:8] = $U2:16
	instruction(0x2337b)
	$U2:8 = RAX * 0x1:8
	$U1:8 = RAX + $U2:8
	instruction(0x23380)
	CF = RAX carry 0x38:8
	OF = RAX scarry 0x38:8
	RAX = RAX + 0x38:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x23384)
	CF = R12 < RAX
	OF = R12 sborrow RAX
	$U1:8 = R12 - RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23387)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x23330:8

0x1b41a  MOV R10D,dword ptr [RSP + 0x88]
0x1b422  MOV EAX,dword ptr [RSP + 0x8c]
0x1b429  MOV EDX,dword ptr [RSP + 0x90]
0x1b430  CMP R10D,0x6
0x1b434  JZ 0x1b5a0
<L0> (entry=0x1b41a):
	instruction(0x1b41a)
	$U1:8 = 0x88:8 + RSP
	R10D = ram[$U1:8]
	R10 = zext(R10D)
	instruction(0x1b422)
	$U1:8 = 0x8c:8 + RSP
	EAX = ram[$U1:8]
	RAX = zext(EAX)
	instruction(0x1b429)
	$U1:8 = 0x90:8 + RSP
	EDX = ram[$U1:8]
	RDX = zext(EDX)
	instruction(0x1b430)
	CF = R10D < 0x6:4
	OF = R10D sborrow 0x6:4
	$U1:4 = R10D - 0x6:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1b434)
	if ZF jump 0x1b5a0:8

0x1a225  MOV dword ptr [0x3ac88],EAX
0x1a22b  ADD RSP,0xa0
0x1a232  POP RBX
0x1a233  POP RBP
0x1a234  POP R12
0x1a236  POP R13
0x1a238  POP R14
0x1a23a  POP R15
0x1a23c  RET
<L0> (entry=0x1a225):
	instruction(0x1a225)
	$U1:4 = EAX
	ram[0x3ac88:8] = $U1:4
	instruction(0x1a22b)
	CF = RSP carry 0xa0:8
	OF = RSP scarry 0xa0:8
	RSP = RSP + 0xa0:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a232)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0x1a233)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBP = $U1:8
	instruction(0x1a234)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R12 = $U1:8
	instruction(0x1a236)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R13 = $U1:8
	instruction(0x1a238)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R14 = $U1:8
	instruction(0x1a23a)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R15 = $U1:8
	instruction(0x1a23c)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0xe3d0  ENDBR64
0xe3d4  PUSH RBP
0xe3d5  PUSH RBX
0xe3d6  MOV RBX,RDI
0xe3d9  SUB RSP,0x8
0xe3dd  MOV RDX,qword ptr [0x3c180]
0xe3e4  MOV RAX,qword ptr [0x3c188]
0xe3eb  TEST RDX,RDX
0xe3ee  JZ 0xe498
<L0> (entry=0xe3d0):
	instruction(0xe3d0)
	instruction(0xe3d4)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xe3d5)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xe3d6)
	RBX = RDI
	instruction(0xe3d9)
	CF = RSP < 0x8:8
	OF = RSP sborrow 0x8:8
	RSP = RSP - 0x8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xe3dd)
	RDX = ram[0x3c180:8]
	instruction(0xe3e4)
	RAX = ram[0x3c188:8]
	instruction(0xe3eb)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RDX & RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xe3ee)
	if ZF jump 0xe498:8

0x23690  MOV RCX,qword ptr [RAX + 0x10]
0x23694  MOV RDI,qword ptr [R15]
0x23697  MOV RSI,RCX
0x2369a  AND RSI,R10
0x2369d  ADD RSI,RDI
0x236a0  CMP RSI,qword ptr [R15 + 0x358]
0x236a7  JNC 0x236b0
<L0> (entry=0x23690):
	instruction(0x23690)
	$U1:8 = RAX + 0x10:8
	RCX = ram[$U1:8]
	instruction(0x23694)
	RDI = ram[R15]
	instruction(0x23697)
	RSI = RCX
	instruction(0x2369a)
	CF = 0x0:1
	OF = 0x0:1
	RSI = RSI & R10
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2369d)
	CF = RSI carry RDI
	OF = RSI scarry RDI
	RSI = RSI + RDI
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x236a0)
	$U5:8 = R15 + 0x358:8
	$U6:8 = ram[$U5:8]
	CF = RSI < $U6:8
	$U7:8 = ram[$U5:8]
	OF = RSI sborrow $U7:8
	$U8:8 = ram[$U5:8]
	$U1:8 = RSI - $U8:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x236a7)
	$U1:1 = !CF
	if $U1:1 jump 0x236b0:8

0x237e7  MOV qword ptr [0x3c238],0x0
0x237f2  CMP qword ptr [R12 + 0x8],0x0
0x237f8  MOV qword ptr [0x3c230],RBX
0x237ff  MOV dword ptr [0x3c240],0x1
0x23809  JNZ 0x2672a
<L0> (entry=0x237e7):
	instruction(0x237e7)
	$U1:8 = 0x0:8
	ram[0x3c238:8] = $U1:8
	instruction(0x237f2)
	$U5:8 = 0x8:8 + R12
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x0:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x0:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x237f8)
	$U1:8 = RBX
	ram[0x3c230:8] = $U1:8
	instruction(0x237ff)
	$U1:4 = 0x1:4
	ram[0x3c240:8] = $U1:4
	instruction(0x23809)
	$U1:1 = !ZF
	if $U1:1 jump 0x2672a:8

0x23892  CMP RAX,0x22
0x23896  JBE 0x23881
<L0> (entry=0x23892):
	instruction(0x23892)
	CF = RAX < 0x22:8
	OF = RAX sborrow 0x22:8
	$U1:8 = RAX - 0x22:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23896)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x23881:8

0x1aadb  MOV RAX,qword ptr [RSP + 0x30]
0x1aae0  MOV RCX,R14
0x1aae3  MOV RDX,R15
0x1aae6  MOV RSI,RBP
0x1aae9  MOV EDI,0x4
0x1aaee  MOV qword ptr [RSP + 0xb0],-0x1
0x1aafa  MOV qword ptr [RSP + 0xa0],RAX
0x1ab02  MOV qword ptr [RSP + 0xa8],0x0
0x1ab0e  CALL 0x18820
<L0> (entry=0x1aadb):
	instruction(0x1aadb)
	$U1:8 = 0x30:8 + RSP
	RAX = ram[$U1:8]
	instruction(0x1aae0)
	RCX = R14
	instruction(0x1aae3)
	RDX = R15
	instruction(0x1aae6)
	RSI = RBP
	instruction(0x1aae9)
	RDI = 0x4:8
	instruction(0x1aaee)
	$U1:8 = 0xb0:8 + RSP
	$U2:8 = 0xffffffffffffffff:8
	ram[$U1:8] = $U2:8
	instruction(0x1aafa)
	$U1:8 = 0xa0:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1ab02)
	$U1:8 = 0xa8:8 + RSP
	$U2:8 = 0x0:8
	ram[$U1:8] = $U2:8
	instruction(0x1ab0e)
	$U1:8 = 0x1ab13:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x18820:8

0x20b32  XOR R8D,R8D
0x20b35  XOR EAX,EAX
0x20b37  MOVZX EBX,byte ptr [RDI]
0x20b3a  LEA ECX,[RBX + -0x30]
0x20b3d  CMP CL,0x9
0x20b40  JA 0x20baa
<L0> (entry=0x20b32):
	instruction(0x20b32)
	CF = 0x0:1
	OF = 0x0:1
	R8D = R8D ^ R8D
	R8 = zext(R8D)
	SF = R8D s< 0x0:4
	ZF = R8D == 0x0:4
	$U1:4 = R8D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x20b35)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x20b37)
	$U1:1 = ram[RDI]
	EBX = zext($U1:1)
	RBX = zext(EBX)
	instruction(0x20b3a)
	$U1:8 = RBX + 0xffffffffffffffd0:8
	ECX = $U1:4
	RCX = zext(ECX)
	instruction(0x20b3d)
	CF = CL < 0x9:1
	OF = CL sborrow 0x9:1
	$U1:1 = CL - 0x9:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x20b40)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x20baa:8

0x1f2b0  XOR EAX,EAX
0x1f2b2  ADD RSP,0x8
0x1f2b6  POP RBX
0x1f2b7  POP RBP
0x1f2b8  RET
<L0> (entry=0x1f2b0):
	instruction(0x1f2b0)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1f2b2)
	CF = RSP carry 0x8:8
	OF = RSP scarry 0x8:8
	RSP = RSP + 0x8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1f2b6)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0x1f2b7)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBP = $U1:8
	instruction(0x1f2b8)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x1e542  TEST AL,AL
0x1e544  JNZ 0x1e528
<L0> (entry=0x1e542):
	instruction(0x1e542)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = AL & AL
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e544)
	$U1:1 = !ZF
	if $U1:1 jump 0x1e528:8

0xe980  MOV qword ptr [RDX],RBP
0xe983  JMP 0xe944
<L0> (entry=0xe980):
	instruction(0xe980)
	$U1:8 = RBP
	ram[RDX] = $U1:8
	instruction(0xe983)
	jump 0xe944:8

0x1ecf5  MOV RAX,qword ptr [RBX + 0x8]
0x1ecf9  MOV RCX,qword ptr [RBP + -0xd0]
0x1ed00  CMP RCX,RAX
0x1ed03  CMOVNC RAX,RCX
0x1ed07  MOV RCX,qword ptr [RBP + -0xc8]
0x1ed0e  MOV qword ptr [RCX],RAX
0x1ed11  MOV RAX,qword ptr [RBP + -0xc0]
0x1ed18  LEA RSP,[RBP + -0x28]
0x1ed1c  POP RBX
0x1ed1d  POP R12
0x1ed1f  POP R13
0x1ed21  POP R14
0x1ed23  POP R15
0x1ed25  POP RBP
0x1ed26  RET
<L0> (entry=0x1ecf5):
	instruction(0x1ecf5)
	$U1:8 = RBX + 0x8:8
	RAX = ram[$U1:8]
	instruction(0x1ecf9)
	$U1:8 = RBP + 0xffffffffffffff30:8
	RCX = ram[$U1:8]
	instruction(0x1ed00)
	CF = RCX < RAX
	OF = RCX sborrow RAX
	$U1:8 = RCX - RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1ed03)
	$U3:1 = !CF
	$U1:8 = RCX
	$U2:1 = !$U3:1
	if $U2:1 jump <L642>
<L1>:
	RAX = $U1:8
<L2>:
	instruction(0x1ed07)
	$U1:8 = RBP + 0xffffffffffffff38:8
	RCX = ram[$U1:8]
	instruction(0x1ed0e)
	$U1:8 = RAX
	ram[RCX] = $U1:8
	instruction(0x1ed11)
	$U1:8 = RBP + 0xffffffffffffff40:8
	RAX = ram[$U1:8]
	instruction(0x1ed18)
	$U1:8 = RBP + 0xffffffffffffffd8:8
	RSP = $U1:8
	instruction(0x1ed1c)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0x1ed1d)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R12 = $U1:8
	instruction(0x1ed1f)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R13 = $U1:8
	instruction(0x1ed21)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R14 = $U1:8
	instruction(0x1ed23)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R15 = $U1:8
	instruction(0x1ed25)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBP = $U1:8
	instruction(0x1ed26)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x5530  OR qword ptr [RSP + RAX*0x1 + -0x8],0x0
0x5536  JMP 0x48cf
<L0> (entry=0x5530):
	instruction(0x5530)
	$U5:8 = 0xfffffffffffffff8:8 + RSP
	$U6:8 = RAX * 0x1:8
	$U4:8 = $U5:8 + $U6:8
	CF = 0x0:1
	OF = 0x0:1
	$U7:8 = ram[$U4:8]
	$U8:8 = $U7:8 | 0x0:8
	ram[$U4:8] = $U8:8
	$U9:8 = ram[$U4:8]
	SF = $U9:8 s< 0x0:8
	$U10:8 = ram[$U4:8]
	ZF = $U10:8 == 0x0:8
	$U11:8 = ram[$U4:8]
	$U1:8 = $U11:8 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x5536)
	jump 0x48cf:8

0x151c0  ENDBR64
0x151c4  CMP byte ptr [0x3c084],0x0
0x151cb  JNZ 0x151e0
<L0> (entry=0x151c0):
	instruction(0x151c0)
	instruction(0x151c4)
	$U5:1 = ram[0x3c084:8]
	CF = $U5:1 < 0x0:1
	$U6:1 = ram[0x3c084:8]
	OF = $U6:1 sborrow 0x0:1
	$U7:1 = ram[0x3c084:8]
	$U1:1 = $U7:1 - 0x0:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x151cb)
	$U1:1 = !ZF
	if $U1:1 jump 0x151e0:8

0x229fd  MOV R9D,dword ptr [0x3aa98]
0x22a04  MOV R14,RAX
0x22a07  TEST R9D,R9D
0x22a0a  JNZ 0x255e7
<L0> (entry=0x229fd):
	instruction(0x229fd)
	R9D = ram[0x3aa98:8]
	R9 = zext(R9D)
	instruction(0x22a04)
	R14 = RAX
	instruction(0x22a07)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = R9D & R9D
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x22a0a)
	$U1:1 = !ZF
	if $U1:1 jump 0x255e7:8

0x242ca  CALL 0x151c0
<L0> (entry=0x242ca):
	$U1:8 = 0x242cf:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x151c0:8

0xe9ee  MOV qword ptr [RSP + 0x20],RDX
0xe9f3  MOV ESI,0x1
0xe9f8  MOV qword ptr [RSP + 0x18],R11
0xe9fd  CALL qword ptr [0x3aa70]
<L0> (entry=0xe9ee):
	instruction(0xe9ee)
	$U1:8 = 0x20:8 + RSP
	$U2:8 = RDX
	ram[$U1:8] = $U2:8
	instruction(0xe9f3)
	RSI = 0x1:8
	instruction(0xe9f8)
	$U1:8 = 0x18:8 + RSP
	$U2:8 = R11
	ram[$U1:8] = $U2:8
	instruction(0xe9fd)
	$U1:8 = ram[0x3aa70:8]
	$U2:8 = 0xea03:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U2:8
	call $U1:8

0xbe21  TEST R8D,R8D
0xbe24  JZ 0xbb5a
<L0> (entry=0xbe21):
	instruction(0xbe21)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = R8D & R8D
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xbe24)
	if ZF jump 0xbb5a:8

0x235b8  MOV RCX,qword ptr [RBP + -0x268]
0x235bf  ADD RAX,0x38
0x235c3  SUB RCX,qword ptr [RAX + -0x28]
0x235c7  MOV qword ptr [R15],RCX
0x235ca  CMP R12,RAX
0x235cd  JA 0x23330
<L0> (entry=0x235b8):
	instruction(0x235b8)
	$U1:8 = RBP + 0xfffffffffffffd98:8
	RCX = ram[$U1:8]
	instruction(0x235bf)
	CF = RAX carry 0x38:8
	OF = RAX scarry 0x38:8
	RAX = RAX + 0x38:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x235c3)
	$U4:8 = RAX + 0xffffffffffffffd8:8
	$U5:8 = ram[$U4:8]
	CF = RCX < $U5:8
	$U6:8 = ram[$U4:8]
	OF = RCX sborrow $U6:8
	$U7:8 = ram[$U4:8]
	RCX = RCX - $U7:8
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x235c7)
	$U1:8 = RCX
	ram[R15] = $U1:8
	instruction(0x235ca)
	CF = R12 < RAX
	OF = R12 sborrow RAX
	$U1:8 = R12 - RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x235cd)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x23330:8

0x205d5  MOV RAX,qword ptr [RSP + 0x48]
0x205da  MOV qword ptr [RSP + 0x58],RAX
0x205df  CMP byte ptr [RSP + 0x1d],0x0
0x205e4  JZ 0x207dd
<L0> (entry=0x205d5):
	instruction(0x205d5)
	$U1:8 = 0x48:8 + RSP
	RAX = ram[$U1:8]
	instruction(0x205da)
	$U1:8 = 0x58:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x205df)
	$U5:8 = 0x1d:8 + RSP
	$U6:1 = ram[$U5:8]
	CF = $U6:1 < 0x0:1
	$U7:1 = ram[$U5:8]
	OF = $U7:1 sborrow 0x0:1
	$U8:1 = ram[$U5:8]
	$U1:1 = $U8:1 - 0x0:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x205e4)
	if ZF jump 0x207dd:8

0xbb5a  CMP qword ptr [0x39ad0],-0x1
0xbb62  LEA RCX,[0x39ad0]
0xbb69  JZ 0xb94c
<L0> (entry=0xbb5a):
	instruction(0xbb5a)
	$U5:8 = ram[0x39ad0:8]
	CF = $U5:8 < 0xffffffffffffffff:8
	$U6:8 = ram[0x39ad0:8]
	OF = $U6:8 sborrow 0xffffffffffffffff:8
	$U7:8 = ram[0x39ad0:8]
	$U1:8 = $U7:8 - 0xffffffffffffffff:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xbb62)
	RCX = 0x39ad0:8
	instruction(0xbb69)
	if ZF jump 0xb94c:8

0x236e3  MOV qword ptr [R15 + 0x360],RCX
0x236ea  TEST byte ptr [RAX + 0x4],0x1
0x236ee  JZ 0x23700
<L0> (entry=0x236e3):
	instruction(0x236e3)
	$U1:8 = R15 + 0x360:8
	$U2:8 = RCX
	ram[$U1:8] = $U2:8
	instruction(0x236ea)
	$U5:8 = RAX + 0x4:8
	CF = 0x0:1
	OF = 0x0:1
	$U6:1 = ram[$U5:8]
	$U1:1 = $U6:1 & 0x1:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x236ee)
	if ZF jump 0x23700:8

0x2b837  MOVDQU XMM0, xmmword ptr [RDI]
0x2b83b  PXOR XMM3, XMM3
0x2b83f  MOVDQA XMM4, XMM0
0x2b843  PCMPEQB XMM0, XMM1
0x2b847  PCMPEQB XMM4, XMM3
0x2b84b  POR XMM0, XMM4
0x2b84f  PMOVMSKB EAX, XMM0
0x2b853  TEST EAX,EAX
0x2b855  JZ 0x2b870
<L0> (entry=0x2b837):
	instruction(0x2b837)
	XMM0 = ram[RDI]
	instruction(0x2b83b)
	XMM3 = XMM3 ^ XMM3
	instruction(0x2b83f)
	XMM4 = XMM0
	instruction(0x2b843)
	$U1:1 = XMM0_Ba == XMM1_Ba
	XMM0_Ba = $U1:1 * 0xff:1
	$U2:1 = XMM0_Bb == XMM1_Bb
	XMM0_Bb = $U2:1 * 0xff:1
	$U3:1 = XMM0_Bc == XMM1_Bc
	XMM0_Bc = $U3:1 * 0xff:1
	$U4:1 = XMM0_Bd == XMM1_Bd
	XMM0_Bd = $U4:1 * 0xff:1
	$U5:1 = XMM0_Be == XMM1_Be
	XMM0_Be = $U5:1 * 0xff:1
	$U6:1 = XMM0_Bf == XMM1_Bf
	XMM0_Bf = $U6:1 * 0xff:1
	$U7:1 = XMM0_Bg == XMM1_Bg
	XMM0_Bg = $U7:1 * 0xff:1
	$U8:1 = XMM0_Bh == XMM1_Bh
	XMM0_Bh = $U8:1 * 0xff:1
	$U9:1 = XMM0_Bi == XMM1_Bi
	XMM0_Bi = $U9:1 * 0xff:1
	$U10:1 = XMM0_Bj == XMM1_Bj
	XMM0_Bj = $U10:1 * 0xff:1
	$U11:1 = XMM0_Bk == XMM1_Bk
	XMM0_Bk = $U11:1 * 0xff:1
	$U12:1 = XMM0_Bl == XMM1_Bl
	XMM0_Bl = $U12:1 * 0xff:1
	$U13:1 = XMM0_Bm == XMM1_Bm
	XMM0_Bm = $U13:1 * 0xff:1
	$U14:1 = XMM0_Bn == XMM1_Bn
	XMM0_Bn = $U14:1 * 0xff:1
	$U15:1 = XMM0_Bo == XMM1_Bo
	XMM0_Bo = $U15:1 * 0xff:1
	$U16:1 = XMM0_Bp == XMM1_Bp
	XMM0_Bp = $U16:1 * 0xff:1
	instruction(0x2b847)
	$U1:1 = XMM4_Ba == XMM3_Ba
	XMM4_Ba = $U1:1 * 0xff:1
	$U2:1 = XMM4_Bb == XMM3_Bb
	XMM4_Bb = $U2:1 * 0xff:1
	$U3:1 = XMM4_Bc == XMM3_Bc
	XMM4_Bc = $U3:1 * 0xff:1
	$U4:1 = XMM4_Bd == XMM3_Bd
	XMM4_Bd = $U4:1 * 0xff:1
	$U5:1 = XMM4_Be == XMM3_Be
	XMM4_Be = $U5:1 * 0xff:1
	$U6:1 = XMM4_Bf == XMM3_Bf
	XMM4_Bf = $U6:1 * 0xff:1
	$U7:1 = XMM4_Bg == XMM3_Bg
	XMM4_Bg = $U7:1 * 0xff:1
	$U8:1 = XMM4_Bh == XMM3_Bh
	XMM4_Bh = $U8:1 * 0xff:1
	$U9:1 = XMM4_Bi == XMM3_Bi
	XMM4_Bi = $U9:1 * 0xff:1
	$U10:1 = XMM4_Bj == XMM3_Bj
	XMM4_Bj = $U10:1 * 0xff:1
	$U11:1 = XMM4_Bk == XMM3_Bk
	XMM4_Bk = $U11:1 * 0xff:1
	$U12:1 = XMM4_Bl == XMM3_Bl
	XMM4_Bl = $U12:1 * 0xff:1
	$U13:1 = XMM4_Bm == XMM3_Bm
	XMM4_Bm = $U13:1 * 0xff:1
	$U14:1 = XMM4_Bn == XMM3_Bn
	XMM4_Bn = $U14:1 * 0xff:1
	$U15:1 = XMM4_Bo == XMM3_Bo
	XMM4_Bo = $U15:1 * 0xff:1
	$U16:1 = XMM4_Bp == XMM3_Bp
	XMM4_Bp = $U16:1 * 0xff:1
	instruction(0x2b84b)
	XMM0 = XMM0 | XMM4
	instruction(0x2b84f)
	$U1:2 = 0x0:2
	$U2:16 = XMM0 >> 0x7:8
	$U2:16 = $U2:16 & 0x1:16
	$U3:2 = $U1:2 & 0xfffffffffffffffe:2
	$U4:2 = zext($U2:1)
	$U4:2 = $U4:2 & 0x1:2
	$U4:2 = $U4:2 << 0x0:8
	$U1:2 = $U3:2 | $U4:2
	$U5:16 = XMM0 >> 0xf:8
	$U5:16 = $U5:16 & 0x1:16
	$U6:2 = $U1:2 & 0xfffffffffffffffd:2
	$U7:2 = zext($U5:1)
	$U7:2 = $U7:2 & 0x1:2
	$U7:2 = $U7:2 << 0x1:8
	$U1:2 = $U6:2 | $U7:2
	$U8:16 = XMM0 >> 0x17:8
	$U8:16 = $U8:16 & 0x1:16
	$U9:2 = $U1:2 & 0xfffffffffffffffb:2
	$U10:2 = zext($U8:1)
	$U10:2 = $U10:2 & 0x1:2
	$U10:2 = $U10:2 << 0x2:8
	$U1:2 = $U9:2 | $U10:2
	$U11:16 = XMM0 >> 0x1f:8
	$U11:16 = $U11:16 & 0x1:16
	$U12:2 = $U1:2 & 0xfffffffffffffff7:2
	$U13:2 = zext($U11:1)
	$U13:2 = $U13:2 & 0x1:2
	$U13:2 = $U13:2 << 0x3:8
	$U1:2 = $U12:2 | $U13:2
	$U14:16 = XMM0 >> 0x27:8
	$U14:16 = $U14:16 & 0x1:16
	$U15:2 = $U1:2 & 0xffffffffffffffef:2
	$U16:2 = zext($U14:1)
	$U16:2 = $U16:2 & 0x1:2
	$U16:2 = $U16:2 << 0x4:8
	$U1:2 = $U15:2 | $U16:2
	$U17:16 = XMM0 >> 0x2f:8
	$U17:16 = $U17:16 & 0x1:16
	$U18:2 = $U1:2 & 0xffffffffffffffdf:2
	$U19:2 = zext($U17:1)
	$U19:2 = $U19:2 & 0x1:2
	$U19:2 = $U19:2 << 0x5:8
	$U1:2 = $U18:2 | $U19:2
	$U20:16 = XMM0 >> 0x37:8
	$U20:16 = $U20:16 & 0x1:16
	$U21:2 = $U1:2 & 0xffffffffffffffbf:2
	$U22:2 = zext($U20:1)
	$U22:2 = $U22:2 & 0x1:2
	$U22:2 = $U22:2 << 0x6:8
	$U1:2 = $U21:2 | $U22:2
	$U23:16 = XMM0 >> 0x3f:8
	$U23:16 = $U23:16 & 0x1:16
	$U24:2 = $U1:2 & 0xffffffffffffff7f:2
	$U25:2 = zext($U23:1)
	$U25:2 = $U25:2 & 0x1:2
	$U25:2 = $U25:2 << 0x7:8
	$U1:2 = $U24:2 | $U25:2
	$U26:16 = XMM0 >> 0x47:8
	$U26:16 = $U26:16 & 0x1:16
	$U27:2 = $U1:2 & 0xfffffffffffffeff:2
	$U28:2 = zext($U26:1)
	$U28:2 = $U28:2 & 0x1:2
	$U28:2 = $U28:2 << 0x8:8
	$U1:2 = $U27:2 | $U28:2
	$U29:16 = XMM0 >> 0x4f:8
	$U29:16 = $U29:16 & 0x1:16
	$U30:2 = $U1:2 & 0xfffffffffffffdff:2
	$U31:2 = zext($U29:1)
	$U31:2 = $U31:2 & 0x1:2
	$U31:2 = $U31:2 << 0x9:8
	$U1:2 = $U30:2 | $U31:2
	$U32:16 = XMM0 >> 0x57:8
	$U32:16 = $U32:16 & 0x1:16
	$U33:2 = $U1:2 & 0xfffffffffffffbff:2
	$U34:2 = zext($U32:1)
	$U34:2 = $U34:2 & 0x1:2
	$U34:2 = $U34:2 << 0xa:8
	$U1:2 = $U33:2 | $U34:2
	$U35:16 = XMM0 >> 0x5f:8
	$U35:16 = $U35:16 & 0x1:16
	$U36:2 = $U1:2 & 0xfffffffffffff7ff:2
	$U37:2 = zext($U35:1)
	$U37:2 = $U37:2 & 0x1:2
	$U37:2 = $U37:2 << 0xb:8
	$U1:2 = $U36:2 | $U37:2
	$U38:16 = XMM0 >> 0x67:8
	$U38:16 = $U38:16 & 0x1:16
	$U39:2 = $U1:2 & 0xffffffffffffefff:2
	$U40:2 = zext($U38:1)
	$U40:2 = $U40:2 & 0x1:2
	$U40:2 = $U40:2 << 0xc:8
	$U1:2 = $U39:2 | $U40:2
	$U41:16 = XMM0 >> 0x6f:8
	$U41:16 = $U41:16 & 0x1:16
	$U42:2 = $U1:2 & 0xffffffffffffdfff:2
	$U43:2 = zext($U41:1)
	$U43:2 = $U43:2 & 0x1:2
	$U43:2 = $U43:2 << 0xd:8
	$U1:2 = $U42:2 | $U43:2
	$U44:16 = XMM0 >> 0x77:8
	$U44:16 = $U44:16 & 0x1:16
	$U45:2 = $U1:2 & 0xffffffffffffbfff:2
	$U46:2 = zext($U44:1)
	$U46:2 = $U46:2 & 0x1:2
	$U46:2 = $U46:2 << 0xe:8
	$U1:2 = $U45:2 | $U46:2
	$U47:16 = XMM0 >> 0x7f:8
	$U47:16 = $U47:16 & 0x1:16
	$U48:2 = $U1:2 & 0xffffffffffff7fff:2
	$U49:2 = zext($U47:1)
	$U49:2 = $U49:2 & 0x1:2
	$U49:2 = $U49:2 << 0xf:8
	$U1:2 = $U48:2 | $U49:2
	EAX = zext($U1:2)
	RAX = zext(EAX)
	instruction(0x2b853)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2b855)
	if ZF jump 0x2b870:8

0x9bbd  CMP dword ptr [RDX + 0xc],0x554e47
0x9bc4  JNZ 0x9b90
<L0> (entry=0x9bbd):
	instruction(0x9bbd)
	$U5:8 = RDX + 0xc:8
	$U6:4 = ram[$U5:8]
	CF = $U6:4 < 0x554e47:4
	$U7:4 = ram[$U5:8]
	OF = $U7:4 sborrow 0x554e47:4
	$U8:4 = ram[$U5:8]
	$U1:4 = $U8:4 - 0x554e47:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x9bc4)
	$U1:1 = !ZF
	if $U1:1 jump 0x9b90:8

0x18da4  LEA RAX,[RDI*0x8]
0x18dac  SUB RAX,RDI
0x18daf  SHL RAX,0x4
0x18db3  CMP byte ptr [RCX + RAX*0x1 + 0x50],0x0
0x18db8  JZ 0x18dd0
<L0> (entry=0x18da4):
	instruction(0x18da4)
	$U1:8 = RDI * 0x8:8
	RAX = $U1:8
	instruction(0x18dac)
	CF = RAX < RDI
	OF = RAX sborrow RDI
	RAX = RAX - RDI
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x18daf)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RAX
	RAX = RAX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RAX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RAX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RAX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RAX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x18db3)
	$U6:8 = 0x50:8 + RCX
	$U7:8 = RAX * 0x1:8
	$U5:8 = $U6:8 + $U7:8
	$U8:1 = ram[$U5:8]
	CF = $U8:1 < 0x0:1
	$U9:1 = ram[$U5:8]
	OF = $U9:1 sborrow 0x0:1
	$U10:1 = ram[$U5:8]
	$U1:1 = $U10:1 - 0x0:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x18db8)
	if ZF jump 0x18dd0:8

0x1e991  MOV R8,qword ptr [RBX]
0x1e994  MOV RCX,qword ptr [RBP + -0xa8]
0x1e99b  MOV qword ptr [RBP + -0x48],0x0
0x1e9a3  MOV RBX,RAX
0x1e9a6  MOV dword ptr [RBP + -0x38],0xffffffff
0x1e9ad  MOV R13,qword ptr [RBP + -0x70]
0x1e9b1  MOV R12,0x77682d6362696c67
0x1e9bb  SHL R8,0x4
0x1e9bf  MOV qword ptr [RBP + -0x50],RCX
0x1e9c3  MOV qword ptr [RBP + -0x40],0x0
0x1e9cb  LEA R14,[RAX + R8*0x1]
0x1e9cf  JMP 0x1ea13
<L0> (entry=0x1e991):
	instruction(0x1e991)
	R8 = ram[RBX]
	instruction(0x1e994)
	$U1:8 = RBP + 0xffffffffffffff58:8
	RCX = ram[$U1:8]
	instruction(0x1e99b)
	$U1:8 = RBP + 0xffffffffffffffb8:8
	$U2:8 = 0x0:8
	ram[$U1:8] = $U2:8
	instruction(0x1e9a3)
	RBX = RAX
	instruction(0x1e9a6)
	$U1:8 = RBP + 0xffffffffffffffc8:8
	$U2:4 = 0xffffffff:4
	ram[$U1:8] = $U2:4
	instruction(0x1e9ad)
	$U1:8 = RBP + 0xffffffffffffff90:8
	R13 = ram[$U1:8]
	instruction(0x1e9b1)
	R12 = 0x77682d6362696c67:8
	instruction(0x1e9bb)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = R8
	R8 = R8 << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = R8 s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = R8 s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = R8 == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = R8 & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1e9bf)
	$U1:8 = RBP + 0xffffffffffffffb0:8
	$U2:8 = RCX
	ram[$U1:8] = $U2:8
	instruction(0x1e9c3)
	$U1:8 = RBP + 0xffffffffffffffc0:8
	$U2:8 = 0x0:8
	ram[$U1:8] = $U2:8
	instruction(0x1e9cb)
	$U2:8 = R8 * 0x1:8
	$U1:8 = RAX + $U2:8
	R14 = $U1:8
	instruction(0x1e9cf)
	jump 0x1ea13:8

0x195e0  PUSH RBX
0x195e1  TEST RDI,RDI
0x195e4  JZ 0x1963e
<L0> (entry=0x195e0):
	instruction(0x195e0)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x195e1)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RDI & RDI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x195e4)
	if ZF jump 0x1963e:8

0x1ec5d  TEST RAX,RAX
0x1ec60  JNZ 0x1ec32
<L0> (entry=0x1ec5d):
	instruction(0x1ec5d)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1ec60)
	$U1:1 = !ZF
	if $U1:1 jump 0x1ec32:8

0x22340  MOV RDX,qword ptr [RAX]
0x22343  ADD RDX,R12
0x22346  CMP dword ptr [RAX + 0x8],0x8
0x2234a  JNZ 0x22641
<L0> (entry=0x22340):
	instruction(0x22340)
	RDX = ram[RAX]
	instruction(0x22343)
	CF = RDX carry R12
	OF = RDX scarry R12
	RDX = RDX + R12
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x22346)
	$U5:8 = RAX + 0x8:8
	$U6:4 = ram[$U5:8]
	CF = $U6:4 < 0x8:4
	$U7:4 = ram[$U5:8]
	OF = $U7:4 sborrow 0x8:4
	$U8:4 = ram[$U5:8]
	$U1:4 = $U8:4 - 0x8:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2234a)
	$U1:1 = !ZF
	if $U1:1 jump 0x22641:8

0x2ba6a  MOVDQU XMM4, xmmword ptr [RAX]
0x2ba6e  PCMPEQB XMM4, XMM0
0x2ba72  PMOVMSKB EDX, XMM4
0x2ba76  TEST EDX,EDX
0x2ba78  JZ 0x2ba7e
<L0> (entry=0x2ba6a):
	instruction(0x2ba6a)
	XMM4 = ram[RAX]
	instruction(0x2ba6e)
	$U1:1 = XMM4_Ba == XMM0_Ba
	XMM4_Ba = $U1:1 * 0xff:1
	$U2:1 = XMM4_Bb == XMM0_Bb
	XMM4_Bb = $U2:1 * 0xff:1
	$U3:1 = XMM4_Bc == XMM0_Bc
	XMM4_Bc = $U3:1 * 0xff:1
	$U4:1 = XMM4_Bd == XMM0_Bd
	XMM4_Bd = $U4:1 * 0xff:1
	$U5:1 = XMM4_Be == XMM0_Be
	XMM4_Be = $U5:1 * 0xff:1
	$U6:1 = XMM4_Bf == XMM0_Bf
	XMM4_Bf = $U6:1 * 0xff:1
	$U7:1 = XMM4_Bg == XMM0_Bg
	XMM4_Bg = $U7:1 * 0xff:1
	$U8:1 = XMM4_Bh == XMM0_Bh
	XMM4_Bh = $U8:1 * 0xff:1
	$U9:1 = XMM4_Bi == XMM0_Bi
	XMM4_Bi = $U9:1 * 0xff:1
	$U10:1 = XMM4_Bj == XMM0_Bj
	XMM4_Bj = $U10:1 * 0xff:1
	$U11:1 = XMM4_Bk == XMM0_Bk
	XMM4_Bk = $U11:1 * 0xff:1
	$U12:1 = XMM4_Bl == XMM0_Bl
	XMM4_Bl = $U12:1 * 0xff:1
	$U13:1 = XMM4_Bm == XMM0_Bm
	XMM4_Bm = $U13:1 * 0xff:1
	$U14:1 = XMM4_Bn == XMM0_Bn
	XMM4_Bn = $U14:1 * 0xff:1
	$U15:1 = XMM4_Bo == XMM0_Bo
	XMM4_Bo = $U15:1 * 0xff:1
	$U16:1 = XMM4_Bp == XMM0_Bp
	XMM4_Bp = $U16:1 * 0xff:1
	instruction(0x2ba72)
	$U1:2 = 0x0:2
	$U2:16 = XMM4 >> 0x7:8
	$U2:16 = $U2:16 & 0x1:16
	$U3:2 = $U1:2 & 0xfffffffffffffffe:2
	$U4:2 = zext($U2:1)
	$U4:2 = $U4:2 & 0x1:2
	$U4:2 = $U4:2 << 0x0:8
	$U1:2 = $U3:2 | $U4:2
	$U5:16 = XMM4 >> 0xf:8
	$U5:16 = $U5:16 & 0x1:16
	$U6:2 = $U1:2 & 0xfffffffffffffffd:2
	$U7:2 = zext($U5:1)
	$U7:2 = $U7:2 & 0x1:2
	$U7:2 = $U7:2 << 0x1:8
	$U1:2 = $U6:2 | $U7:2
	$U8:16 = XMM4 >> 0x17:8
	$U8:16 = $U8:16 & 0x1:16
	$U9:2 = $U1:2 & 0xfffffffffffffffb:2
	$U10:2 = zext($U8:1)
	$U10:2 = $U10:2 & 0x1:2
	$U10:2 = $U10:2 << 0x2:8
	$U1:2 = $U9:2 | $U10:2
	$U11:16 = XMM4 >> 0x1f:8
	$U11:16 = $U11:16 & 0x1:16
	$U12:2 = $U1:2 & 0xfffffffffffffff7:2
	$U13:2 = zext($U11:1)
	$U13:2 = $U13:2 & 0x1:2
	$U13:2 = $U13:2 << 0x3:8
	$U1:2 = $U12:2 | $U13:2
	$U14:16 = XMM4 >> 0x27:8
	$U14:16 = $U14:16 & 0x1:16
	$U15:2 = $U1:2 & 0xffffffffffffffef:2
	$U16:2 = zext($U14:1)
	$U16:2 = $U16:2 & 0x1:2
	$U16:2 = $U16:2 << 0x4:8
	$U1:2 = $U15:2 | $U16:2
	$U17:16 = XMM4 >> 0x2f:8
	$U17:16 = $U17:16 & 0x1:16
	$U18:2 = $U1:2 & 0xffffffffffffffdf:2
	$U19:2 = zext($U17:1)
	$U19:2 = $U19:2 & 0x1:2
	$U19:2 = $U19:2 << 0x5:8
	$U1:2 = $U18:2 | $U19:2
	$U20:16 = XMM4 >> 0x37:8
	$U20:16 = $U20:16 & 0x1:16
	$U21:2 = $U1:2 & 0xffffffffffffffbf:2
	$U22:2 = zext($U20:1)
	$U22:2 = $U22:2 & 0x1:2
	$U22:2 = $U22:2 << 0x6:8
	$U1:2 = $U21:2 | $U22:2
	$U23:16 = XMM4 >> 0x3f:8
	$U23:16 = $U23:16 & 0x1:16
	$U24:2 = $U1:2 & 0xffffffffffffff7f:2
	$U25:2 = zext($U23:1)
	$U25:2 = $U25:2 & 0x1:2
	$U25:2 = $U25:2 << 0x7:8
	$U1:2 = $U24:2 | $U25:2
	$U26:16 = XMM4 >> 0x47:8
	$U26:16 = $U26:16 & 0x1:16
	$U27:2 = $U1:2 & 0xfffffffffffffeff:2
	$U28:2 = zext($U26:1)
	$U28:2 = $U28:2 & 0x1:2
	$U28:2 = $U28:2 << 0x8:8
	$U1:2 = $U27:2 | $U28:2
	$U29:16 = XMM4 >> 0x4f:8
	$U29:16 = $U29:16 & 0x1:16
	$U30:2 = $U1:2 & 0xfffffffffffffdff:2
	$U31:2 = zext($U29:1)
	$U31:2 = $U31:2 & 0x1:2
	$U31:2 = $U31:2 << 0x9:8
	$U1:2 = $U30:2 | $U31:2
	$U32:16 = XMM4 >> 0x57:8
	$U32:16 = $U32:16 & 0x1:16
	$U33:2 = $U1:2 & 0xfffffffffffffbff:2
	$U34:2 = zext($U32:1)
	$U34:2 = $U34:2 & 0x1:2
	$U34:2 = $U34:2 << 0xa:8
	$U1:2 = $U33:2 | $U34:2
	$U35:16 = XMM4 >> 0x5f:8
	$U35:16 = $U35:16 & 0x1:16
	$U36:2 = $U1:2 & 0xfffffffffffff7ff:2
	$U37:2 = zext($U35:1)
	$U37:2 = $U37:2 & 0x1:2
	$U37:2 = $U37:2 << 0xb:8
	$U1:2 = $U36:2 | $U37:2
	$U38:16 = XMM4 >> 0x67:8
	$U38:16 = $U38:16 & 0x1:16
	$U39:2 = $U1:2 & 0xffffffffffffefff:2
	$U40:2 = zext($U38:1)
	$U40:2 = $U40:2 & 0x1:2
	$U40:2 = $U40:2 << 0xc:8
	$U1:2 = $U39:2 | $U40:2
	$U41:16 = XMM4 >> 0x6f:8
	$U41:16 = $U41:16 & 0x1:16
	$U42:2 = $U1:2 & 0xffffffffffffdfff:2
	$U43:2 = zext($U41:1)
	$U43:2 = $U43:2 & 0x1:2
	$U43:2 = $U43:2 << 0xd:8
	$U1:2 = $U42:2 | $U43:2
	$U44:16 = XMM4 >> 0x77:8
	$U44:16 = $U44:16 & 0x1:16
	$U45:2 = $U1:2 & 0xffffffffffffbfff:2
	$U46:2 = zext($U44:1)
	$U46:2 = $U46:2 & 0x1:2
	$U46:2 = $U46:2 << 0xe:8
	$U1:2 = $U45:2 | $U46:2
	$U47:16 = XMM4 >> 0x7f:8
	$U47:16 = $U47:16 & 0x1:16
	$U48:2 = $U1:2 & 0xffffffffffff7fff:2
	$U49:2 = zext($U47:1)
	$U49:2 = $U49:2 & 0x1:2
	$U49:2 = $U49:2 << 0xf:8
	$U1:2 = $U48:2 | $U49:2
	EDX = zext($U1:2)
	RDX = zext(EDX)
	instruction(0x2ba76)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EDX & EDX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2ba78)
	if ZF jump 0x2ba7e:8

0x1ed30  MOV RCX,qword ptr [RAX + -0x10]
0x1ed34  ADD RAX,0x10
0x1ed38  MOV qword ptr [RAX + -0x10],RCX
0x1ed3c  CMP RSI,RDX
0x1ed3f  JNZ 0x1ec98
<L0> (entry=0x1ed30):
	instruction(0x1ed30)
	$U1:8 = RAX + 0xfffffffffffffff0:8
	RCX = ram[$U1:8]
	instruction(0x1ed34)
	CF = RAX carry 0x10:8
	OF = RAX scarry 0x10:8
	RAX = RAX + 0x10:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ed38)
	$U1:8 = RAX + 0xfffffffffffffff0:8
	$U2:8 = RCX
	ram[$U1:8] = $U2:8
	instruction(0x1ed3c)
	CF = RSI < RDX
	OF = RSI sborrow RDX
	$U1:8 = RSI - RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1ed3f)
	$U1:1 = !ZF
	if $U1:1 jump 0x1ec98:8

0x79c5  ADD RAX,qword ptr [R13]
0x79c9  MOV qword ptr [R13],RAX
0x79cd  CMP RAX,0x3f
0x79d1  JBE 0x79a6
<L0> (entry=0x79c5):
	instruction(0x79c5)
	$U4:8 = ram[R13]
	CF = RAX carry $U4:8
	$U5:8 = ram[R13]
	OF = RAX scarry $U5:8
	$U6:8 = ram[R13]
	RAX = RAX + $U6:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x79c9)
	$U1:8 = RAX
	ram[R13] = $U1:8
	instruction(0x79cd)
	CF = RAX < 0x3f:8
	OF = RAX sborrow 0x3f:8
	$U1:8 = RAX - 0x3f:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x79d1)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x79a6:8

0x7cb0  MOVZX ECX,word ptr [R13 + 0x40]
0x7cb5  JMP 0x7b10
<L0> (entry=0x7cb0):
	instruction(0x7cb0)
	$U1:8 = R13 + 0x40:8
	$U2:2 = ram[$U1:8]
	ECX = zext($U2:2)
	RCX = zext(ECX)
	instruction(0x7cb5)
	jump 0x7b10:8

0x54e8  XOR R15D,R15D
0x54eb  JMP 0x5194
<L0> (entry=0x54e8):
	instruction(0x54e8)
	CF = 0x0:1
	OF = 0x0:1
	R15D = R15D ^ R15D
	R15 = zext(R15D)
	SF = R15D s< 0x0:4
	ZF = R15D == 0x0:4
	$U1:4 = R15D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x54eb)
	jump 0x5194:8

0x5a33  MOV EDI,dword ptr [RBP + -0x4a0]
0x5a39  LEA RSI,[RBP + -0x490]
0x5a40  XOR EDX,EDX
0x5a42  CALL 0x3060
<L0> (entry=0x5a33):
	instruction(0x5a33)
	$U1:8 = RBP + 0xfffffffffffffb60:8
	EDI = ram[$U1:8]
	RDI = zext(EDI)
	instruction(0x5a39)
	$U1:8 = RBP + 0xfffffffffffffb70:8
	RSI = $U1:8
	instruction(0x5a40)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX ^ EDX
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x5a42)
	$U1:8 = 0x5a47:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x3060:8

0x2bfc6  MOVUPS XMM1, xmmword ptr [RSI + RDX*0x1 + -0x10]
0x2bfcb  MOVUPS xmmword ptr [RDI], XMM0
0x2bfce  MOVUPS xmmword ptr [RDI + RDX*0x1 + -0x10], XMM1
0x2bfd3  RET
<L0> (entry=0x2bfc6):
	instruction(0x2bfc6)
	$U3:8 = 0xfffffffffffffff0:8 + RSI
	$U4:8 = RDX * 0x1:8
	$U2:8 = $U3:8 + $U4:8
	$U1:16 = ram[$U2:8]
	XMM1_Da = $U1:4
	XMM1_Db = $U1[4]:4
	XMM1_Dc = $U1[8]:4
	XMM1_Dd = $U1[12]:4
	instruction(0x2bfcb)
	$U1:16 = XMM0
	ram[RDI] = $U1:16
	instruction(0x2bfce)
	$U2:8 = 0xfffffffffffffff0:8 + RDI
	$U3:8 = RDX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	$U4:16 = XMM1
	ram[$U1:8] = $U4:16
	instruction(0x2bfd3)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x10520  CMP R9D,0x1
0x10524  JZ 0x105ff
<L0> (entry=0x10520):
	instruction(0x10520)
	CF = R9D < 0x1:4
	OF = R9D sborrow 0x1:4
	$U1:4 = R9D - 0x1:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x10524)
	if ZF jump 0x105ff:8

0x23287  CMP qword ptr [0x3b040],R15
0x2328e  JNZ 0x2670b
<L0> (entry=0x23287):
	instruction(0x23287)
	$U5:8 = ram[0x3b040:8]
	CF = $U5:8 < R15
	$U6:8 = ram[0x3b040:8]
	OF = $U6:8 sborrow R15
	$U7:8 = ram[0x3b040:8]
	$U1:8 = $U7:8 - R15
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2328e)
	$U1:1 = !ZF
	if $U1:1 jump 0x2670b:8

0x8160  MOV dword ptr [RBP + -0xc8],R8D
0x8167  MOV RDI,qword ptr [RBP + -0xd0]
0x816e  CALL qword ptr [0x3aa60]
<L0> (entry=0x8160):
	instruction(0x8160)
	$U1:8 = RBP + 0xffffffffffffff38:8
	$U2:4 = R8D
	ram[$U1:8] = $U2:4
	instruction(0x8167)
	$U1:8 = RBP + 0xffffffffffffff30:8
	RDI = ram[$U1:8]
	instruction(0x816e)
	$U1:8 = ram[0x3aa60:8]
	$U2:8 = 0x8174:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U2:8
	call $U1:8

0x9bb7  CMP dword ptr [RDX + 0x8],0x5
0x9bbb  JNZ 0x9b90
<L0> (entry=0x9bb7):
	instruction(0x9bb7)
	$U5:8 = RDX + 0x8:8
	$U6:4 = ram[$U5:8]
	CF = $U6:4 < 0x5:4
	$U7:4 = ram[$U5:8]
	OF = $U7:4 sborrow 0x5:4
	$U8:4 = ram[$U5:8]
	$U1:4 = $U8:4 - 0x5:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x9bbb)
	$U1:1 = !ZF
	if $U1:1 jump 0x9b90:8

0x82db  MOV dword ptr [R12 + RBX*0x4 + 0x24],EAX
0x82e0  JMP 0x8231
<L0> (entry=0x82db):
	instruction(0x82db)
	$U2:8 = 0x24:8 + R12
	$U3:8 = RBX * 0x4:8
	$U1:8 = $U2:8 + $U3:8
	$U4:4 = EAX
	ram[$U1:8] = $U4:4
	instruction(0x82e0)
	jump 0x8231:8

0x19780  PUSH R15
0x19782  MOV EAX,dword ptr [0x3ab5c]
0x19788  MOV R9,RDI
0x1978b  MOV R15,RSI
0x1978e  PUSH R14
0x19790  MOV R10,RDX
0x19793  MOV R14D,dword ptr [0x3ab58]
0x1979a  PUSH R13
0x1979c  MOV R13D,dword ptr [0x3ab54]
0x197a3  PUSH R12
0x197a5  PUSH RBP
0x197a6  PUSH RBX
0x197a7  MOV R8,qword ptr [RDI]
0x197aa  MOV dword ptr [RSP + -0x8],EAX
0x197ae  MOV EAX,dword ptr [0x3ab50]
0x197b4  MOV dword ptr [RSP + -0x10],EAX
0x197b8  TEST R8,R8
0x197bb  JLE 0x19928
<L0> (entry=0x19780):
	instruction(0x19780)
	$U1:8 = R15
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x19782)
	EAX = ram[0x3ab5c:8]
	RAX = zext(EAX)
	instruction(0x19788)
	R9 = RDI
	instruction(0x1978b)
	R15 = RSI
	instruction(0x1978e)
	$U1:8 = R14
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x19790)
	R10 = RDX
	instruction(0x19793)
	R14D = ram[0x3ab58:8]
	R14 = zext(R14D)
	instruction(0x1979a)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1979c)
	R13D = ram[0x3ab54:8]
	R13 = zext(R13D)
	instruction(0x197a3)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x197a5)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x197a6)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x197a7)
	R8 = ram[RDI]
	instruction(0x197aa)
	$U1:8 = 0xfffffffffffffff8:8 + RSP
	$U2:4 = EAX
	ram[$U1:8] = $U2:4
	instruction(0x197ae)
	EAX = ram[0x3ab50:8]
	RAX = zext(EAX)
	instruction(0x197b4)
	$U1:8 = 0xfffffffffffffff0:8 + RSP
	$U2:4 = EAX
	ram[$U1:8] = $U2:4
	instruction(0x197b8)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R8 & R8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x197bb)
	$U2:1 = OF != SF
	$U1:1 = ZF || $U2:1
	if $U1:1 jump 0x19928:8

0x18970  ENDBR64
0x18974  PUSH R15
0x18976  PUSH R14
0x18978  PUSH R13
0x1897a  PUSH R12
0x1897c  PUSH RBP
0x1897d  MOV RBP,RDI
0x18980  PUSH RBX
0x18981  SUB RSP,0x28
0x18985  MOV EAX,dword ptr [0x3aa98]
0x1898b  TEST EAX,EAX
0x1898d  JNZ 0x18c25
<L0> (entry=0x18970):
	instruction(0x18970)
	instruction(0x18974)
	$U1:8 = R15
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x18976)
	$U1:8 = R14
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x18978)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1897a)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1897c)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1897d)
	RBP = RDI
	instruction(0x18980)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x18981)
	CF = RSP < 0x28:8
	OF = RSP sborrow 0x28:8
	RSP = RSP - 0x28:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x18985)
	EAX = ram[0x3aa98:8]
	RAX = zext(EAX)
	instruction(0x1898b)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1898d)
	$U1:1 = !ZF
	if $U1:1 jump 0x18c25:8

0x23538  MOV RSI,qword ptr [RAX + 0x28]
0x2353c  TEST RSI,RSI
0x2353f  JZ 0x23380
<L0> (entry=0x23538):
	instruction(0x23538)
	$U1:8 = RAX + 0x28:8
	RSI = ram[$U1:8]
	instruction(0x2353c)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RSI & RSI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2353f)
	if ZF jump 0x23380:8

0x2410f  MOV RDI,qword ptr [0x3baf0]
0x24116  XOR ESI,ESI
0x24118  CALL 0x4360
<L0> (entry=0x2410f):
	instruction(0x2410f)
	RDI = ram[0x3baf0:8]
	instruction(0x24116)
	CF = 0x0:1
	OF = 0x0:1
	ESI = ESI ^ ESI
	RSI = zext(ESI)
	SF = ESI s< 0x0:4
	ZF = ESI == 0x0:4
	$U1:4 = ESI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x24118)
	$U1:8 = 0x2411d:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x4360:8

0x28fe0  PXOR XMM0, XMM0
0x28fe4  MOVDQA XMM2, xmmword ptr [RDI]
0x28fe8  MOVDQA XMM1, xmmword ptr [RSI]
0x28fec  PCMPEQB XMM0, XMM1
0x28ff0  PSLLDQ XMM2, 0x5
0x28ff5  PCMPEQB XMM2, XMM1
0x28ff9  PSUBB XMM2, XMM0
0x28ffd  PMOVMSKB R9D, XMM2
0x29002  SHR EDX,CL
0x29004  SHR R9D,CL
0x29007  SUB EDX,R9D
0x2900a  JNZ 0x29625
<L0> (entry=0x28fe0):
	instruction(0x28fe0)
	XMM0 = XMM0 ^ XMM0
	instruction(0x28fe4)
	XMM2 = ram[RDI]
	instruction(0x28fe8)
	XMM1 = ram[RSI]
	instruction(0x28fec)
	$U1:1 = XMM0_Ba == XMM1_Ba
	XMM0_Ba = $U1:1 * 0xff:1
	$U2:1 = XMM0_Bb == XMM1_Bb
	XMM0_Bb = $U2:1 * 0xff:1
	$U3:1 = XMM0_Bc == XMM1_Bc
	XMM0_Bc = $U3:1 * 0xff:1
	$U4:1 = XMM0_Bd == XMM1_Bd
	XMM0_Bd = $U4:1 * 0xff:1
	$U5:1 = XMM0_Be == XMM1_Be
	XMM0_Be = $U5:1 * 0xff:1
	$U6:1 = XMM0_Bf == XMM1_Bf
	XMM0_Bf = $U6:1 * 0xff:1
	$U7:1 = XMM0_Bg == XMM1_Bg
	XMM0_Bg = $U7:1 * 0xff:1
	$U8:1 = XMM0_Bh == XMM1_Bh
	XMM0_Bh = $U8:1 * 0xff:1
	$U9:1 = XMM0_Bi == XMM1_Bi
	XMM0_Bi = $U9:1 * 0xff:1
	$U10:1 = XMM0_Bj == XMM1_Bj
	XMM0_Bj = $U10:1 * 0xff:1
	$U11:1 = XMM0_Bk == XMM1_Bk
	XMM0_Bk = $U11:1 * 0xff:1
	$U12:1 = XMM0_Bl == XMM1_Bl
	XMM0_Bl = $U12:1 * 0xff:1
	$U13:1 = XMM0_Bm == XMM1_Bm
	XMM0_Bm = $U13:1 * 0xff:1
	$U14:1 = XMM0_Bn == XMM1_Bn
	XMM0_Bn = $U14:1 * 0xff:1
	$U15:1 = XMM0_Bo == XMM1_Bo
	XMM0_Bo = $U15:1 * 0xff:1
	$U16:1 = XMM0_Bp == XMM1_Bp
	XMM0_Bp = $U16:1 * 0xff:1
	instruction(0x28ff0)
	$U1:1 = 0xf:1 < 0x5:1
	if $U1:1 jump <L759>
<L1>:
	$tmp0:8 = XMM2_Qa
	$U3:1 = 0x8:1 * 0x5:1
	XMM2_Qa = XMM2_Qa << $U3:1
	$U4:1 = 0x8:1 < 0x5:1
	if $U4:1 jump <L758>
<L2>:
	$U5:1 = 0x8:1 * 0x5:1
	$U6:8 = XMM2_Qb << $U5:1
	$U7:1 = 0x8:1 - 0x5:1
	$U8:1 = 0x8:1 * $U7:1
	$U9:8 = $tmp0:8 >> $U8:1
	XMM2_Qb = $U6:8 | $U9:8
	jump <L760>
<L3>:
	$U10:1 = 0x5:1 - 0x8:1
	$U11:1 = 0x8:1 * $U10:1
	XMM2_Qb = $tmp0:8 << $U11:1
	jump <L760>
<L4>:
	XMM2_Qa = 0x0:8
	XMM2_Qb = 0x0:8
<L5>:
	instruction(0x28ff5)
	$U1:1 = XMM2_Ba == XMM1_Ba
	XMM2_Ba = $U1:1 * 0xff:1
	$U2:1 = XMM2_Bb == XMM1_Bb
	XMM2_Bb = $U2:1 * 0xff:1
	$U3:1 = XMM2_Bc == XMM1_Bc
	XMM2_Bc = $U3:1 * 0xff:1
	$U4:1 = XMM2_Bd == XMM1_Bd
	XMM2_Bd = $U4:1 * 0xff:1
	$U5:1 = XMM2_Be == XMM1_Be
	XMM2_Be = $U5:1 * 0xff:1
	$U6:1 = XMM2_Bf == XMM1_Bf
	XMM2_Bf = $U6:1 * 0xff:1
	$U7:1 = XMM2_Bg == XMM1_Bg
	XMM2_Bg = $U7:1 * 0xff:1
	$U8:1 = XMM2_Bh == XMM1_Bh
	XMM2_Bh = $U8:1 * 0xff:1
	$U9:1 = XMM2_Bi == XMM1_Bi
	XMM2_Bi = $U9:1 * 0xff:1
	$U10:1 = XMM2_Bj == XMM1_Bj
	XMM2_Bj = $U10:1 * 0xff:1
	$U11:1 = XMM2_Bk == XMM1_Bk
	XMM2_Bk = $U11:1 * 0xff:1
	$U12:1 = XMM2_Bl == XMM1_Bl
	XMM2_Bl = $U12:1 * 0xff:1
	$U13:1 = XMM2_Bm == XMM1_Bm
	XMM2_Bm = $U13:1 * 0xff:1
	$U14:1 = XMM2_Bn == XMM1_Bn
	XMM2_Bn = $U14:1 * 0xff:1
	$U15:1 = XMM2_Bo == XMM1_Bo
	XMM2_Bo = $U15:1 * 0xff:1
	$U16:1 = XMM2_Bp == XMM1_Bp
	XMM2_Bp = $U16:1 * 0xff:1
	instruction(0x28ff9)
	XMM2_Ba = XMM2_Ba - XMM0_Ba
	XMM2_Bb = XMM2_Bb - XMM0_Bb
	XMM2_Bc = XMM2_Bc - XMM0_Bc
	XMM2_Bd = XMM2_Bd - XMM0_Bd
	XMM2_Be = XMM2_Be - XMM0_Be
	XMM2_Bf = XMM2_Bf - XMM0_Bf
	XMM2_Bg = XMM2_Bg - XMM0_Bg
	XMM2_Bh = XMM2_Bh - XMM0_Bh
	XMM2_Bi = XMM2_Bi - XMM0_Bi
	XMM2_Bj = XMM2_Bj - XMM0_Bj
	XMM2_Bk = XMM2_Bk - XMM0_Bk
	XMM2_Bl = XMM2_Bl - XMM0_Bl
	XMM2_Bm = XMM2_Bm - XMM0_Bm
	XMM2_Bn = XMM2_Bn - XMM0_Bn
	XMM2_Bo = XMM2_Bo - XMM0_Bo
	XMM2_Bp = XMM2_Bp - XMM0_Bp
	instruction(0x28ffd)
	$U1:2 = 0x0:2
	$U2:16 = XMM2 >> 0x7:8
	$U2:16 = $U2:16 & 0x1:16
	$U3:2 = $U1:2 & 0xfffffffffffffffe:2
	$U4:2 = zext($U2:1)
	$U4:2 = $U4:2 & 0x1:2
	$U4:2 = $U4:2 << 0x0:8
	$U1:2 = $U3:2 | $U4:2
	$U5:16 = XMM2 >> 0xf:8
	$U5:16 = $U5:16 & 0x1:16
	$U6:2 = $U1:2 & 0xfffffffffffffffd:2
	$U7:2 = zext($U5:1)
	$U7:2 = $U7:2 & 0x1:2
	$U7:2 = $U7:2 << 0x1:8
	$U1:2 = $U6:2 | $U7:2
	$U8:16 = XMM2 >> 0x17:8
	$U8:16 = $U8:16 & 0x1:16
	$U9:2 = $U1:2 & 0xfffffffffffffffb:2
	$U10:2 = zext($U8:1)
	$U10:2 = $U10:2 & 0x1:2
	$U10:2 = $U10:2 << 0x2:8
	$U1:2 = $U9:2 | $U10:2
	$U11:16 = XMM2 >> 0x1f:8
	$U11:16 = $U11:16 & 0x1:16
	$U12:2 = $U1:2 & 0xfffffffffffffff7:2
	$U13:2 = zext($U11:1)
	$U13:2 = $U13:2 & 0x1:2
	$U13:2 = $U13:2 << 0x3:8
	$U1:2 = $U12:2 | $U13:2
	$U14:16 = XMM2 >> 0x27:8
	$U14:16 = $U14:16 & 0x1:16
	$U15:2 = $U1:2 & 0xffffffffffffffef:2
	$U16:2 = zext($U14:1)
	$U16:2 = $U16:2 & 0x1:2
	$U16:2 = $U16:2 << 0x4:8
	$U1:2 = $U15:2 | $U16:2
	$U17:16 = XMM2 >> 0x2f:8
	$U17:16 = $U17:16 & 0x1:16
	$U18:2 = $U1:2 & 0xffffffffffffffdf:2
	$U19:2 = zext($U17:1)
	$U19:2 = $U19:2 & 0x1:2
	$U19:2 = $U19:2 << 0x5:8
	$U1:2 = $U18:2 | $U19:2
	$U20:16 = XMM2 >> 0x37:8
	$U20:16 = $U20:16 & 0x1:16
	$U21:2 = $U1:2 & 0xffffffffffffffbf:2
	$U22:2 = zext($U20:1)
	$U22:2 = $U22:2 & 0x1:2
	$U22:2 = $U22:2 << 0x6:8
	$U1:2 = $U21:2 | $U22:2
	$U23:16 = XMM2 >> 0x3f:8
	$U23:16 = $U23:16 & 0x1:16
	$U24:2 = $U1:2 & 0xffffffffffffff7f:2
	$U25:2 = zext($U23:1)
	$U25:2 = $U25:2 & 0x1:2
	$U25:2 = $U25:2 << 0x7:8
	$U1:2 = $U24:2 | $U25:2
	$U26:16 = XMM2 >> 0x47:8
	$U26:16 = $U26:16 & 0x1:16
	$U27:2 = $U1:2 & 0xfffffffffffffeff:2
	$U28:2 = zext($U26:1)
	$U28:2 = $U28:2 & 0x1:2
	$U28:2 = $U28:2 << 0x8:8
	$U1:2 = $U27:2 | $U28:2
	$U29:16 = XMM2 >> 0x4f:8
	$U29:16 = $U29:16 & 0x1:16
	$U30:2 = $U1:2 & 0xfffffffffffffdff:2
	$U31:2 = zext($U29:1)
	$U31:2 = $U31:2 & 0x1:2
	$U31:2 = $U31:2 << 0x9:8
	$U1:2 = $U30:2 | $U31:2
	$U32:16 = XMM2 >> 0x57:8
	$U32:16 = $U32:16 & 0x1:16
	$U33:2 = $U1:2 & 0xfffffffffffffbff:2
	$U34:2 = zext($U32:1)
	$U34:2 = $U34:2 & 0x1:2
	$U34:2 = $U34:2 << 0xa:8
	$U1:2 = $U33:2 | $U34:2
	$U35:16 = XMM2 >> 0x5f:8
	$U35:16 = $U35:16 & 0x1:16
	$U36:2 = $U1:2 & 0xfffffffffffff7ff:2
	$U37:2 = zext($U35:1)
	$U37:2 = $U37:2 & 0x1:2
	$U37:2 = $U37:2 << 0xb:8
	$U1:2 = $U36:2 | $U37:2
	$U38:16 = XMM2 >> 0x67:8
	$U38:16 = $U38:16 & 0x1:16
	$U39:2 = $U1:2 & 0xffffffffffffefff:2
	$U40:2 = zext($U38:1)
	$U40:2 = $U40:2 & 0x1:2
	$U40:2 = $U40:2 << 0xc:8
	$U1:2 = $U39:2 | $U40:2
	$U41:16 = XMM2 >> 0x6f:8
	$U41:16 = $U41:16 & 0x1:16
	$U42:2 = $U1:2 & 0xffffffffffffdfff:2
	$U43:2 = zext($U41:1)
	$U43:2 = $U43:2 & 0x1:2
	$U43:2 = $U43:2 << 0xd:8
	$U1:2 = $U42:2 | $U43:2
	$U44:16 = XMM2 >> 0x77:8
	$U44:16 = $U44:16 & 0x1:16
	$U45:2 = $U1:2 & 0xffffffffffffbfff:2
	$U46:2 = zext($U44:1)
	$U46:2 = $U46:2 & 0x1:2
	$U46:2 = $U46:2 << 0xe:8
	$U1:2 = $U45:2 | $U46:2
	$U47:16 = XMM2 >> 0x7f:8
	$U47:16 = $U47:16 & 0x1:16
	$U48:2 = $U1:2 & 0xffffffffffff7fff:2
	$U49:2 = zext($U47:1)
	$U49:2 = $U49:2 & 0x1:2
	$U49:2 = $U49:2 << 0xf:8
	$U1:2 = $U48:2 | $U49:2
	R9D = zext($U1:2)
	R9 = zext(R9D)
	instruction(0x29002)
	$U1:1 = CL & 0x1f:1
	$U2:4 = EDX
	EDX = EDX >> $U1:1
	RDX = zext(EDX)
	$U3:1 = $U1:1 != 0x0:1
	$U5:1 = $U1:1 - 0x1:1
	$U6:4 = $U2:4 >> $U5:1
	$U7:4 = $U6:4 & 0x1:4
	$U4:1 = $U7:4 != 0x0:4
	$U8:1 = !$U3:1
	$U9:1 = $U8:1 && CF
	$U10:1 = $U3:1 && $U4:1
	CF = $U9:1 || $U10:1
	$U11:1 = $U1:1 == 0x1:1
	$U12:1 = $U2:4 s< 0x0:4
	$U13:1 = !$U11:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U11:1 && $U12:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:1 != 0x0:1
	$U17:1 = EDX s< 0x0:4
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = EDX == 0x0:4
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:4 = EDX & 0xff:4
	$U27:1 = count_ones($U26:4)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x29004)
	$U1:1 = CL & 0x1f:1
	$U2:4 = R9D
	R9D = R9D >> $U1:1
	R9 = zext(R9D)
	$U3:1 = $U1:1 != 0x0:1
	$U5:1 = $U1:1 - 0x1:1
	$U6:4 = $U2:4 >> $U5:1
	$U7:4 = $U6:4 & 0x1:4
	$U4:1 = $U7:4 != 0x0:4
	$U8:1 = !$U3:1
	$U9:1 = $U8:1 && CF
	$U10:1 = $U3:1 && $U4:1
	CF = $U9:1 || $U10:1
	$U11:1 = $U1:1 == 0x1:1
	$U12:1 = $U2:4 s< 0x0:4
	$U13:1 = !$U11:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U11:1 && $U12:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:1 != 0x0:1
	$U17:1 = R9D s< 0x0:4
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = R9D == 0x0:4
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:4 = R9D & 0xff:4
	$U27:1 = count_ones($U26:4)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x29007)
	CF = EDX < R9D
	OF = EDX sborrow R9D
	EDX = EDX - R9D
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2900a)
	$U1:1 = !ZF
	if $U1:1 jump 0x29625:8

0x4310  ENDBR64
0x4314  LEA RAX,[0x3c118]
0x431b  TEST RDI,RDI
0x431e  JZ 0x4334
<L0> (entry=0x4310):
	instruction(0x4310)
	instruction(0x4314)
	RAX = 0x3c118:8
	instruction(0x431b)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RDI & RDI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x431e)
	if ZF jump 0x4334:8

0x4c7c  CMP qword ptr [RBP + -0x488],0x0
0x4c84  JNZ 0x4ec0
<L0> (entry=0x4c7c):
	instruction(0x4c7c)
	$U5:8 = RBP + 0xfffffffffffffb78:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x0:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x0:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x4c84)
	$U1:1 = !ZF
	if $U1:1 jump 0x4ec0:8

0x18dd8  MOV qword ptr [RSI],RAX
0x18ddb  JMP 0x18da4
<L0> (entry=0x18dd8):
	instruction(0x18dd8)
	$U1:8 = RAX
	ram[RSI] = $U1:8
	instruction(0x18ddb)
	jump 0x18da4:8

0x4fb7  MOV RCX,qword ptr [RSI + 0x8]
0x4fbb  LEA R12D,[RAX + 0x1]
0x4fbf  CMP R14,RCX
0x4fc2  JNZ 0x4fa0
<L0> (entry=0x4fb7):
	instruction(0x4fb7)
	$U1:8 = RSI + 0x8:8
	RCX = ram[$U1:8]
	instruction(0x4fbb)
	$U1:8 = RAX + 0x1:8
	R12D = $U1:4
	R12 = zext(R12D)
	instruction(0x4fbf)
	CF = R14 < RCX
	OF = R14 sborrow RCX
	$U1:8 = R14 - RCX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x4fc2)
	$U1:1 = !ZF
	if $U1:1 jump 0x4fa0:8

0xea03  MOV R14,RAX
0xea06  TEST RAX,RAX
0xea09  JZ 0xec3d
<L0> (entry=0xea03):
	instruction(0xea03)
	R14 = RAX
	instruction(0xea06)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xea09)
	if ZF jump 0xec3d:8

0x29632  XCHG RDI,RSI
0x29635  NOP dword ptr CS:[RAX + RAX*0x1]
0x29640  BSF RDX,RDX
0x29644  MOVZX ECX,byte ptr [RSI + RDX*0x1]
0x29648  MOVZX EAX,byte ptr [RDI + RDX*0x1]
0x2964c  SUB EAX,ECX
0x2964e  RET
<L0> (entry=0x29632):
	instruction(0x29632)
	$U1:8 = RDI
	RDI = RSI
	RSI = $U1:8
	instruction(0x29635)
	$U2:8 = RAX * 0x1:8
	$U1:8 = RAX + $U2:8
	instruction(0x29640)
	$tmp0:8 = 0x0:8
	ZF = RDX == 0x0:8
	$U2:1 = ZF == 0x1:1
	if $U2:1 jump <L764>
<L1>:
	$U3:8 = RDX >> $tmp0:8
	$U4:8 = $U3:8 & 0x1:8
	$U5:1 = $U4:8 != 0x0:8
	if $U5:1 jump <L764>
<L2>:
	$tmp0:8 = $tmp0:8 + 0x1:8
	jump <L762>
<L3>:
	RDX = $tmp0:8
	instruction(0x29644)
	$U2:8 = RDX * 0x1:8
	$U1:8 = RSI + $U2:8
	$U3:1 = ram[$U1:8]
	ECX = zext($U3:1)
	RCX = zext(ECX)
	instruction(0x29648)
	$U2:8 = RDX * 0x1:8
	$U1:8 = RDI + $U2:8
	$U3:1 = ram[$U1:8]
	EAX = zext($U3:1)
	RAX = zext(EAX)
	instruction(0x2964c)
	CF = EAX < ECX
	OF = EAX sborrow ECX
	EAX = EAX - ECX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2964e)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x5194  MOV EDI,dword ptr [RBP + -0x498]
0x519a  CMP EDI,R12D
0x519d  JNC 0x555d
<L0> (entry=0x5194):
	instruction(0x5194)
	$U1:8 = RBP + 0xfffffffffffffb68:8
	EDI = ram[$U1:8]
	RDI = zext(EDI)
	instruction(0x519a)
	CF = EDI < R12D
	OF = EDI sborrow R12D
	$U1:4 = EDI - R12D
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x519d)
	$U1:1 = !CF
	if $U1:1 jump 0x555d:8

0x14a92  MOV RDX,R13
0x14a95  MOV RDI,R15
0x14a98  CALL 0x14620
<L0> (entry=0x14a92):
	instruction(0x14a92)
	RDX = R13
	instruction(0x14a95)
	RDI = R15
	instruction(0x14a98)
	$U1:8 = 0x14a9d:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x14620:8

0x24749  MOVZX EAX,byte ptr [R15 + 0x321]
0x24751  MOV dword ptr [R15 + 0x32c],EBX
0x24758  MOVQ qword ptr [R15 + 0x324], XMM0
0x24761  AND EAX,0xfffffffc
0x24764  OR EAX,0x2
0x24767  MOV byte ptr [R15 + 0x321],AL
0x2476e  JMP 0x233af
<L0> (entry=0x24749):
	instruction(0x24749)
	$U1:8 = R15 + 0x321:8
	$U2:1 = ram[$U1:8]
	EAX = zext($U2:1)
	RAX = zext(EAX)
	instruction(0x24751)
	$U1:8 = R15 + 0x32c:8
	$U2:4 = EBX
	ram[$U1:8] = $U2:4
	instruction(0x24758)
	$U1:8 = R15 + 0x324:8
	$U2:8 = XMM0_Qa
	ram[$U1:8] = $U2:8
	instruction(0x24761)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX & 0xfffffffc:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x24764)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX | 0x2:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x24767)
	$U1:8 = R15 + 0x321:8
	$U2:1 = AL
	ram[$U1:8] = $U2:1
	instruction(0x2476e)
	jump 0x233af:8

0x2b857  BSF EAX,EAX
0x2b85a  MOV EDX,0x0
0x2b85f  LEA RAX,[RDI + RAX*0x1]
0x2b863  CMP byte ptr [RAX],SIL
0x2b866  CMOVNZ RAX,RDX
0x2b86a  RET
<L0> (entry=0x2b857):
	instruction(0x2b857)
	$tmp0:4 = 0x0:4
	ZF = EAX == 0x0:4
	$U2:1 = ZF == 0x1:1
	if $U2:1 jump <L550>
<L1>:
	$U3:4 = EAX >> $tmp0:4
	$U4:4 = $U3:4 & 0x1:4
	$U5:1 = $U4:4 != 0x0:4
	if $U5:1 jump <L550>
<L2>:
	$tmp0:4 = $tmp0:4 + 0x1:4
	jump <L548>
<L3>:
	EAX = $tmp0:4
	RAX = zext(EAX)
	instruction(0x2b85a)
	RDX = 0x0:8
	instruction(0x2b85f)
	$U2:8 = RAX * 0x1:8
	$U1:8 = RDI + $U2:8
	RAX = $U1:8
	instruction(0x2b863)
	$U5:1 = ram[RAX]
	CF = $U5:1 < SIL
	$U6:1 = ram[RAX]
	OF = $U6:1 sborrow SIL
	$U7:1 = ram[RAX]
	$U1:1 = $U7:1 - SIL
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2b866)
	$U3:1 = !ZF
	$U1:8 = RDX
	$U2:1 = !$U3:1
	if $U2:1 jump <L552>
<L4>:
	RAX = $U1:8
<L5>:
	instruction(0x2b86a)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0xb4a3  TEST EAX,EAX
0xb4a5  JNZ 0xb4fe
<L0> (entry=0xb4a3):
	instruction(0xb4a3)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb4a5)
	$U1:1 = !ZF
	if $U1:1 jump 0xb4fe:8

0x2321d  LEA RAX,[0x2fee9]
0x23224  XOR R9D,R9D
0x23227  XOR ECX,ECX
0x23229  XOR EDX,EDX
0x2322b  MOV R8D,0x20000000
0x23231  MOV RDI,RAX
0x23234  MOV RSI,RAX
0x23237  MOV qword ptr [RBP + -0x278],RAX
0x2323e  CALL 0xe990
<L0> (entry=0x2321d):
	instruction(0x2321d)
	RAX = 0x2fee9:8
	instruction(0x23224)
	CF = 0x0:1
	OF = 0x0:1
	R9D = R9D ^ R9D
	R9 = zext(R9D)
	SF = R9D s< 0x0:4
	ZF = R9D == 0x0:4
	$U1:4 = R9D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x23227)
	CF = 0x0:1
	OF = 0x0:1
	ECX = ECX ^ ECX
	RCX = zext(ECX)
	SF = ECX s< 0x0:4
	ZF = ECX == 0x0:4
	$U1:4 = ECX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x23229)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX ^ EDX
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2322b)
	R8 = 0x20000000:8
	instruction(0x23231)
	RDI = RAX
	instruction(0x23234)
	RSI = RAX
	instruction(0x23237)
	$U1:8 = RBP + 0xfffffffffffffd88:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x2323e)
	$U1:8 = 0x23243:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0xe990:8

0x10684  LEA RBX,[RDX + 0x1]
0x10688  MOV EDI,0x20
0x1068d  MOV R10D,0xffffffff
0x10693  CMP AL,0x2a
0x10695  JZ 0x10950
<L0> (entry=0x10684):
	instruction(0x10684)
	$U1:8 = RDX + 0x1:8
	RBX = $U1:8
	instruction(0x10688)
	RDI = 0x20:8
	instruction(0x1068d)
	R10 = 0xffffffff:8
	instruction(0x10693)
	CF = AL < 0x2a:1
	OF = AL sborrow 0x2a:1
	$U1:1 = AL - 0x2a:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x10695)
	if ZF jump 0x10950:8

0xe6c0  MOV RBX,qword ptr [RBX + 0x8]
0xe6c4  TEST RBX,RBX
0xe6c7  JZ 0xe6e8
<L0> (entry=0xe6c0):
	instruction(0xe6c0)
	$U1:8 = RBX + 0x8:8
	RBX = ram[$U1:8]
	instruction(0xe6c4)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RBX & RBX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xe6c7)
	if ZF jump 0xe6e8:8

0x22480  ADD RAX,qword ptr [RBX + 0x10]
0x22484  MOV qword ptr [R12],RAX
0x22488  JMP 0x2238a
<L0> (entry=0x22480):
	instruction(0x22480)
	$U4:8 = RBX + 0x10:8
	$U5:8 = ram[$U4:8]
	CF = RAX carry $U5:8
	$U6:8 = ram[$U4:8]
	OF = RAX scarry $U6:8
	$U7:8 = ram[$U4:8]
	RAX = RAX + $U7:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x22484)
	$U1:8 = RAX
	ram[R12] = $U1:8
	instruction(0x22488)
	jump 0x2238a:8

0xe6e8  ADD RSP,0x8
0xe6ec  XOR EAX,EAX
0xe6ee  POP RBX
0xe6ef  POP RBP
0xe6f0  RET
<L0> (entry=0xe6e8):
	instruction(0xe6e8)
	CF = RSP carry 0x8:8
	OF = RSP scarry 0x8:8
	RSP = RSP + 0x8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xe6ec)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xe6ee)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0xe6ef)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBP = $U1:8
	instruction(0xe6f0)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x7b31  MOV RDX,qword ptr [RBX + 0x20]
0x7b35  CMP RDX,0x1f
0x7b39  JBE 0x7b10
<L0> (entry=0x7b31):
	instruction(0x7b31)
	$U1:8 = RBX + 0x20:8
	RDX = ram[$U1:8]
	instruction(0x7b35)
	CF = RDX < 0x1f:8
	OF = RDX sborrow 0x1f:8
	$U1:8 = RDX - 0x1f:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7b39)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x7b10:8

0x5b0e  MOV RDX,R15
0x5b11  MOV RSI,R13
0x5b14  MOV RDI,RAX
0x5b17  CALL 0x2bfa0
<L0> (entry=0x5b0e):
	instruction(0x5b0e)
	RDX = R15
	instruction(0x5b11)
	RSI = R13
	instruction(0x5b14)
	RDI = RAX
	instruction(0x5b17)
	$U1:8 = 0x5b1c:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2bfa0:8

0x17ba0  MOV EDX,0x1
0x17ba5  LEA RSI,[0x3c1f8]
0x17bac  LEA RDI,[0x2f21b]
0x17bb3  CALL 0xe600
<L0> (entry=0x17ba0):
	instruction(0x17ba0)
	RDX = 0x1:8
	instruction(0x17ba5)
	RSI = 0x3c1f8:8
	instruction(0x17bac)
	RDI = 0x2f21b:8
	instruction(0x17bb3)
	$U1:8 = 0x17bb8:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0xe600:8

0x223dc  ADD RAX,qword ptr [0x3baf0]
0x223e3  CMP CL,0xa
0x223e6  JZ 0x225c0
<L0> (entry=0x223dc):
	instruction(0x223dc)
	$U4:8 = ram[0x3baf0:8]
	CF = RAX carry $U4:8
	$U5:8 = ram[0x3baf0:8]
	OF = RAX scarry $U5:8
	$U6:8 = ram[0x3baf0:8]
	RAX = RAX + $U6:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x223e3)
	CF = CL < 0xa:1
	OF = CL sborrow 0xa:1
	$U1:1 = CL - 0xa:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x223e6)
	if ZF jump 0x225c0:8

0x233f3  ADD RDX,RAX
0x233f6  MOV R10D,0xc
0x233fc  XOR R8D,R8D
0x233ff  XOR EBX,EBX
0x23401  MOV dword ptr [RBP + -0x2a8],0x0
0x2340b  SUB R10,RDX
0x2340e  MOV dword ptr [RBP + -0x280],0x0
0x23418  JMP 0x23444
<L0> (entry=0x233f3):
	instruction(0x233f3)
	CF = RDX carry RAX
	OF = RDX scarry RAX
	RDX = RDX + RAX
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x233f6)
	R10 = 0xc:8
	instruction(0x233fc)
	CF = 0x0:1
	OF = 0x0:1
	R8D = R8D ^ R8D
	R8 = zext(R8D)
	SF = R8D s< 0x0:4
	ZF = R8D == 0x0:4
	$U1:4 = R8D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x233ff)
	CF = 0x0:1
	OF = 0x0:1
	EBX = EBX ^ EBX
	RBX = zext(EBX)
	SF = EBX s< 0x0:4
	ZF = EBX == 0x0:4
	$U1:4 = EBX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x23401)
	$U1:8 = RBP + 0xfffffffffffffd58:8
	$U2:4 = 0x0:4
	ram[$U1:8] = $U2:4
	instruction(0x2340b)
	CF = R10 < RDX
	OF = R10 sborrow RDX
	R10 = R10 - RDX
	SF = R10 s< 0x0:8
	ZF = R10 == 0x0:8
	$U1:8 = R10 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2340e)
	$U1:8 = RBP + 0xfffffffffffffd80:8
	$U2:4 = 0x0:4
	ram[$U1:8] = $U2:4
	instruction(0x23418)
	jump 0x23444:8

0x27b68  CMP RAX,-0x1000
0x27b6e  JA 0x27b78
<L0> (entry=0x27b68):
	instruction(0x27b68)
	CF = RAX < 0xfffffffffffff000:8
	OF = RAX sborrow 0xfffffffffffff000:8
	$U1:8 = RAX - 0xfffffffffffff000:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x27b6e)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x27b78:8

0x1ab51  MOV RCX,R14
0x1ab54  MOV RDX,R15
0x1ab57  MOV RSI,RBP
0x1ab5a  MOV EDI,0xa
0x1ab5f  MOV qword ptr [RSP + 0xa8],R13
0x1ab67  MOV qword ptr [RSP + 0xb0],-0x1
0x1ab73  MOV qword ptr [RSP + 0xa0],RBX
0x1ab7b  CALL 0x18820
<L0> (entry=0x1ab51):
	instruction(0x1ab51)
	RCX = R14
	instruction(0x1ab54)
	RDX = R15
	instruction(0x1ab57)
	RSI = RBP
	instruction(0x1ab5a)
	RDI = 0xa:8
	instruction(0x1ab5f)
	$U1:8 = 0xa8:8 + RSP
	$U2:8 = R13
	ram[$U1:8] = $U2:8
	instruction(0x1ab67)
	$U1:8 = 0xb0:8 + RSP
	$U2:8 = 0xffffffffffffffff:8
	ram[$U1:8] = $U2:8
	instruction(0x1ab73)
	$U1:8 = 0xa0:8 + RSP
	$U2:8 = RBX
	ram[$U1:8] = $U2:8
	instruction(0x1ab7b)
	$U1:8 = 0x1ab80:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x18820:8

0x222ac  MOV RAX,qword ptr [R10 + 0x8]
0x222b0  TEST DIL,DIL
0x222b3  MOV RDI,qword ptr [0x3bb40]
0x222ba  LEA R9,[RAX + R12*0x1]
0x222be  MOV RDI,qword ptr [RDI + 0x8]
0x222c2  CMOVNZ RAX,R9
0x222c6  MOVQ XMM3, RDI
0x222cb  MOVQ XMM0, RAX
0x222d0  LEA R9,[RDI + RAX*0x1]
0x222d4  PUNPCKLQDQ XMM0, XMM3
0x222d8  CMP R9,R8
0x222db  JZ 0x225fa
<L0> (entry=0x222ac):
	instruction(0x222ac)
	$U1:8 = R10 + 0x8:8
	RAX = ram[$U1:8]
	instruction(0x222b0)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = DIL & DIL
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x222b3)
	RDI = ram[0x3bb40:8]
	instruction(0x222ba)
	$U2:8 = R12 * 0x1:8
	$U1:8 = RAX + $U2:8
	R9 = $U1:8
	instruction(0x222be)
	$U1:8 = RDI + 0x8:8
	RDI = ram[$U1:8]
	instruction(0x222c2)
	$U3:1 = !ZF
	$U1:8 = R9
	$U2:1 = !$U3:1
	if $U2:1 jump <L35>
<L1>:
	RAX = $U1:8
<L2>:
	instruction(0x222c6)
	XMM3 = zext(RDI)
	instruction(0x222cb)
	XMM0 = zext(RAX)
	instruction(0x222d0)
	$U2:8 = RAX * 0x1:8
	$U1:8 = RDI + $U2:8
	R9 = $U1:8
	instruction(0x222d4)
	XMM0_Qb = XMM3_Qa
	instruction(0x222d8)
	CF = R9 < R8
	OF = R9 sborrow R8
	$U1:8 = R9 - R8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x222db)
	if ZF jump 0x225fa:8

0x1f22d  MOV RBP,qword ptr [RBX]
0x1f230  TEST RBP,RBP
0x1f233  JZ 0x1f2b0
<L0> (entry=0x1f22d):
	instruction(0x1f22d)
	RBP = ram[RBX]
	instruction(0x1f230)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RBP & RBP
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1f233)
	if ZF jump 0x1f2b0:8

0xb436  CMP qword ptr [0x3ba40],R9
0xb43d  MOV RBP,R9
0xb440  LEA R15,[0x3b040]
0xb447  JBE 0xbf18
<L0> (entry=0xb436):
	instruction(0xb436)
	$U5:8 = ram[0x3ba40:8]
	CF = $U5:8 < R9
	$U6:8 = ram[0x3ba40:8]
	OF = $U6:8 sborrow R9
	$U7:8 = ram[0x3ba40:8]
	$U1:8 = $U7:8 - R9
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb43d)
	RBP = R9
	instruction(0xb440)
	R15 = 0x3b040:8
	instruction(0xb447)
	$U1:1 = CF || ZF
	if $U1:1 jump 0xbf18:8

0x1dfd8  RET
<L0> (entry=0x1dfd8):
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x1a8ed  MOVQ XMM0, qword ptr [RSP + 0x20]
0x1a8f3  MOV EAX,dword ptr [0x3ac84]
0x1a8f9  MOVHPS XMM0, qword ptr [RSP + 0x40]
0x1a8fe  MOVUPS xmmword ptr [0x3acd0], XMM0
0x1a905  MOVQ XMM0, qword ptr [RSP + 0x18]
0x1a90b  MOVHPS XMM0, qword ptr [RSP + 0x48]
0x1a910  MOVUPS xmmword ptr [0x3ace0], XMM0
0x1a917  MOVQ XMM0, qword ptr [RSP + 0x50]
0x1a91d  MOVHPS XMM0, qword ptr [RSP]
0x1a921  MOVUPS xmmword ptr [0x3acf0], XMM0
0x1a928  MOVQ XMM0, qword ptr [RSP + 0x58]
0x1a92e  MOVHPS XMM0, qword ptr [RSP + 0x60]
0x1a933  MOVUPS xmmword ptr [0x3ad00], XMM0
0x1a93a  MOVQ XMM0, R13
0x1a93f  MOVHPS XMM0, qword ptr [RSP + 0x68]
0x1a944  MOVUPS xmmword ptr [0x3ad10], XMM0
0x1a94b  MOVQ XMM0, RBP
0x1a950  MOVHPS XMM0, qword ptr [RSP + 0x70]
0x1a955  MOVUPS xmmword ptr [0x3ad20], XMM0
0x1a95c  TEST byte ptr [0x3ab9a],0x1
0x1a963  JZ 0x1ad10
<L0> (entry=0x1a8ed):
	instruction(0x1a8ed)
	$U1:8 = 0x20:8 + RSP
	$U2:8 = ram[$U1:8]
	XMM0 = zext($U2:8)
	instruction(0x1a8f3)
	EAX = ram[0x3ac84:8]
	RAX = zext(EAX)
	instruction(0x1a8f9)
	$U1:8 = 0x40:8 + RSP
	XMM0_Qb = ram[$U1:8]
	instruction(0x1a8fe)
	$U1:16 = XMM0
	ram[0x3acd0:8] = $U1:16
	instruction(0x1a905)
	$U1:8 = 0x18:8 + RSP
	$U2:8 = ram[$U1:8]
	XMM0 = zext($U2:8)
	instruction(0x1a90b)
	$U1:8 = 0x48:8 + RSP
	XMM0_Qb = ram[$U1:8]
	instruction(0x1a910)
	$U1:16 = XMM0
	ram[0x3ace0:8] = $U1:16
	instruction(0x1a917)
	$U1:8 = 0x50:8 + RSP
	$U2:8 = ram[$U1:8]
	XMM0 = zext($U2:8)
	instruction(0x1a91d)
	XMM0_Qb = ram[RSP]
	instruction(0x1a921)
	$U1:16 = XMM0
	ram[0x3acf0:8] = $U1:16
	instruction(0x1a928)
	$U1:8 = 0x58:8 + RSP
	$U2:8 = ram[$U1:8]
	XMM0 = zext($U2:8)
	instruction(0x1a92e)
	$U1:8 = 0x60:8 + RSP
	XMM0_Qb = ram[$U1:8]
	instruction(0x1a933)
	$U1:16 = XMM0
	ram[0x3ad00:8] = $U1:16
	instruction(0x1a93a)
	XMM0 = zext(R13)
	instruction(0x1a93f)
	$U1:8 = 0x68:8 + RSP
	XMM0_Qb = ram[$U1:8]
	instruction(0x1a944)
	$U1:16 = XMM0
	ram[0x3ad10:8] = $U1:16
	instruction(0x1a94b)
	XMM0 = zext(RBP)
	instruction(0x1a950)
	$U1:8 = 0x70:8 + RSP
	XMM0_Qb = ram[$U1:8]
	instruction(0x1a955)
	$U1:16 = XMM0
	ram[0x3ad20:8] = $U1:16
	instruction(0x1a95c)
	CF = 0x0:1
	OF = 0x0:1
	$U5:1 = ram[0x3ab9a:8]
	$U1:1 = $U5:1 & 0x1:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1a963)
	if ZF jump 0x1ad10:8

0x24783  MOV RSI,RBX
0x24786  SUB RSI,RAX
0x24789  CMP RSI,0xa
0x2478d  JA 0x23885
<L0> (entry=0x24783):
	instruction(0x24783)
	RSI = RBX
	instruction(0x24786)
	CF = RSI < RAX
	OF = RSI sborrow RAX
	RSI = RSI - RAX
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x24789)
	CF = RSI < 0xa:8
	OF = RSI sborrow 0xa:8
	$U1:8 = RSI - 0xa:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2478d)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x23885:8

0x27ae0  ENDBR64
0x27ae4  MOV R10D,ESI
0x27ae7  MOV qword ptr [RSP + -0x20],RDX
0x27aec  MOV R9,RDI
0x27aef  MOV R8D,ESI
0x27af2  AND R10D,0x40
0x27af6  JNZ 0x27b28
<L0> (entry=0x27ae0):
	instruction(0x27ae0)
	instruction(0x27ae4)
	R10D = ESI
	R10 = zext(R10D)
	instruction(0x27ae7)
	$U1:8 = 0xffffffffffffffe0:8 + RSP
	$U2:8 = RDX
	ram[$U1:8] = $U2:8
	instruction(0x27aec)
	R9 = RDI
	instruction(0x27aef)
	R8D = ESI
	R8 = zext(R8D)
	instruction(0x27af2)
	CF = 0x0:1
	OF = 0x0:1
	R10D = R10D & 0x40:4
	R10 = zext(R10D)
	SF = R10D s< 0x0:4
	ZF = R10D == 0x0:4
	$U1:4 = R10D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x27af6)
	$U1:1 = !ZF
	if $U1:1 jump 0x27b28:8

0x18d9d  TEST R8D,R8D
0x18da0  JNZ 0x18dd8
<L0> (entry=0x18d9d):
	instruction(0x18d9d)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = R8D & R8D
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x18da0)
	$U1:1 = !ZF
	if $U1:1 jump 0x18dd8:8

0x16080  ENDBR64
0x16084  XOR EAX,EAX
0x16086  RET
<L0> (entry=0x16080):
	instruction(0x16080)
	instruction(0x16084)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x16086)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x1e68e  MOV RDI,R12
0x1e691  CALL 0x1f220
<L0> (entry=0x1e68e):
	instruction(0x1e68e)
	RDI = R12
	instruction(0x1e691)
	$U1:8 = 0x1e696:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x1f220:8

0x1893f  MOV RSI,RAX
0x18942  MOV R11,RCX
0x18945  JMP 0x188b2
<L0> (entry=0x1893f):
	instruction(0x1893f)
	RSI = RAX
	instruction(0x18942)
	R11 = RCX
	instruction(0x18945)
	jump 0x188b2:8

0x27b50  NEG EAX
0x27b52  MOV dword ptr [0x3c2a0],EAX
0x27b58  MOV EAX,0xffffffff
0x27b5d  RET
<L0> (entry=0x27b50):
	instruction(0x27b50)
	CF = EAX != 0x0:4
	OF = 0x0:4 sborrow EAX
	EAX = -EAX
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	RAX = zext(EAX)
	instruction(0x27b52)
	$U1:4 = EAX
	ram[0x3c2a0:8] = $U1:4
	instruction(0x27b58)
	RAX = 0xffffffff:8
	instruction(0x27b5d)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x27ef0  ENDBR64
0x27ef4  MOV qword ptr [RDI],RBX
0x27ef7  MOV RAX,RBP
0x27efa  XOR RAX,qword ptr [0x3aab0]
0x27f01  ROL RAX,0x11
0x27f05  MOV qword ptr [RDI + 0x8],RAX
0x27f09  MOV qword ptr [RDI + 0x10],R12
0x27f0d  MOV qword ptr [RDI + 0x18],R13
0x27f11  MOV qword ptr [RDI + 0x20],R14
0x27f15  MOV qword ptr [RDI + 0x28],R15
0x27f19  LEA RDX,[RSP + 0x8]
0x27f1e  XOR RDX,qword ptr [0x3aab0]
0x27f25  ROL RDX,0x11
0x27f29  MOV qword ptr [RDI + 0x30],RDX
0x27f2d  MOV RAX,qword ptr [RSP]
0x27f31  NOP
0x27f32  XOR RAX,qword ptr [0x3aab0]
0x27f39  ROL RAX,0x11
0x27f3d  MOV qword ptr [RDI + 0x38],RAX
0x27f41  XOR EAX,EAX
0x27f43  RDSSPD EAX
0x27f48  MOV qword ptr [RDI + 0x58],RAX
0x27f4c  XOR EAX,EAX
0x27f4e  RET
<L0> (entry=0x27ef0):
	instruction(0x27ef0)
	instruction(0x27ef4)
	$U1:8 = RBX
	ram[RDI] = $U1:8
	instruction(0x27ef7)
	RAX = RBP
	instruction(0x27efa)
	CF = 0x0:1
	OF = 0x0:1
	$U4:8 = ram[0x3aab0:8]
	RAX = RAX ^ $U4:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x27f01)
	$U1:8 = 0x11:8 & 0x3f:8
	$U2:8 = RAX << $U1:8
	$U3:8 = 0x40:8 - $U1:8
	$U4:8 = RAX >> $U3:8
	RAX = $U2:8 | $U4:8
	$U5:1 = $U1:8 != 0x0:8
	$U7:8 = RAX & 0x1:8
	$U6:1 = $U7:8 != 0x0:8
	$U8:1 = !$U5:1
	$U9:1 = $U8:1 && CF
	$U10:1 = $U5:1 && $U6:1
	CF = $U9:1 || $U10:1
	$U11:1 = $U1:8 == 0x1:8
	$U13:1 = RAX s< 0x0:8
	$U12:1 = CF ^^ $U13:1
	$U14:1 = !$U11:1
	$U15:1 = $U14:1 && OF
	$U16:1 = $U11:1 && $U12:1
	OF = $U15:1 || $U16:1
	instruction(0x27f05)
	$U1:8 = RDI + 0x8:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x27f09)
	$U1:8 = RDI + 0x10:8
	$U2:8 = R12
	ram[$U1:8] = $U2:8
	instruction(0x27f0d)
	$U1:8 = RDI + 0x18:8
	$U2:8 = R13
	ram[$U1:8] = $U2:8
	instruction(0x27f11)
	$U1:8 = RDI + 0x20:8
	$U2:8 = R14
	ram[$U1:8] = $U2:8
	instruction(0x27f15)
	$U1:8 = RDI + 0x28:8
	$U2:8 = R15
	ram[$U1:8] = $U2:8
	instruction(0x27f19)
	$U1:8 = 0x8:8 + RSP
	RDX = $U1:8
	instruction(0x27f1e)
	CF = 0x0:1
	OF = 0x0:1
	$U4:8 = ram[0x3aab0:8]
	RDX = RDX ^ $U4:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x27f25)
	$U1:8 = 0x11:8 & 0x3f:8
	$U2:8 = RDX << $U1:8
	$U3:8 = 0x40:8 - $U1:8
	$U4:8 = RDX >> $U3:8
	RDX = $U2:8 | $U4:8
	$U5:1 = $U1:8 != 0x0:8
	$U7:8 = RDX & 0x1:8
	$U6:1 = $U7:8 != 0x0:8
	$U8:1 = !$U5:1
	$U9:1 = $U8:1 && CF
	$U10:1 = $U5:1 && $U6:1
	CF = $U9:1 || $U10:1
	$U11:1 = $U1:8 == 0x1:8
	$U13:1 = RDX s< 0x0:8
	$U12:1 = CF ^^ $U13:1
	$U14:1 = !$U11:1
	$U15:1 = $U14:1 && OF
	$U16:1 = $U11:1 && $U12:1
	OF = $U15:1 || $U16:1
	instruction(0x27f29)
	$U1:8 = RDI + 0x30:8
	$U2:8 = RDX
	ram[$U1:8] = $U2:8
	instruction(0x27f2d)
	RAX = ram[RSP]
	instruction(0x27f31)
	instruction(0x27f32)
	CF = 0x0:1
	OF = 0x0:1
	$U4:8 = ram[0x3aab0:8]
	RAX = RAX ^ $U4:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x27f39)
	$U1:8 = 0x11:8 & 0x3f:8
	$U2:8 = RAX << $U1:8
	$U3:8 = 0x40:8 - $U1:8
	$U4:8 = RAX >> $U3:8
	RAX = $U2:8 | $U4:8
	$U5:1 = $U1:8 != 0x0:8
	$U7:8 = RAX & 0x1:8
	$U6:1 = $U7:8 != 0x0:8
	$U8:1 = !$U5:1
	$U9:1 = $U8:1 && CF
	$U10:1 = $U5:1 && $U6:1
	CF = $U9:1 || $U10:1
	$U11:1 = $U1:8 == 0x1:8
	$U13:1 = RAX s< 0x0:8
	$U12:1 = CF ^^ $U13:1
	$U14:1 = !$U11:1
	$U15:1 = $U14:1 && OF
	$U16:1 = $U11:1 && $U12:1
	OF = $U15:1 || $U16:1
	instruction(0x27f3d)
	$U1:8 = RDI + 0x38:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x27f41)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x27f43)
	EAX = SSP:4
	instruction(0x27f48)
	$U1:8 = RDI + 0x58:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x27f4c)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x27f4e)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x23700  ADD RCX,RBX
0x23703  ADD RAX,0x38
0x23707  AND RCX,R10
0x2370a  MOV R11,RCX
0x2370d  CMP R12,RAX
0x23710  JA 0x23330
<L0> (entry=0x23700):
	instruction(0x23700)
	CF = RCX carry RBX
	OF = RCX scarry RBX
	RCX = RCX + RBX
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x23703)
	CF = RAX carry 0x38:8
	OF = RAX scarry 0x38:8
	RAX = RAX + 0x38:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x23707)
	CF = 0x0:1
	OF = 0x0:1
	RCX = RCX & R10
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2370a)
	R11 = RCX
	instruction(0x2370d)
	CF = R12 < RAX
	OF = R12 sborrow RAX
	$U1:8 = R12 - RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23710)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x23330:8

0x1f2c0  MOV RDI,RBP
0x1f2c3  CALL 0x2ba40
<L0> (entry=0x1f2c0):
	instruction(0x1f2c0)
	RDI = RBP
	instruction(0x1f2c3)
	$U1:8 = 0x1f2c8:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2ba40:8

0x7b6a  LEA RAX,[RDX + 0x17]
0x7b6e  MOV RDI,RSP
0x7b71  MOV RSI,RAX
0x7b74  AND RAX,-0x1000
0x7b7a  SUB RDI,RAX
0x7b7d  AND RSI,-0x10
0x7b81  CMP RSP,RDI
0x7b84  JZ 0x7b9b
<L0> (entry=0x7b6a):
	instruction(0x7b6a)
	$U1:8 = RDX + 0x17:8
	RAX = $U1:8
	instruction(0x7b6e)
	RDI = RSP
	instruction(0x7b71)
	RSI = RAX
	instruction(0x7b74)
	CF = 0x0:1
	OF = 0x0:1
	RAX = RAX & 0xfffffffffffff000:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7b7a)
	CF = RDI < RAX
	OF = RDI sborrow RAX
	RDI = RDI - RAX
	SF = RDI s< 0x0:8
	ZF = RDI == 0x0:8
	$U1:8 = RDI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7b7d)
	CF = 0x0:1
	OF = 0x0:1
	RSI = RSI & 0xfffffffffffffff0:8
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7b81)
	CF = RSP < RDI
	OF = RSP sborrow RDI
	$U1:8 = RSP - RDI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7b84)
	if ZF jump 0x7b9b:8

0xabbb  CALL 0x279d0
<L0> (entry=0xabbb):
	$U1:8 = 0xabc0:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x279d0:8

0x188c9  CMP R9,RCX
0x188cc  JBE 0x188ed
<L0> (entry=0x188c9):
	instruction(0x188c9)
	CF = R9 < RCX
	OF = R9 sborrow RCX
	$U1:8 = R9 - RCX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x188cc)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x188ed:8

0x1afd0  MOV EDI,0xc1
0x1afd5  MOV qword ptr [RSP + 0x58],RAX
0x1afda  CALL 0x19f10
<L0> (entry=0x1afd0):
	instruction(0x1afd0)
	RDI = 0xc1:8
	instruction(0x1afd5)
	$U1:8 = 0x58:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1afda)
	$U1:8 = 0x1afdf:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x19f10:8

0x1ac18  MOVQ XMM0, qword ptr [0x3ab98]
0x1ac20  AND EAX,0xcfffefff
0x1ac25  MOVQ XMM1, qword ptr [0x33fb8]
0x1ac2d  MOV qword ptr [0x3ac90],0x0
0x1ac38  AND dword ptr [0x3ac34],0xffffffcf
0x1ac3f  AND dword ptr [0x3aba0],0xfc3ffef3
0x1ac49  PAND XMM0, XMM1
0x1ac4d  AND dword ptr [0x3abbc],0xfffef7ff
0x1ac57  MOV dword ptr [0x3ab7c],EAX
0x1ac5d  MOVQ qword ptr [0x3ab98], XMM0
0x1ac65  CMP dword ptr [0x3ab50],0x1
0x1ac6c  MOV qword ptr [0x3ab40],0x2
0x1ac77  JZ 0x1ad90
<L0> (entry=0x1ac18):
	instruction(0x1ac18)
	$U1:8 = ram[0x3ab98:8]
	XMM0 = zext($U1:8)
	instruction(0x1ac20)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX & 0xcfffefff:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ac25)
	$U1:8 = ram[0x33fb8:8]
	XMM1 = zext($U1:8)
	instruction(0x1ac2d)
	$U1:8 = 0x0:8
	ram[0x3ac90:8] = $U1:8
	instruction(0x1ac38)
	CF = 0x0:1
	OF = 0x0:1
	$U4:4 = ram[0x3ac34:8]
	$U5:4 = $U4:4 & 0xffffffcf:4
	ram[0x3ac34:8] = $U5:4
	$U6:4 = ram[0x3ac34:8]
	SF = $U6:4 s< 0x0:4
	$U7:4 = ram[0x3ac34:8]
	ZF = $U7:4 == 0x0:4
	$U8:4 = ram[0x3ac34:8]
	$U1:4 = $U8:4 & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ac3f)
	CF = 0x0:1
	OF = 0x0:1
	$U4:4 = ram[0x3aba0:8]
	$U5:4 = $U4:4 & 0xfc3ffef3:4
	ram[0x3aba0:8] = $U5:4
	$U6:4 = ram[0x3aba0:8]
	SF = $U6:4 s< 0x0:4
	$U7:4 = ram[0x3aba0:8]
	ZF = $U7:4 == 0x0:4
	$U8:4 = ram[0x3aba0:8]
	$U1:4 = $U8:4 & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ac49)
	XMM0 = XMM0 & XMM1
	instruction(0x1ac4d)
	CF = 0x0:1
	OF = 0x0:1
	$U4:4 = ram[0x3abbc:8]
	$U5:4 = $U4:4 & 0xfffef7ff:4
	ram[0x3abbc:8] = $U5:4
	$U6:4 = ram[0x3abbc:8]
	SF = $U6:4 s< 0x0:4
	$U7:4 = ram[0x3abbc:8]
	ZF = $U7:4 == 0x0:4
	$U8:4 = ram[0x3abbc:8]
	$U1:4 = $U8:4 & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ac57)
	$U1:4 = EAX
	ram[0x3ab7c:8] = $U1:4
	instruction(0x1ac5d)
	$U1:8 = XMM0_Qa
	ram[0x3ab98:8] = $U1:8
	instruction(0x1ac65)
	$U5:4 = ram[0x3ab50:8]
	CF = $U5:4 < 0x1:4
	$U6:4 = ram[0x3ab50:8]
	OF = $U6:4 sborrow 0x1:4
	$U7:4 = ram[0x3ab50:8]
	$U1:4 = $U7:4 - 0x1:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1ac6c)
	$U1:8 = 0x2:8
	ram[0x3ab40:8] = $U1:8
	instruction(0x1ac77)
	if ZF jump 0x1ad90:8

0x22371  MOV RDX,R12
0x22374  CMP RDI,RBX
0x22377  JA 0x22397
<L0> (entry=0x22371):
	instruction(0x22371)
	RDX = R12
	instruction(0x22374)
	CF = RDI < RBX
	OF = RDI sborrow RBX
	$U1:8 = RDI - RBX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x22377)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x22397:8

0x151cd  MOV R8,qword ptr [0x3c088]
0x151d4  MOV RAX,R8
0x151d7  RET
<L0> (entry=0x151cd):
	instruction(0x151cd)
	R8 = ram[0x3c088:8]
	instruction(0x151d4)
	RAX = R8
	instruction(0x151d7)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x1e3b0  MOV RAX,qword ptr [RSP + 0x8]
0x1e3b5  MOV R12D,dword ptr [RSP + 0x2c]
0x1e3ba  MOV qword ptr [0x3c218],RAX
0x1e3c1  JMP 0x1e369
<L0> (entry=0x1e3b0):
	instruction(0x1e3b0)
	$U1:8 = 0x8:8 + RSP
	RAX = ram[$U1:8]
	instruction(0x1e3b5)
	$U1:8 = 0x2c:8 + RSP
	R12D = ram[$U1:8]
	R12 = zext(R12D)
	instruction(0x1e3ba)
	$U1:8 = RAX
	ram[0x3c218:8] = $U1:8
	instruction(0x1e3c1)
	jump 0x1e369:8

0x51a3  MOV R13D,R12D
0x51a6  MOV RSI,qword ptr [R14 + 0x2c0]
0x51ad  LEA RDX,[R13*0x8]
0x51b5  TEST EDI,EDI
0x51b7  JZ 0x54d8
<L0> (entry=0x51a3):
	instruction(0x51a3)
	R13D = R12D
	R13 = zext(R13D)
	instruction(0x51a6)
	$U1:8 = R14 + 0x2c0:8
	RSI = ram[$U1:8]
	instruction(0x51ad)
	$U1:8 = R13 * 0x8:8
	RDX = $U1:8
	instruction(0x51b5)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EDI & EDI
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x51b7)
	if ZF jump 0x54d8:8

0x1ad10  AND EAX,0x200
0x1ad15  CMP EAX,0x1
0x1ad18  SBB RBP,RBP
0x1ad1b  AND RBP,-0x1800
0x1ad22  ADD RBP,0x2000
0x1ad29  CMP EAX,0x1
0x1ad2c  SBB R13,R13
0x1ad2f  MOV RBX,RBP
0x1ad32  AND R13,-0x80
0x1ad36  ADD R13,0x100
0x1ad3d  JMP 0x1a982
<L0> (entry=0x1ad10):
	instruction(0x1ad10)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX & 0x200:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ad15)
	CF = EAX < 0x1:4
	OF = EAX sborrow 0x1:4
	$U1:4 = EAX - 0x1:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1ad18)
	$U1:8 = zext(CF)
	CF = RBP < RBP
	OF = RBP sborrow RBP
	$U2:8 = RBP - RBP
	$U3:1 = $U2:8 < $U1:8
	CF = CF || $U3:1
	$U4:1 = $U2:8 sborrow $U1:8
	OF = OF ^^ $U4:1
	RBP = $U2:8 - $U1:8
	SF = RBP s< 0x0:8
	ZF = RBP == 0x0:8
	$U5:8 = RBP & 0xff:8
	$U6:1 = count_ones($U5:8)
	$U7:1 = $U6:1 & 0x1:1
	PF = $U7:1 == 0x0:1
	instruction(0x1ad1b)
	CF = 0x0:1
	OF = 0x0:1
	RBP = RBP & 0xffffffffffffe800:8
	SF = RBP s< 0x0:8
	ZF = RBP == 0x0:8
	$U1:8 = RBP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ad22)
	CF = RBP carry 0x2000:8
	OF = RBP scarry 0x2000:8
	RBP = RBP + 0x2000:8
	SF = RBP s< 0x0:8
	ZF = RBP == 0x0:8
	$U1:8 = RBP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ad29)
	CF = EAX < 0x1:4
	OF = EAX sborrow 0x1:4
	$U1:4 = EAX - 0x1:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1ad2c)
	$U1:8 = zext(CF)
	CF = R13 < R13
	OF = R13 sborrow R13
	$U2:8 = R13 - R13
	$U3:1 = $U2:8 < $U1:8
	CF = CF || $U3:1
	$U4:1 = $U2:8 sborrow $U1:8
	OF = OF ^^ $U4:1
	R13 = $U2:8 - $U1:8
	SF = R13 s< 0x0:8
	ZF = R13 == 0x0:8
	$U5:8 = R13 & 0xff:8
	$U6:1 = count_ones($U5:8)
	$U7:1 = $U6:1 & 0x1:1
	PF = $U7:1 == 0x0:1
	instruction(0x1ad2f)
	RBX = RBP
	instruction(0x1ad32)
	CF = 0x0:1
	OF = 0x0:1
	R13 = R13 & 0xffffffffffffff80:8
	SF = R13 s< 0x0:8
	ZF = R13 == 0x0:8
	$U1:8 = R13 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ad36)
	CF = R13 carry 0x100:8
	OF = R13 scarry 0x100:8
	R13 = R13 + 0x100:8
	SF = R13 s< 0x0:8
	ZF = R13 == 0x0:8
	$U1:8 = R13 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ad3d)
	jump 0x1a982:8

0x20b7c  SHL EAX,0x8
0x20b7f  ADD R8D,0x1
0x20b83  LEA RDI,[RSI + 0x1]
0x20b87  OR EAX,ECX
0x20b89  CMP DL,0x2e
0x20b8c  JNZ 0x20ba0
<L0> (entry=0x20b7c):
	instruction(0x20b7c)
	$U1:8 = 0x8:8 & 0x1f:8
	$U2:4 = EAX
	EAX = EAX << $U1:8
	RAX = zext(EAX)
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:4 = $U2:4 << $U5:8
	$U4:1 = $U6:4 s< 0x0:4
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = EAX s< 0x0:4
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = EAX s< 0x0:4
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = EAX == 0x0:4
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:4 = EAX & 0xff:4
	$U27:1 = count_ones($U26:4)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x20b7f)
	CF = R8D carry 0x1:4
	OF = R8D scarry 0x1:4
	R8D = R8D + 0x1:4
	R8 = zext(R8D)
	SF = R8D s< 0x0:4
	ZF = R8D == 0x0:4
	$U1:4 = R8D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x20b83)
	$U1:8 = RSI + 0x1:8
	RDI = $U1:8
	instruction(0x20b87)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX | ECX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x20b89)
	CF = DL < 0x2e:1
	OF = DL sborrow 0x2e:1
	$U1:1 = DL - 0x2e:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x20b8c)
	$U1:1 = !ZF
	if $U1:1 jump 0x20ba0:8

0x22549  LEA RAX,[0x3c2d8]
0x22550  LEA RDI,[0x1000]
0x22557  MOV qword ptr [0x3bb18],RBX
0x2255e  MOVQ XMM1, RAX
0x22563  MOVQ XMM0, RDI
0x22568  MOV RDI,qword ptr [RBP + -0x78]
0x2256c  LEA RAX,[0x2c315]
0x22573  PUNPCKLQDQ XMM0, XMM1
0x22577  LEA RSI,[0x228e0]
0x2257e  MOV qword ptr [0x3be58],RAX
0x22585  MOV qword ptr [0x3aa90],RBP
0x2258c  MOVUPS xmmword ptr [0x3be48], XMM0
0x22593  CALL 0x20440
<L0> (entry=0x22549):
	instruction(0x22549)
	RAX = 0x3c2d8:8
	instruction(0x22550)
	RDI = 0x1000:8
	instruction(0x22557)
	$U1:8 = RBX
	ram[0x3bb18:8] = $U1:8
	instruction(0x2255e)
	XMM1 = zext(RAX)
	instruction(0x22563)
	XMM0 = zext(RDI)
	instruction(0x22568)
	$U1:8 = RBP + 0xffffffffffffff88:8
	RDI = ram[$U1:8]
	instruction(0x2256c)
	RAX = 0x2c315:8
	instruction(0x22573)
	XMM0_Qb = XMM1_Qa
	instruction(0x22577)
	RSI = 0x228e0:8
	instruction(0x2257e)
	$U1:8 = RAX
	ram[0x3be58:8] = $U1:8
	instruction(0x22585)
	$U1:8 = RBP
	ram[0x3aa90:8] = $U1:8
	instruction(0x2258c)
	$U1:16 = XMM0
	ram[0x3be48:8] = $U1:16
	instruction(0x22593)
	$U1:8 = 0x22598:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x20440:8

0x236b0  MOVZX R9D,byte ptr [R15 + 0x31e]
0x236b8  TEST R9B,0x4
0x236bc  JZ 0x236d3
<L0> (entry=0x236b0):
	instruction(0x236b0)
	$U1:8 = R15 + 0x31e:8
	$U2:1 = ram[$U1:8]
	R9D = zext($U2:1)
	R9 = zext(R9D)
	instruction(0x236b8)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = R9B & 0x4:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x236bc)
	if ZF jump 0x236d3:8

0x28280  AND RSI,-0x10
0x28284  AND RDI,-0x10
0x28288  MOV EDX,0xffff
0x2828d  XOR R8D,R8D
0x28290  AND ECX,0xf
0x28293  AND EAX,0xf
0x28296  CMP ECX,EAX
0x28298  JZ 0x282c0
<L0> (entry=0x28280):
	instruction(0x28280)
	CF = 0x0:1
	OF = 0x0:1
	RSI = RSI & 0xfffffffffffffff0:8
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x28284)
	CF = 0x0:1
	OF = 0x0:1
	RDI = RDI & 0xfffffffffffffff0:8
	SF = RDI s< 0x0:8
	ZF = RDI == 0x0:8
	$U1:8 = RDI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x28288)
	RDX = 0xffff:8
	instruction(0x2828d)
	CF = 0x0:1
	OF = 0x0:1
	R8D = R8D ^ R8D
	R8 = zext(R8D)
	SF = R8D s< 0x0:4
	ZF = R8D == 0x0:4
	$U1:4 = R8D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x28290)
	CF = 0x0:1
	OF = 0x0:1
	ECX = ECX & 0xf:4
	RCX = zext(ECX)
	SF = ECX s< 0x0:4
	ZF = ECX == 0x0:4
	$U1:4 = ECX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x28293)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX & 0xf:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x28296)
	CF = ECX < EAX
	OF = ECX sborrow EAX
	$U1:4 = ECX - EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x28298)
	if ZF jump 0x282c0:8

0x23835  MOV RDX,qword ptr [R15 + 0x10]
0x23839  TEST RDX,RDX
0x2383c  JZ 0x2398f
<L0> (entry=0x23835):
	instruction(0x23835)
	$U1:8 = R15 + 0x10:8
	RDX = ram[$U1:8]
	instruction(0x23839)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RDX & RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2383c)
	if ZF jump 0x2398f:8

0x1f273  TEST RAX,RAX
0x1f276  JZ 0x1f2c0
<L0> (entry=0x1f273):
	instruction(0x1f273)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1f276)
	if ZF jump 0x1f2c0:8

0x4440  LEA RAX,[RSI + RSI*0x4]
0x4444  LEA RCX,[0x3b040]
0x444b  SHL RAX,0x5
0x444f  MOV RAX,qword ptr [RCX + RAX*0x1]
0x4453  MOV qword ptr [R8 + 0x8],RAX
0x4457  JMP 0x43b4
<L0> (entry=0x4440):
	instruction(0x4440)
	$U2:8 = RSI * 0x4:8
	$U1:8 = RSI + $U2:8
	RAX = $U1:8
	instruction(0x4444)
	RCX = 0x3b040:8
	instruction(0x444b)
	$U1:8 = 0x5:8 & 0x3f:8
	$U2:8 = RAX
	RAX = RAX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RAX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RAX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RAX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RAX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x444f)
	$U2:8 = RAX * 0x1:8
	$U1:8 = RCX + $U2:8
	RAX = ram[$U1:8]
	instruction(0x4453)
	$U1:8 = R8 + 0x8:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x4457)
	jump 0x43b4:8

0x2b810  ENDBR64
0x2b814  MOVD XMM1, ESI
0x2b818  MOV EAX,EDI
0x2b81a  AND EAX,0xfff
0x2b81f  PUNPCKLBW XMM1, XMM1
0x2b823  CMP EAX,0xfc0
0x2b828  PUNPCKLWD XMM1, XMM1
0x2b82c  PSHUFD XMM1, XMM1, 0x0
0x2b831  JG 0x2b9a0
<L0> (entry=0x2b810):
	instruction(0x2b810)
	instruction(0x2b814)
	XMM1 = zext(ESI)
	instruction(0x2b818)
	EAX = EDI
	RAX = zext(EAX)
	instruction(0x2b81a)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX & 0xfff:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2b81f)
	XMM1_Bp = XMM1_Bh
	XMM1_Bo = XMM1_Bh
	XMM1_Bn = XMM1_Bg
	XMM1_Bm = XMM1_Bg
	XMM1_Bl = XMM1_Bf
	XMM1_Bk = XMM1_Bf
	XMM1_Bj = XMM1_Be
	XMM1_Bi = XMM1_Be
	XMM1_Bh = XMM1_Bd
	XMM1_Bg = XMM1_Bd
	XMM1_Bf = XMM1_Bc
	XMM1_Be = XMM1_Bc
	XMM1_Bd = XMM1_Bb
	XMM1_Bc = XMM1_Bb
	XMM1_Bb = XMM1_Ba
	instruction(0x2b823)
	CF = EAX < 0xfc0:4
	OF = EAX sborrow 0xfc0:4
	$U1:4 = EAX - 0xfc0:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2b828)
	XMM1_Wh = XMM1_Wd
	XMM1_Wg = XMM1_Wd
	XMM1_Wf = XMM1_Wc
	XMM1_We = XMM1_Wc
	XMM1_Wd = XMM1_Wb
	XMM1_Wc = XMM1_Wb
	XMM1_Wb = XMM1_Wa
	instruction(0x2b82c)
	$U1:16 = XMM1
	$U2:16 = $U1:16 >> 0x0:1
	XMM1_Da = $U2:4
	$U2:16 = $U1:16 >> 0x0:1
	XMM1_Db = $U2:4
	$U2:16 = $U1:16 >> 0x0:1
	XMM1_Dc = $U2:4
	$U2:16 = $U1:16 >> 0x0:1
	XMM1_Dd = $U2:4
	instruction(0x2b831)
	$U2:1 = !ZF
	$U3:1 = OF == SF
	$U1:1 = $U2:1 && $U3:1
	if $U1:1 jump 0x2b9a0:8

0x14719  XOR EAX,EAX
0x1471b  CMP dword ptr [RSP + 0xc],0x1
0x14720  SETNZ AL
0x14723  MOV dword ptr [0x3ae08],EAX
0x14729  ADD RSP,0x18
0x1472d  RET
<L0> (entry=0x14719):
	instruction(0x14719)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1471b)
	$U5:8 = 0xc:8 + RSP
	$U6:4 = ram[$U5:8]
	CF = $U6:4 < 0x1:4
	$U7:4 = ram[$U5:8]
	OF = $U7:4 sborrow 0x1:4
	$U8:4 = ram[$U5:8]
	$U1:4 = $U8:4 - 0x1:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x14720)
	$U1:1 = !ZF
	AL = $U1:1
	instruction(0x14723)
	$U1:4 = EAX
	ram[0x3ae08:8] = $U1:4
	instruction(0x14729)
	CF = RSP carry 0x18:8
	OF = RSP scarry 0x18:8
	RSP = RSP + 0x18:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1472d)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x23828  CMP byte ptr [RBP + -0x290],0x0
0x2382f  JNZ 0x239db
<L0> (entry=0x23828):
	instruction(0x23828)
	$U5:8 = RBP + 0xfffffffffffffd70:8
	$U6:1 = ram[$U5:8]
	CF = $U6:1 < 0x0:1
	$U7:1 = ram[$U5:8]
	OF = $U7:1 sborrow 0x0:1
	$U8:1 = ram[$U5:8]
	$U1:1 = $U8:1 - 0x0:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2382f)
	$U1:1 = !ZF
	if $U1:1 jump 0x239db:8

0x240d3  TEST EAX,EAX
0x240d5  JS 0x2574f
<L0> (entry=0x240d3):
	instruction(0x240d3)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x240d5)
	if SF jump 0x2574f:8

0x1eb81  MOV RDX,qword ptr [R13 + -0x8]
0x1eb85  MOV RSI,qword ptr [R13 + -0x10]
0x1eb89  SUB R13,0x10
0x1eb8d  CALL 0x2bfa0
<L0> (entry=0x1eb81):
	instruction(0x1eb81)
	$U1:8 = R13 + 0xfffffffffffffff8:8
	RDX = ram[$U1:8]
	instruction(0x1eb85)
	$U1:8 = R13 + 0xfffffffffffffff0:8
	RSI = ram[$U1:8]
	instruction(0x1eb89)
	CF = R13 < 0x10:8
	OF = R13 sborrow 0x10:8
	R13 = R13 - 0x10:8
	SF = R13 s< 0x0:8
	ZF = R13 == 0x0:8
	$U1:8 = R13 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1eb8d)
	$U1:8 = 0x1eb92:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2bfa0:8

0x1785a  LEA RSP,[RBP + -0x28]
0x1785e  XOR EAX,EAX
0x17860  POP RBX
0x17861  POP R12
0x17863  POP R13
0x17865  POP R14
0x17867  POP R15
0x17869  POP RBP
0x1786a  RET
<L0> (entry=0x1785a):
	instruction(0x1785a)
	$U1:8 = RBP + 0xffffffffffffffd8:8
	RSP = $U1:8
	instruction(0x1785e)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x17860)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0x17861)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R12 = $U1:8
	instruction(0x17863)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R13 = $U1:8
	instruction(0x17865)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R14 = $U1:8
	instruction(0x17867)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R15 = $U1:8
	instruction(0x17869)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBP = $U1:8
	instruction(0x1786a)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x7ed0  OR qword ptr [RSP + RSI*0x1 + -0x8],0x0
0x7ed6  JMP 0x7bad
<L0> (entry=0x7ed0):
	instruction(0x7ed0)
	$U5:8 = 0xfffffffffffffff8:8 + RSP
	$U6:8 = RSI * 0x1:8
	$U4:8 = $U5:8 + $U6:8
	CF = 0x0:1
	OF = 0x0:1
	$U7:8 = ram[$U4:8]
	$U8:8 = $U7:8 | 0x0:8
	ram[$U4:8] = $U8:8
	$U9:8 = ram[$U4:8]
	SF = $U9:8 s< 0x0:8
	$U10:8 = ram[$U4:8]
	ZF = $U10:8 == 0x0:8
	$U11:8 = ram[$U4:8]
	$U1:8 = $U11:8 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7ed6)
	jump 0x7bad:8

0x54f0  MOV dword ptr [RBP + -0x498],EAX
0x54f6  JMP 0x4fee
<L0> (entry=0x54f0):
	instruction(0x54f0)
	$U1:8 = RBP + 0xfffffffffffffb68:8
	$U2:4 = EAX
	ram[$U1:8] = $U2:4
	instruction(0x54f6)
	jump 0x4fee:8

0x109da  MOVSXD RSI,dword ptr [RBP + -0x45c]
0x109e1  MOV RDX,qword ptr [RBP + -0x458]
0x109e8  MOV R9D,dword ptr [RBP + -0x460]
0x109ef  CMP RSI,RAX
0x109f2  MOV RCX,RSI
0x109f5  CMOVA RSI,RAX
0x109f9  CMP ECX,-0x1
0x109fc  CMOVNZ RAX,RSI
0x10a00  ADD R12D,0x1
0x10a04  MOV qword ptr [RBP + RDX*0x1 + -0x428],RAX
0x10a0c  JMP 0x106f0
<L0> (entry=0x109da):
	instruction(0x109da)
	$U1:8 = RBP + 0xfffffffffffffba4:8
	$U2:4 = ram[$U1:8]
	RSI = sext($U2:4)
	instruction(0x109e1)
	$U1:8 = RBP + 0xfffffffffffffba8:8
	RDX = ram[$U1:8]
	instruction(0x109e8)
	$U1:8 = RBP + 0xfffffffffffffba0:8
	R9D = ram[$U1:8]
	R9 = zext(R9D)
	instruction(0x109ef)
	CF = RSI < RAX
	OF = RSI sborrow RAX
	$U1:8 = RSI - RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x109f2)
	RCX = RSI
	instruction(0x109f5)
	$U4:1 = CF || ZF
	$U3:1 = !$U4:1
	$U1:8 = RAX
	$U2:1 = !$U3:1
	if $U2:1 jump <L1035>
<L1>:
	RSI = $U1:8
<L2>:
	instruction(0x109f9)
	CF = ECX < 0xffffffff:4
	OF = ECX sborrow 0xffffffff:4
	$U1:4 = ECX - 0xffffffff:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x109fc)
	$U3:1 = !ZF
	$U1:8 = RSI
	$U2:1 = !$U3:1
	if $U2:1 jump <L1037>
<L3>:
	RAX = $U1:8
<L4>:
	instruction(0x10a00)
	CF = R12D carry 0x1:4
	OF = R12D scarry 0x1:4
	R12D = R12D + 0x1:4
	R12 = zext(R12D)
	SF = R12D s< 0x0:4
	ZF = R12D == 0x0:4
	$U1:4 = R12D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x10a04)
	$U2:8 = 0xfffffffffffffbd8:8 + RBP
	$U3:8 = RDX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	$U4:8 = RAX
	ram[$U1:8] = $U4:8
	instruction(0x10a0c)
	jump 0x106f0:8

0x1053a  TEST R9D,R9D
0x1053d  MOV RDX,RBX
0x10540  SETZ CL
0x10543  JMP 0x10558
<L0> (entry=0x1053a):
	instruction(0x1053a)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = R9D & R9D
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1053d)
	RDX = RBX
	instruction(0x10540)
	CL = ZF
	instruction(0x10543)
	jump 0x10558:8

0x2350a  CMP EBX,0x4
0x2350d  JNZ 0x233af
<L0> (entry=0x2350a):
	instruction(0x2350a)
	CF = EBX < 0x4:4
	OF = EBX sborrow 0x4:4
	$U1:4 = EBX - 0x4:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2350d)
	$U1:1 = !ZF
	if $U1:1 jump 0x233af:8

0x2c1c2  CMP RDX,0x20
0x2c1c6  JA 0x2c1da
<L0> (entry=0x2c1c2):
	instruction(0x2c1c2)
	CF = RDX < 0x20:8
	OF = RDX sborrow 0x20:8
	$U1:8 = RDX - 0x20:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2c1c6)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x2c1da:8

0x27b70  RET
<L0> (entry=0x27b70):
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x7d3b  LEA R8,[RSP + 0xf]
0x7d40  MOV RCX,R10
0x7d43  MOV RDX,RBX
0x7d46  MOV EDI,R15D
0x7d49  AND R8,-0x10
0x7d4d  MOV RSI,R8
0x7d50  MOV qword ptr [RBP + -0x40],R8
0x7d54  CALL 0x27b90
<L0> (entry=0x7d3b):
	instruction(0x7d3b)
	$U1:8 = 0xf:8 + RSP
	R8 = $U1:8
	instruction(0x7d40)
	RCX = R10
	instruction(0x7d43)
	RDX = RBX
	instruction(0x7d46)
	EDI = R15D
	RDI = zext(EDI)
	instruction(0x7d49)
	CF = 0x0:1
	OF = 0x0:1
	R8 = R8 & 0xfffffffffffffff0:8
	SF = R8 s< 0x0:8
	ZF = R8 == 0x0:8
	$U1:8 = R8 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7d4d)
	RSI = R8
	instruction(0x7d50)
	$U1:8 = RBP + 0xffffffffffffffc0:8
	$U2:8 = R8
	ram[$U1:8] = $U2:8
	instruction(0x7d54)
	$U1:8 = 0x7d59:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x27b90:8

0x1af76  MOV EDI,0xb9
0x1af7b  MOV qword ptr [RSP + 0x98],RAX
0x1af83  MOV R13,RAX
0x1af86  CALL 0x19f10
<L0> (entry=0x1af76):
	instruction(0x1af76)
	RDI = 0xb9:8
	instruction(0x1af7b)
	$U1:8 = 0x98:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1af83)
	R13 = RAX
	instruction(0x1af86)
	$U1:8 = 0x1af8b:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x19f10:8

0x188c0  CMP RSI,R9
0x188c3  JA 0x18960
<L0> (entry=0x188c0):
	instruction(0x188c0)
	CF = RSI < R9
	OF = RSI sborrow R9
	$U1:8 = RSI - R9
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x188c3)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x18960:8

0x233e9  CMP R9,0xc
0x233ed  JBE 0x24c70
<L0> (entry=0x233e9):
	instruction(0x233e9)
	CF = R9 < 0xc:8
	OF = R9 sborrow 0xc:8
	$U1:8 = R9 - 0xc:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x233ed)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x24c70:8

0x1ebe0  MOV qword ptr [RAX + 0x8],0x0
0x1ebe8  ADD RAX,0x10
0x1ebec  CMP RAX,RDX
0x1ebef  JNZ 0x1ebe0
<L0> (entry=0x1ebe0):
	instruction(0x1ebe0)
	$U1:8 = RAX + 0x8:8
	$U2:8 = 0x0:8
	ram[$U1:8] = $U2:8
	instruction(0x1ebe8)
	CF = RAX carry 0x10:8
	OF = RAX scarry 0x10:8
	RAX = RAX + 0x10:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ebec)
	CF = RAX < RDX
	OF = RAX sborrow RDX
	$U1:8 = RAX - RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1ebef)
	$U1:1 = !ZF
	if $U1:1 jump 0x1ebe0:8

0x1aca5  MOV RSI,R14
0x1aca8  MOV EDI,0x3001
0x1acad  MOV EAX,0x9e
0x1acb2  SYSCALL
<L0> (entry=0x1aca5):
	instruction(0x1aca5)
	RSI = R14
	instruction(0x1aca8)
	RDI = 0x3001:8
	instruction(0x1acad)
	RAX = 0x9e:8
	instruction(0x1acb2)
	RCX = 0x1acb4:8
	$U1:1 = NT & 0x1:1
	$U2:8 = zext($U1:1)
	$U3:8 = 0x4000:8 * $U2:8
	$U4:1 = OF & 0x1:1
	$U5:8 = zext($U4:1)
	$U6:8 = 0x800:8 * $U5:8
	$U7:8 = $U3:8 | $U6:8
	$U8:1 = DF & 0x1:1
	$U9:8 = zext($U8:1)
	$U10:8 = 0x400:8 * $U9:8
	$U11:8 = $U7:8 | $U10:8
	$U12:1 = IF & 0x1:1
	$U13:8 = zext($U12:1)
	$U14:8 = 0x200:8 * $U13:8
	$U15:8 = $U11:8 | $U14:8
	$U16:1 = TF & 0x1:1
	$U17:8 = zext($U16:1)
	$U18:8 = 0x100:8 * $U17:8
	$U19:8 = $U15:8 | $U18:8
	$U20:1 = SF & 0x1:1
	$U21:8 = zext($U20:1)
	$U22:8 = 0x80:8 * $U21:8
	$U23:8 = $U19:8 | $U22:8
	$U24:1 = ZF & 0x1:1
	$U25:8 = zext($U24:1)
	$U26:8 = 0x40:8 * $U25:8
	$U27:8 = $U23:8 | $U26:8
	$U28:1 = AF & 0x1:1
	$U29:8 = zext($U28:1)
	$U30:8 = 0x10:8 * $U29:8
	$U31:8 = $U27:8 | $U30:8
	$U32:1 = PF & 0x1:1
	$U33:8 = zext($U32:1)
	$U34:8 = 0x4:8 * $U33:8
	$U35:8 = $U31:8 | $U34:8
	$U36:1 = CF & 0x1:1
	$U37:8 = zext($U36:1)
	$U38:8 = 0x1:8 * $U37:8
	R11 = $U35:8 | $U38:8
	NEXT_PC = 0x1acb4:8
	exception(0x101:4, 0x0:4)

0x241f7  TEST RAX,RAX
0x241fa  JNZ 0x241e0
<L0> (entry=0x241f7):
	instruction(0x241f7)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x241fa)
	$U1:1 = !ZF
	if $U1:1 jump 0x241e0:8

0x24338  LEA R13,[0x30d90]
0x2433f  MOV ESI,0x4
0x24344  MOV RDI,R13
0x24347  CALL 0x279a0
<L0> (entry=0x24338):
	instruction(0x24338)
	R13 = 0x30d90:8
	instruction(0x2433f)
	RSI = 0x4:8
	instruction(0x24344)
	RDI = R13
	instruction(0x24347)
	$U1:8 = 0x2434c:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x279a0:8

0x25127  LEA RAX,[0x3bb08]
0x2512e  MOV qword ptr [0x3add8],0x0
0x25139  MOV qword ptr [RBP + -0x288],RAX
0x25140  MOV qword ptr [0x3ade0],0x0
0x2514b  MOV qword ptr [0x3ade8],0x0
0x25156  MOV qword ptr [0x3adf0],0x0
0x25161  XOR EAX,EAX
0x25163  JMP 0x240c7
<L0> (entry=0x25127):
	instruction(0x25127)
	RAX = 0x3bb08:8
	instruction(0x2512e)
	$U1:8 = 0x0:8
	ram[0x3add8:8] = $U1:8
	instruction(0x25139)
	$U1:8 = RBP + 0xfffffffffffffd78:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x25140)
	$U1:8 = 0x0:8
	ram[0x3ade0:8] = $U1:8
	instruction(0x2514b)
	$U1:8 = 0x0:8
	ram[0x3ade8:8] = $U1:8
	instruction(0x25156)
	$U1:8 = 0x0:8
	ram[0x3adf0:8] = $U1:8
	instruction(0x25161)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x25163)
	jump 0x240c7:8

0x5328  CMP qword ptr [R15 + 0x3d0],0x0
0x5330  JNZ 0x4a06
<L0> (entry=0x5328):
	instruction(0x5328)
	$U5:8 = R15 + 0x3d0:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x0:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x0:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x5330)
	$U1:1 = !ZF
	if $U1:1 jump 0x4a06:8

0xb7e5  MOV RAX,qword ptr [0x3b040]
0xb7ec  MOV R14,qword ptr [RSP + 0x40]
0xb7f1  MOV qword ptr [RSP + 0x48],RBP
0xb7f6  MOV qword ptr [RSP + 0x30],R12
0xb7fb  MOV qword ptr [RSP + 0x28],RAX
0xb800  XOR EAX,EAX
0xb802  MOV EBP,EAX
0xb804  JMP 0xb865
<L0> (entry=0xb7e5):
	instruction(0xb7e5)
	RAX = ram[0x3b040:8]
	instruction(0xb7ec)
	$U1:8 = 0x40:8 + RSP
	R14 = ram[$U1:8]
	instruction(0xb7f1)
	$U1:8 = 0x48:8 + RSP
	$U2:8 = RBP
	ram[$U1:8] = $U2:8
	instruction(0xb7f6)
	$U1:8 = 0x30:8 + RSP
	$U2:8 = R12
	ram[$U1:8] = $U2:8
	instruction(0xb7fb)
	$U1:8 = 0x28:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0xb800)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xb802)
	EBP = EAX
	RBP = zext(EBP)
	instruction(0xb804)
	jump 0xb865:8

0x279d0  ENDBR64
0x279d4  MOV EAX,0x3
0x279d9  SYSCALL
<L0> (entry=0x279d0):
	instruction(0x279d0)
	instruction(0x279d4)
	RAX = 0x3:8
	instruction(0x279d9)
	RCX = 0x279db:8
	$U1:1 = NT & 0x1:1
	$U2:8 = zext($U1:1)
	$U3:8 = 0x4000:8 * $U2:8
	$U4:1 = OF & 0x1:1
	$U5:8 = zext($U4:1)
	$U6:8 = 0x800:8 * $U5:8
	$U7:8 = $U3:8 | $U6:8
	$U8:1 = DF & 0x1:1
	$U9:8 = zext($U8:1)
	$U10:8 = 0x400:8 * $U9:8
	$U11:8 = $U7:8 | $U10:8
	$U12:1 = IF & 0x1:1
	$U13:8 = zext($U12:1)
	$U14:8 = 0x200:8 * $U13:8
	$U15:8 = $U11:8 | $U14:8
	$U16:1 = TF & 0x1:1
	$U17:8 = zext($U16:1)
	$U18:8 = 0x100:8 * $U17:8
	$U19:8 = $U15:8 | $U18:8
	$U20:1 = SF & 0x1:1
	$U21:8 = zext($U20:1)
	$U22:8 = 0x80:8 * $U21:8
	$U23:8 = $U19:8 | $U22:8
	$U24:1 = ZF & 0x1:1
	$U25:8 = zext($U24:1)
	$U26:8 = 0x40:8 * $U25:8
	$U27:8 = $U23:8 | $U26:8
	$U28:1 = AF & 0x1:1
	$U29:8 = zext($U28:1)
	$U30:8 = 0x10:8 * $U29:8
	$U31:8 = $U27:8 | $U30:8
	$U32:1 = PF & 0x1:1
	$U33:8 = zext($U32:1)
	$U34:8 = 0x4:8 * $U33:8
	$U35:8 = $U31:8 | $U34:8
	$U36:1 = CF & 0x1:1
	$U37:8 = zext($U36:1)
	$U38:8 = 0x1:8 * $U37:8
	R11 = $U35:8 | $U38:8
	NEXT_PC = 0x279db:8
	exception(0x101:4, 0x0:4)

0x2c000  MOV ECX,dword ptr [RSI + RDX*0x1 + -0x4]
0x2c004  MOV ESI,dword ptr [RSI]
0x2c006  MOV dword ptr [RDI + RDX*0x1 + -0x4],ECX
0x2c00a  MOV dword ptr [RDI],ESI
0x2c00c  RET
<L0> (entry=0x2c000):
	instruction(0x2c000)
	$U2:8 = 0xfffffffffffffffc:8 + RSI
	$U3:8 = RDX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	ECX = ram[$U1:8]
	RCX = zext(ECX)
	instruction(0x2c004)
	ESI = ram[RSI]
	RSI = zext(ESI)
	instruction(0x2c006)
	$U2:8 = 0xfffffffffffffffc:8 + RDI
	$U3:8 = RDX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	$U4:4 = ECX
	ram[$U1:8] = $U4:4
	instruction(0x2c00a)
	$U1:4 = ESI
	ram[RDI] = $U1:4
	instruction(0x2c00c)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x796a  MOV ESI,0x80000
0x796f  MOV RDI,R14
0x7972  XOR EAX,EAX
0x7974  CALL 0x27ae0
<L0> (entry=0x796a):
	instruction(0x796a)
	RSI = 0x80000:8
	instruction(0x796f)
	RDI = R14
	instruction(0x7972)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7974)
	$U1:8 = 0x7979:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x27ae0:8

0x1ad90  MOV EDX,dword ptr [0x3ab98]
0x1ad96  TEST EDX,0x10000000
0x1ad9c  JZ 0x1ade0
<L0> (entry=0x1ad90):
	instruction(0x1ad90)
	EDX = ram[0x3ab98:8]
	RDX = zext(EDX)
	instruction(0x1ad96)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EDX & 0x10000000:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1ad9c)
	if ZF jump 0x1ade0:8

0x4f3e  MOV EAX,dword ptr [RBP + -0x4c8]
0x4f44  LEA EDI,[RAX + RAX*0x1 + 0x1]
0x4f48  SHL RDI,0x3
0x4f4c  CALL qword ptr [0x3aa60]
<L0> (entry=0x4f3e):
	instruction(0x4f3e)
	$U1:8 = RBP + 0xfffffffffffffb38:8
	EAX = ram[$U1:8]
	RAX = zext(EAX)
	instruction(0x4f44)
	$U2:8 = 0x1:8 + RAX
	$U3:8 = RAX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	EDI = $U1:4
	RDI = zext(EDI)
	instruction(0x4f48)
	$U1:8 = 0x3:8 & 0x3f:8
	$U2:8 = RDI
	RDI = RDI << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RDI s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RDI s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RDI == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RDI & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x4f4c)
	$U1:8 = ram[0x3aa60:8]
	$U2:8 = 0x4f52:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U2:8
	call $U1:8

0x8e70  ENDBR64
0x8e74  PUSH R14
0x8e76  MOV ESI,0x24
0x8e7b  PUSH R13
0x8e7d  PUSH R12
0x8e7f  XOR R12D,R12D
0x8e82  PUSH RBP
0x8e83  PUSH RBX
0x8e84  CALL 0x2b810
<L0> (entry=0x8e70):
	instruction(0x8e70)
	instruction(0x8e74)
	$U1:8 = R14
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x8e76)
	RSI = 0x24:8
	instruction(0x8e7b)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x8e7d)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x8e7f)
	CF = 0x0:1
	OF = 0x0:1
	R12D = R12D ^ R12D
	R12 = zext(R12D)
	SF = R12D s< 0x0:4
	ZF = R12D == 0x0:4
	$U1:4 = R12D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x8e82)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x8e83)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x8e84)
	$U1:8 = 0x8e89:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2b810:8

0x2bfbd  MOVUPS XMM0, xmmword ptr [RSI]
0x2bfc0  CMP RDX,0x20
0x2bfc4  JA 0x2c040
<L0> (entry=0x2bfbd):
	instruction(0x2bfbd)
	$U1:16 = ram[RSI]
	XMM0_Da = $U1:4
	XMM0_Db = $U1[4]:4
	XMM0_Dc = $U1[8]:4
	XMM0_Dd = $U1[12]:4
	instruction(0x2bfc0)
	CF = RDX < 0x20:8
	OF = RDX sborrow 0x20:8
	$U1:8 = RDX - 0x20:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2bfc4)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x2c040:8

0xe540  RET
<L0> (entry=0xe540):
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x14670  MOV RAX,qword ptr [R13]
0x14674  LEA RDX,[RAX + -0x8]
0x14678  MOV qword ptr [R13],RDX
0x1467c  MOV qword ptr [RAX + -0x8],RBP
0x14680  ADD RSP,0x8
0x14684  POP RBX
0x14685  POP RBP
0x14686  POP R12
0x14688  POP R13
0x1468a  RET
<L0> (entry=0x14670):
	instruction(0x14670)
	RAX = ram[R13]
	instruction(0x14674)
	$U1:8 = RAX + 0xfffffffffffffff8:8
	RDX = $U1:8
	instruction(0x14678)
	$U1:8 = RDX
	ram[R13] = $U1:8
	instruction(0x1467c)
	$U1:8 = RAX + 0xfffffffffffffff8:8
	$U2:8 = RBP
	ram[$U1:8] = $U2:8
	instruction(0x14680)
	CF = RSP carry 0x8:8
	OF = RSP scarry 0x8:8
	RSP = RSP + 0x8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x14684)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0x14685)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBP = $U1:8
	instruction(0x14686)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R12 = $U1:8
	instruction(0x14688)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R13 = $U1:8
	instruction(0x1468a)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x1f350  LEA RCX,[RSI + RDX*0x1 + -0x1]
0x1f355  MOVSXD RDI,EDI
0x1f358  LEA R10,[0x30cd0]
0x1f35f  MOV R9,-0x3333333333333333
0x1f369  MOV byte ptr [RCX],0x0
0x1f36c  NOP dword ptr [RAX]
0x1f370  MOV RAX,RDI
0x1f373  MOV RSI,RDI
0x1f376  MOV R8,RCX
0x1f379  SUB RCX,0x1
0x1f37d  MUL R9
0x1f380  SHR RDX,0x3
0x1f384  LEA RAX,[RDX + RDX*0x4]
0x1f388  ADD RAX,RAX
0x1f38b  SUB RSI,RAX
0x1f38e  MOVZX EAX,byte ptr [R10 + RSI*0x1]
0x1f393  MOV byte ptr [RCX],AL
0x1f395  MOV RAX,RDI
0x1f398  MOV RDI,RDX
0x1f39b  CMP RAX,0x9
0x1f39f  JA 0x1f370
<L0> (entry=0x1f350):
	instruction(0x1f350)
	$U2:8 = 0xffffffffffffffff:8 + RSI
	$U3:8 = RDX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	RCX = $U1:8
	instruction(0x1f355)
	RDI = sext(EDI)
	instruction(0x1f358)
	R10 = 0x30cd0:8
	instruction(0x1f35f)
	R9 = 0xcccccccccccccccd:8
	instruction(0x1f369)
	$U1:1 = 0x0:1
	ram[RCX] = $U1:1
	instruction(0x1f36c)
	instruction(0x1f370)
	RAX = RDI
	instruction(0x1f373)
	RSI = RDI
	instruction(0x1f376)
	R8 = RCX
	instruction(0x1f379)
	CF = RCX < 0x1:8
	OF = RCX sborrow 0x1:8
	RCX = RCX - 0x1:8
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1f37d)
	$U2:16 = zext(RAX)
	$U3:16 = zext(R9)
	$U1:16 = $U2:16 * $U3:16
	RDX = $U1[8]:8
	RAX = $U1:8
	CF = RDX != 0x0:8
	OF = CF
	instruction(0x1f380)
	$U1:8 = 0x3:8 & 0x3f:8
	$U2:8 = RDX
	RDX = RDX >> $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 >> $U5:8
	$U7:8 = $U6:8 & 0x1:8
	$U4:1 = $U7:8 != 0x0:8
	$U8:1 = !$U3:1
	$U9:1 = $U8:1 && CF
	$U10:1 = $U3:1 && $U4:1
	CF = $U9:1 || $U10:1
	$U11:1 = $U1:8 == 0x1:8
	$U12:1 = $U2:8 s< 0x0:8
	$U13:1 = !$U11:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U11:1 && $U12:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RDX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RDX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RDX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1f384)
	$U2:8 = RDX * 0x4:8
	$U1:8 = RDX + $U2:8
	RAX = $U1:8
	instruction(0x1f388)
	CF = RAX carry RAX
	OF = RAX scarry RAX
	RAX = RAX + RAX
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1f38b)
	CF = RSI < RAX
	OF = RSI sborrow RAX
	RSI = RSI - RAX
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1f38e)
	$U2:8 = RSI * 0x1:8
	$U1:8 = R10 + $U2:8
	$U3:1 = ram[$U1:8]
	EAX = zext($U3:1)
	RAX = zext(EAX)
	instruction(0x1f393)
	$U1:1 = AL
	ram[RCX] = $U1:1
	instruction(0x1f395)
	RAX = RDI
	instruction(0x1f398)
	RDI = RDX
	instruction(0x1f39b)
	CF = RAX < 0x9:8
	OF = RAX sborrow 0x9:8
	$U1:8 = RAX - 0x9:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1f39f)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x1f370:8

0x1f370  MOV RAX,RDI
0x1f373  MOV RSI,RDI
0x1f376  MOV R8,RCX
0x1f379  SUB RCX,0x1
0x1f37d  MUL R9
0x1f380  SHR RDX,0x3
0x1f384  LEA RAX,[RDX + RDX*0x4]
0x1f388  ADD RAX,RAX
0x1f38b  SUB RSI,RAX
0x1f38e  MOVZX EAX,byte ptr [R10 + RSI*0x1]
0x1f393  MOV byte ptr [RCX],AL
0x1f395  MOV RAX,RDI
0x1f398  MOV RDI,RDX
0x1f39b  CMP RAX,0x9
0x1f39f  JA 0x1f370
<L0> (entry=0x1f370):
	instruction(0x1f370)
	RAX = RDI
	instruction(0x1f373)
	RSI = RDI
	instruction(0x1f376)
	R8 = RCX
	instruction(0x1f379)
	CF = RCX < 0x1:8
	OF = RCX sborrow 0x1:8
	RCX = RCX - 0x1:8
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1f37d)
	$U2:16 = zext(RAX)
	$U3:16 = zext(R9)
	$U1:16 = $U2:16 * $U3:16
	RDX = $U1[8]:8
	RAX = $U1:8
	CF = RDX != 0x0:8
	OF = CF
	instruction(0x1f380)
	$U1:8 = 0x3:8 & 0x3f:8
	$U2:8 = RDX
	RDX = RDX >> $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 >> $U5:8
	$U7:8 = $U6:8 & 0x1:8
	$U4:1 = $U7:8 != 0x0:8
	$U8:1 = !$U3:1
	$U9:1 = $U8:1 && CF
	$U10:1 = $U3:1 && $U4:1
	CF = $U9:1 || $U10:1
	$U11:1 = $U1:8 == 0x1:8
	$U12:1 = $U2:8 s< 0x0:8
	$U13:1 = !$U11:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U11:1 && $U12:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RDX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RDX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RDX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1f384)
	$U2:8 = RDX * 0x4:8
	$U1:8 = RDX + $U2:8
	RAX = $U1:8
	instruction(0x1f388)
	CF = RAX carry RAX
	OF = RAX scarry RAX
	RAX = RAX + RAX
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1f38b)
	CF = RSI < RAX
	OF = RSI sborrow RAX
	RSI = RSI - RAX
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1f38e)
	$U2:8 = RSI * 0x1:8
	$U1:8 = R10 + $U2:8
	$U3:1 = ram[$U1:8]
	EAX = zext($U3:1)
	RAX = zext(EAX)
	instruction(0x1f393)
	$U1:1 = AL
	ram[RCX] = $U1:1
	instruction(0x1f395)
	RAX = RDI
	instruction(0x1f398)
	RDI = RDX
	instruction(0x1f39b)
	CF = RAX < 0x9:8
	OF = RAX sborrow 0x9:8
	$U1:8 = RAX - 0x9:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1f39f)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x1f370:8

0x10678  MOVZX EAX,byte ptr [RDX + 0x1]
0x1067c  CMP AL,0x30
0x1067e  JZ 0x1097d
<L0> (entry=0x10678):
	instruction(0x10678)
	$U1:8 = RDX + 0x1:8
	$U2:1 = ram[$U1:8]
	EAX = zext($U2:1)
	RAX = zext(EAX)
	instruction(0x1067c)
	CF = AL < 0x30:1
	OF = AL sborrow 0x30:1
	$U1:1 = AL - 0x30:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1067e)
	if ZF jump 0x1097d:8

0x10fbf  MOV EDI,0x7f
0x10fc4  CALL 0x27e90
<L0> (entry=0x10fbf):
	instruction(0x10fbf)
	RDI = 0x7f:8
	instruction(0x10fc4)
	$U1:8 = 0x10fc9:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x27e90:8

0x1a14c  MOV EBP,R13D
0x1a14f  AND EBP,0x800
0x1a155  OR EDI,EBP
0x1a157  MOV dword ptr [0x3ab98],EDI
0x1a15d  MOV R12D,R10D
0x1a160  MOV EBP,R8D
0x1a163  AND R12D,0x100000
0x1a16a  AND EBP,0x80
0x1a170  OR R12D,EDX
0x1a173  OR EBP,EAX
0x1a175  MOV dword ptr [0x3aba0],R12D
0x1a17c  MOV dword ptr [0x3ab9c],EBP
0x1a182  TEST ECX,ECX
0x1a184  JZ 0x1a1d5
<L0> (entry=0x1a14c):
	instruction(0x1a14c)
	EBP = R13D
	RBP = zext(EBP)
	instruction(0x1a14f)
	CF = 0x0:1
	OF = 0x0:1
	EBP = EBP & 0x800:4
	RBP = zext(EBP)
	SF = EBP s< 0x0:4
	ZF = EBP == 0x0:4
	$U1:4 = EBP & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a155)
	CF = 0x0:1
	OF = 0x0:1
	EDI = EDI | EBP
	RDI = zext(EDI)
	SF = EDI s< 0x0:4
	ZF = EDI == 0x0:4
	$U1:4 = EDI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a157)
	$U1:4 = EDI
	ram[0x3ab98:8] = $U1:4
	instruction(0x1a15d)
	R12D = R10D
	R12 = zext(R12D)
	instruction(0x1a160)
	EBP = R8D
	RBP = zext(EBP)
	instruction(0x1a163)
	CF = 0x0:1
	OF = 0x0:1
	R12D = R12D & 0x100000:4
	R12 = zext(R12D)
	SF = R12D s< 0x0:4
	ZF = R12D == 0x0:4
	$U1:4 = R12D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a16a)
	CF = 0x0:1
	OF = 0x0:1
	EBP = EBP & 0x80:4
	RBP = zext(EBP)
	SF = EBP s< 0x0:4
	ZF = EBP == 0x0:4
	$U1:4 = EBP & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a170)
	CF = 0x0:1
	OF = 0x0:1
	R12D = R12D | EDX
	R12 = zext(R12D)
	SF = R12D s< 0x0:4
	ZF = R12D == 0x0:4
	$U1:4 = R12D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a173)
	CF = 0x0:1
	OF = 0x0:1
	EBP = EBP | EAX
	RBP = zext(EBP)
	SF = EBP s< 0x0:4
	ZF = EBP == 0x0:4
	$U1:4 = EBP & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a175)
	$U1:4 = R12D
	ram[0x3aba0:8] = $U1:4
	instruction(0x1a17c)
	$U1:4 = EBP
	ram[0x3ab9c:8] = $U1:4
	instruction(0x1a182)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = ECX & ECX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1a184)
	if ZF jump 0x1a1d5:8

0x20768  MOV RAX,qword ptr [RDX + 0x8]
0x2076c  ADD RDX,0x10
0x20770  MOV byte ptr [RSP + 0x1c],0x1
0x20775  MOV qword ptr [RSP + 0x48],RAX
0x2077a  MOV RAX,qword ptr [RDX]
0x2077d  TEST RAX,RAX
0x20780  JNZ 0x20508
<L0> (entry=0x20768):
	instruction(0x20768)
	$U1:8 = RDX + 0x8:8
	RAX = ram[$U1:8]
	instruction(0x2076c)
	CF = RDX carry 0x10:8
	OF = RDX scarry 0x10:8
	RDX = RDX + 0x10:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x20770)
	$U1:8 = 0x1c:8 + RSP
	$U2:1 = 0x1:1
	ram[$U1:8] = $U2:1
	instruction(0x20775)
	$U1:8 = 0x48:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x2077a)
	RAX = ram[RDX]
	instruction(0x2077d)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x20780)
	$U1:1 = !ZF
	if $U1:1 jump 0x20508:8

0x24773  MOV RSI,R11
0x24776  SUB RSI,RAX
0x24779  CMP RSI,0xb
0x2477d  JBE 0x24c8a
<L0> (entry=0x24773):
	instruction(0x24773)
	RSI = R11
	instruction(0x24776)
	CF = RSI < RAX
	OF = RSI sborrow RAX
	RSI = RSI - RAX
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x24779)
	CF = RSI < 0xb:8
	OF = RSI sborrow 0xb:8
	$U1:8 = RSI - 0xb:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2477d)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x24c8a:8

0x20b42  MOVZX EDX,byte ptr [RDI + 0x1]
0x20b46  LEA RSI,[RDI + 0x1]
0x20b4a  MOVSX ECX,CL
0x20b4d  LEA EDI,[RDX + -0x30]
0x20b50  CMP DIL,0x9
0x20b54  JA 0x20b7c
<L0> (entry=0x20b42):
	instruction(0x20b42)
	$U1:8 = RDI + 0x1:8
	$U2:1 = ram[$U1:8]
	EDX = zext($U2:1)
	RDX = zext(EDX)
	instruction(0x20b46)
	$U1:8 = RDI + 0x1:8
	RSI = $U1:8
	instruction(0x20b4a)
	ECX = sext(CL)
	RCX = zext(ECX)
	instruction(0x20b4d)
	$U1:8 = RDX + 0xffffffffffffffd0:8
	EDI = $U1:4
	RDI = zext(EDI)
	instruction(0x20b50)
	CF = DIL < 0x9:1
	OF = DIL sborrow 0x9:1
	$U1:1 = DIL - 0x9:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x20b54)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x20b7c:8

0x1eaf0  MOV RAX,qword ptr [R12 + 0x8]
0x1eaf5  MOVSXD R15,dword ptr [RBP + -0x88]
0x1eafc  MOV qword ptr [RBP + -0x98],RBX
0x1eb03  MOV RDI,R14
0x1eb06  MOV qword ptr [RBP + -0x60],RAX
0x1eb0a  MOV RAX,qword ptr [R12]
0x1eb0e  MOV R14,R15
0x1eb11  MOV R12D,0x1
0x1eb17  MOV R15,qword ptr [RBP + -0xb0]
0x1eb1e  MOV qword ptr [RBP + -0x70],RAX
0x1eb22  MOV RAX,qword ptr [RBP + -0x78]
0x1eb26  LEA RCX,[RAX + -0x1]
0x1eb2a  SHL RAX,0x4
0x1eb2e  ADD RAX,qword ptr [RBP + -0x58]
0x1eb32  MOV qword ptr [RBP + -0x78],RCX
0x1eb36  MOV qword ptr [RBP + -0x68],RAX
0x1eb3a  NOP word ptr [RAX + RAX*0x1]
0x1eb40  MOV RDX,qword ptr [RBP + -0x60]
0x1eb44  MOV RSI,qword ptr [RBP + -0x70]
0x1eb48  SUB R14,0x2
0x1eb4c  CALL 0x2bfa0
<L0> (entry=0x1eaf0):
	instruction(0x1eaf0)
	$U1:8 = 0x8:8 + R12
	RAX = ram[$U1:8]
	instruction(0x1eaf5)
	$U1:8 = RBP + 0xffffffffffffff78:8
	$U2:4 = ram[$U1:8]
	R15 = sext($U2:4)
	instruction(0x1eafc)
	$U1:8 = RBP + 0xffffffffffffff68:8
	$U2:8 = RBX
	ram[$U1:8] = $U2:8
	instruction(0x1eb03)
	RDI = R14
	instruction(0x1eb06)
	$U1:8 = RBP + 0xffffffffffffffa0:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1eb0a)
	RAX = ram[R12]
	instruction(0x1eb0e)
	R14 = R15
	instruction(0x1eb11)
	R12 = 0x1:8
	instruction(0x1eb17)
	$U1:8 = RBP + 0xffffffffffffff50:8
	R15 = ram[$U1:8]
	instruction(0x1eb1e)
	$U1:8 = RBP + 0xffffffffffffff90:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1eb22)
	$U1:8 = RBP + 0xffffffffffffff88:8
	RAX = ram[$U1:8]
	instruction(0x1eb26)
	$U1:8 = RAX + 0xffffffffffffffff:8
	RCX = $U1:8
	instruction(0x1eb2a)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RAX
	RAX = RAX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RAX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RAX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RAX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RAX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1eb2e)
	$U4:8 = RBP + 0xffffffffffffffa8:8
	$U5:8 = ram[$U4:8]
	CF = RAX carry $U5:8
	$U6:8 = ram[$U4:8]
	OF = RAX scarry $U6:8
	$U7:8 = ram[$U4:8]
	RAX = RAX + $U7:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1eb32)
	$U1:8 = RBP + 0xffffffffffffff88:8
	$U2:8 = RCX
	ram[$U1:8] = $U2:8
	instruction(0x1eb36)
	$U1:8 = RBP + 0xffffffffffffff98:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1eb3a)
	$U2:8 = RAX * 0x1:8
	$U1:8 = RAX + $U2:8
	instruction(0x1eb40)
	$U1:8 = RBP + 0xffffffffffffffa0:8
	RDX = ram[$U1:8]
	instruction(0x1eb44)
	$U1:8 = RBP + 0xffffffffffffff90:8
	RSI = ram[$U1:8]
	instruction(0x1eb48)
	CF = R14 < 0x2:8
	OF = R14 sborrow 0x2:8
	R14 = R14 - 0x2:8
	SF = R14 s< 0x0:8
	ZF = R14 == 0x0:8
	$U1:8 = R14 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1eb4c)
	$U1:8 = 0x1eb51:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2bfa0:8

0x21290  MOV RDI,RSP
0x21293  CALL 0x22030
<L0> (entry=0x21290):
	instruction(0x21290)
	RDI = RSP
	instruction(0x21293)
	$U1:8 = 0x21298:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x22030:8

0x1edd0  MOV RSI,qword ptr [RBP + -0x58]
0x1edd4  SHL RCX,0x4
0x1edd8  MOV RCX,qword ptr [RSI + RCX*0x1 + 0x8]
0x1eddd  LEA RDX,[RDX + RCX*0x1 + 0x1]
0x1ede2  LEA RCX,[RAX + 0x1]
0x1ede6  CMP RCX,qword ptr [RBP + -0x80]
0x1edea  JNC 0x1ef33
<L0> (entry=0x1edd0):
	instruction(0x1edd0)
	$U1:8 = RBP + 0xffffffffffffffa8:8
	RSI = ram[$U1:8]
	instruction(0x1edd4)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RCX
	RCX = RCX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RCX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RCX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RCX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RCX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1edd8)
	$U2:8 = 0x8:8 + RSI
	$U3:8 = RCX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	RCX = ram[$U1:8]
	instruction(0x1eddd)
	$U2:8 = 0x1:8 + RDX
	$U3:8 = RCX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	RDX = $U1:8
	instruction(0x1ede2)
	$U1:8 = RAX + 0x1:8
	RCX = $U1:8
	instruction(0x1ede6)
	$U5:8 = RBP + 0xffffffffffffff80:8
	$U6:8 = ram[$U5:8]
	CF = RCX < $U6:8
	$U7:8 = ram[$U5:8]
	OF = RCX sborrow $U7:8
	$U8:8 = ram[$U5:8]
	$U1:8 = RCX - $U8:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1edea)
	$U1:1 = !CF
	if $U1:1 jump 0x1ef33:8

0x2c049  MOVUPS XMM1, xmmword ptr [RSI + 0x10]
0x2c04d  CMP RDX,0x40
0x2c051  JBE 0x2c021
<L0> (entry=0x2c049):
	instruction(0x2c049)
	$U2:8 = RSI + 0x10:8
	$U1:16 = ram[$U2:8]
	XMM1_Da = $U1:4
	XMM1_Db = $U1[4]:4
	XMM1_Dc = $U1[8]:4
	XMM1_Dd = $U1[12]:4
	instruction(0x2c04d)
	CF = RDX < 0x40:8
	OF = RDX sborrow 0x40:8
	$U1:8 = RDX - 0x40:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2c051)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x2c021:8

0x9710  ENDBR64
0x9714  PUSH RBP
0x9715  MOV RBP,RSP
0x9718  PUSH R15
0x971a  PUSH R14
0x971c  PUSH R13
0x971e  PUSH R12
0x9720  PUSH RBX
0x9721  SUB RSP,0x38
0x9725  MOV qword ptr [RBP + -0x50],RDI
0x9729  MOV RDI,RDX
0x972c  LEA RDX,[0x39ab8]
0x9733  MOV qword ptr [RBP + -0x58],RSI
0x9737  MOV RSI,RCX
0x973a  LEA RCX,[0x39ab0]
0x9741  CALL 0x1e480
<L0> (entry=0x9710):
	instruction(0x9710)
	instruction(0x9714)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x9715)
	RBP = RSP
	instruction(0x9718)
	$U1:8 = R15
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x971a)
	$U1:8 = R14
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x971c)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x971e)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x9720)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x9721)
	CF = RSP < 0x38:8
	OF = RSP sborrow 0x38:8
	RSP = RSP - 0x38:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x9725)
	$U1:8 = RBP + 0xffffffffffffffb0:8
	$U2:8 = RDI
	ram[$U1:8] = $U2:8
	instruction(0x9729)
	RDI = RDX
	instruction(0x972c)
	RDX = 0x39ab8:8
	instruction(0x9733)
	$U1:8 = RBP + 0xffffffffffffffa8:8
	$U2:8 = RSI
	ram[$U1:8] = $U2:8
	instruction(0x9737)
	RSI = RCX
	instruction(0x973a)
	RCX = 0x39ab0:8
	instruction(0x9741)
	$U1:8 = 0x9746:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x1e480:8

0x22108  MOV RSI,R10
0x2210b  SUB RSI,RAX
0x2210e  CMP RSI,0xb
0x22112  JA 0x225d0
<L0> (entry=0x22108):
	instruction(0x22108)
	RSI = R10
	instruction(0x2210b)
	CF = RSI < RAX
	OF = RSI sborrow RAX
	RSI = RSI - RAX
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2210e)
	CF = RSI < 0xb:8
	OF = RSI sborrow 0xb:8
	$U1:8 = RSI - 0xb:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x22112)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x225d0:8

0x2220b  MOV RSI,qword ptr [0x3bc68]
0x22212  TEST RSI,RSI
0x22215  JZ 0x22225
<L0> (entry=0x2220b):
	instruction(0x2220b)
	RSI = ram[0x3bc68:8]
	instruction(0x22212)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RSI & RSI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x22215)
	if ZF jump 0x22225:8

0x20628  MOV RAX,qword ptr [RDX + 0x8]
0x2062c  ADD RDX,0x10
0x20630  MOV R9D,0x1
0x20636  MOV qword ptr [RSP + 0x10],RAX
0x2063b  MOV RAX,qword ptr [RDX]
0x2063e  TEST RAX,RAX
0x20641  JNZ 0x20508
<L0> (entry=0x20628):
	instruction(0x20628)
	$U1:8 = RDX + 0x8:8
	RAX = ram[$U1:8]
	instruction(0x2062c)
	CF = RDX carry 0x10:8
	OF = RDX scarry 0x10:8
	RDX = RDX + 0x10:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x20630)
	R9 = 0x1:8
	instruction(0x20636)
	$U1:8 = 0x10:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x2063b)
	RAX = ram[RDX]
	instruction(0x2063e)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x20641)
	$U1:1 = !ZF
	if $U1:1 jump 0x20508:8

0xed85  MOV dword ptr [RSP + 0x8],0x10
0xed8d  MOV R11D,0x1
0xed93  MOV EDI,0x5a9
0xed98  XOR R13D,R13D
0xed9b  MOV EDX,0x100
0xeda0  LEA R12,[0x2fee9]
0xeda7  JMP 0xe9ee
<L0> (entry=0xed85):
	instruction(0xed85)
	$U1:8 = 0x8:8 + RSP
	$U2:4 = 0x10:4
	ram[$U1:8] = $U2:4
	instruction(0xed8d)
	R11 = 0x1:8
	instruction(0xed93)
	RDI = 0x5a9:8
	instruction(0xed98)
	CF = 0x0:1
	OF = 0x0:1
	R13D = R13D ^ R13D
	R13 = zext(R13D)
	SF = R13D s< 0x0:4
	ZF = R13D == 0x0:4
	$U1:4 = R13D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xed9b)
	RDX = 0x100:8
	instruction(0xeda0)
	R12 = 0x2fee9:8
	instruction(0xeda7)
	jump 0xe9ee:8

0x22263  MOV RCX,qword ptr [RCX + 0x8]
0x22267  TEST DIL,DIL
0x2226a  MOV R9,qword ptr [0x3bc78]
0x22271  LEA RSI,[RCX + R12*0x1]
0x22275  CMOVNZ RCX,RSI
0x22279  MOV RSI,qword ptr [0x3bb70]
0x22280  MOV RSI,qword ptr [RSI + 0x8]
0x22284  MOVQ XMM0, RCX
0x22289  MOVQ XMM2, RSI
0x2228e  LEA R8,[RSI + RCX*0x1]
0x22292  PUNPCKLQDQ XMM0, XMM2
0x22296  MOVAPS xmmword ptr [RBP + -0x70], XMM0
0x2229a  TEST R9,R9
0x2229d  JZ 0x222a7
<L0> (entry=0x22263):
	instruction(0x22263)
	$U1:8 = RCX + 0x8:8
	RCX = ram[$U1:8]
	instruction(0x22267)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = DIL & DIL
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2226a)
	R9 = ram[0x3bc78:8]
	instruction(0x22271)
	$U2:8 = R12 * 0x1:8
	$U1:8 = RCX + $U2:8
	RSI = $U1:8
	instruction(0x22275)
	$U3:1 = !ZF
	$U1:8 = RSI
	$U2:1 = !$U3:1
	if $U2:1 jump <L31>
<L1>:
	RCX = $U1:8
<L2>:
	instruction(0x22279)
	RSI = ram[0x3bb70:8]
	instruction(0x22280)
	$U1:8 = RSI + 0x8:8
	RSI = ram[$U1:8]
	instruction(0x22284)
	XMM0 = zext(RCX)
	instruction(0x22289)
	XMM2 = zext(RSI)
	instruction(0x2228e)
	$U2:8 = RCX * 0x1:8
	$U1:8 = RSI + $U2:8
	R8 = $U1:8
	instruction(0x22292)
	XMM0_Qb = XMM2_Qa
	instruction(0x22296)
	$U1:8 = RBP + 0xffffffffffffff90:8
	$U2:16 = XMM0
	ram[$U1:8] = $U2:16
	instruction(0x2229a)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R9 & R9
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2229d)
	if ZF jump 0x222a7:8

0x236a9  MOV qword ptr [R15 + 0x358],RSI
0x236b0  MOVZX R9D,byte ptr [R15 + 0x31e]
0x236b8  TEST R9B,0x4
0x236bc  JZ 0x236d3
<L0> (entry=0x236a9):
	instruction(0x236a9)
	$U1:8 = R15 + 0x358:8
	$U2:8 = RSI
	ram[$U1:8] = $U2:8
	instruction(0x236b0)
	$U1:8 = R15 + 0x31e:8
	$U2:1 = ram[$U1:8]
	R9D = zext($U2:1)
	R9 = zext(R9D)
	instruction(0x236b8)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = R9B & 0x4:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x236bc)
	if ZF jump 0x236d3:8

0x22969  MOV RAX,qword ptr [0x3c2d0]
0x22970  MOV qword ptr [RBP + -0x270],R14
0x22977  MOV qword ptr [RBP + -0x240],RAX
0x2297e  MOV EAX,dword ptr [0x3aa98]
0x22984  TEST EAX,EAX
0x22986  LEA RAX,[0x2dfa9]
0x2298d  LEA RDX,[RAX + -0x9]
0x22991  CMOVZ RAX,RDX
0x22995  XOR R12D,R12D
0x22998  MOV qword ptr [0x3ada8],RAX
0x2299f  NOP
0x229a0  MOV RDI,R14
0x229a3  CALL 0x1df90
<L0> (entry=0x22969):
	instruction(0x22969)
	RAX = ram[0x3c2d0:8]
	instruction(0x22970)
	$U1:8 = RBP + 0xfffffffffffffd90:8
	$U2:8 = R14
	ram[$U1:8] = $U2:8
	instruction(0x22977)
	$U1:8 = RBP + 0xfffffffffffffdc0:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x2297e)
	EAX = ram[0x3aa98:8]
	RAX = zext(EAX)
	instruction(0x22984)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x22986)
	RAX = 0x2dfa9:8
	instruction(0x2298d)
	$U1:8 = RAX + 0xfffffffffffffff7:8
	RDX = $U1:8
	instruction(0x22991)
	$U1:8 = RDX
	$U2:1 = !ZF
	if $U2:1 jump <L345>
<L1>:
	RAX = $U1:8
<L2>:
	instruction(0x22995)
	CF = 0x0:1
	OF = 0x0:1
	R12D = R12D ^ R12D
	R12 = zext(R12D)
	SF = R12D s< 0x0:4
	ZF = R12D == 0x0:4
	$U1:4 = R12D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x22998)
	$U1:8 = RAX
	ram[0x3ada8:8] = $U1:8
	instruction(0x2299f)
	instruction(0x229a0)
	RDI = R14
	instruction(0x229a3)
	$U1:8 = 0x229a8:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x1df90:8

0x1b44c  OR dword ptr [0x3ac84],0x1000
0x1b456  TEST byte ptr [0x3ab99],0x8
0x1b45d  JNZ 0x1b488
<L0> (entry=0x1b44c):
	instruction(0x1b44c)
	CF = 0x0:1
	OF = 0x0:1
	$U4:4 = ram[0x3ac84:8]
	$U5:4 = $U4:4 | 0x1000:4
	ram[0x3ac84:8] = $U5:4
	$U6:4 = ram[0x3ac84:8]
	SF = $U6:4 s< 0x0:4
	$U7:4 = ram[0x3ac84:8]
	ZF = $U7:4 == 0x0:4
	$U8:4 = ram[0x3ac84:8]
	$U1:4 = $U8:4 & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1b456)
	CF = 0x0:1
	OF = 0x0:1
	$U5:1 = ram[0x3ab99:8]
	$U1:1 = $U5:1 & 0x8:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1b45d)
	$U1:1 = !ZF
	if $U1:1 jump 0x1b488:8

0x23398  CMP EAX,0x6474e553
0x2339d  JNZ 0x233af
<L0> (entry=0x23398):
	instruction(0x23398)
	CF = EAX < 0x6474e553:4
	OF = EAX sborrow 0x6474e553:4
	$U1:4 = EAX - 0x6474e553:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2339d)
	$U1:1 = !ZF
	if $U1:1 jump 0x233af:8

0x2376c  ADD RAX,qword ptr [R15]
0x2376f  MOV qword ptr [R15 + 0x430],RAX
0x23776  TEST RCX,RCX
0x23779  JNZ 0x23786
<L0> (entry=0x2376c):
	instruction(0x2376c)
	$U4:8 = ram[R15]
	CF = RAX carry $U4:8
	$U5:8 = ram[R15]
	OF = RAX scarry $U5:8
	$U6:8 = ram[R15]
	RAX = RAX + $U6:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2376f)
	$U1:8 = R15 + 0x430:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x23776)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RCX & RCX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23779)
	$U1:1 = !ZF
	if $U1:1 jump 0x23786:8

0x1e5b5  MOV qword ptr [0x3c228],RAX
0x1e5bc  TEST RAX,RAX
0x1e5bf  JZ 0x1efa4
<L0> (entry=0x1e5b5):
	instruction(0x1e5b5)
	$U1:8 = RAX
	ram[0x3c228:8] = $U1:8
	instruction(0x1e5bc)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e5bf)
	if ZF jump 0x1efa4:8

0x1ecbb  SUB RDI,RDX
0x1ecbe  SHL RDI,0x4
0x1ecc2  LEA RAX,[R8 + RDI*0x1]
0x1ecc6  MOV ESI,dword ptr [RBP + -0x88]
0x1eccc  MOV R13,qword ptr [RBP + -0x60]
0x1ecd0  NEG ESI
0x1ecd2  ADD R13,0x1
0x1ecd6  MOVSXD RSI,ESI
0x1ecd9  SHL RSI,0x4
0x1ecdd  NOP dword ptr [RAX]
0x1ece0  MOV RCX,qword ptr [RAX + RSI*0x1]
0x1ece4  ADD RAX,0x10
0x1ece8  ADD RCX,R13
0x1eceb  MOV qword ptr [RAX + -0x10],RCX
0x1ecef  SUB RDX,0x1
0x1ecf3  JNZ 0x1ece0
<L0> (entry=0x1ecbb):
	instruction(0x1ecbb)
	CF = RDI < RDX
	OF = RDI sborrow RDX
	RDI = RDI - RDX
	SF = RDI s< 0x0:8
	ZF = RDI == 0x0:8
	$U1:8 = RDI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ecbe)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RDI
	RDI = RDI << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RDI s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RDI s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RDI == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RDI & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1ecc2)
	$U2:8 = RDI * 0x1:8
	$U1:8 = R8 + $U2:8
	RAX = $U1:8
	instruction(0x1ecc6)
	$U1:8 = RBP + 0xffffffffffffff78:8
	ESI = ram[$U1:8]
	RSI = zext(ESI)
	instruction(0x1eccc)
	$U1:8 = RBP + 0xffffffffffffffa0:8
	R13 = ram[$U1:8]
	instruction(0x1ecd0)
	CF = ESI != 0x0:4
	OF = 0x0:4 sborrow ESI
	ESI = -ESI
	SF = ESI s< 0x0:4
	ZF = ESI == 0x0:4
	$U1:4 = ESI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	RSI = zext(ESI)
	instruction(0x1ecd2)
	CF = R13 carry 0x1:8
	OF = R13 scarry 0x1:8
	R13 = R13 + 0x1:8
	SF = R13 s< 0x0:8
	ZF = R13 == 0x0:8
	$U1:8 = R13 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ecd6)
	RSI = sext(ESI)
	instruction(0x1ecd9)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RSI
	RSI = RSI << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RSI s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RSI s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RSI == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RSI & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1ecdd)
	instruction(0x1ece0)
	$U2:8 = RSI * 0x1:8
	$U1:8 = RAX + $U2:8
	RCX = ram[$U1:8]
	instruction(0x1ece4)
	CF = RAX carry 0x10:8
	OF = RAX scarry 0x10:8
	RAX = RAX + 0x10:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ece8)
	CF = RCX carry R13
	OF = RCX scarry R13
	RCX = RCX + R13
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1eceb)
	$U1:8 = RAX + 0xfffffffffffffff0:8
	$U2:8 = RCX
	ram[$U1:8] = $U2:8
	instruction(0x1ecef)
	CF = RDX < 0x1:8
	OF = RDX sborrow 0x1:8
	RDX = RDX - 0x1:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ecf3)
	$U1:1 = !ZF
	if $U1:1 jump 0x1ece0:8

0x7940  PUSH RBP
0x7941  MOV RBP,RSP
0x7944  PUSH R15
0x7946  PUSH R14
0x7948  MOV R14,RDI
0x794b  PUSH R13
0x794d  MOV R13,RSI
0x7950  PUSH R12
0x7952  MOV R12,R8
0x7955  PUSH RBX
0x7956  SUB RSP,0x28
0x795a  MOV R9D,dword ptr [0x3ae78]
0x7961  TEST R9D,R9D
0x7964  JNZ 0x7d90
<L0> (entry=0x7940):
	instruction(0x7940)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x7941)
	RBP = RSP
	instruction(0x7944)
	$U1:8 = R15
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x7946)
	$U1:8 = R14
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x7948)
	R14 = RDI
	instruction(0x794b)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x794d)
	R13 = RSI
	instruction(0x7950)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x7952)
	R12 = R8
	instruction(0x7955)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x7956)
	CF = RSP < 0x28:8
	OF = RSP sborrow 0x28:8
	RSP = RSP - 0x28:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x795a)
	R9D = ram[0x3ae78:8]
	R9 = zext(R9D)
	instruction(0x7961)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = R9D & R9D
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7964)
	$U1:1 = !ZF
	if $U1:1 jump 0x7d90:8

0x27ba6  RET
<L0> (entry=0x27ba6):
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0xe65d  MOV R12,-0x1
0xe664  MOV EDI,EBP
0xe666  CALL 0x279d0
<L0> (entry=0xe65d):
	instruction(0xe65d)
	R12 = 0xffffffffffffffff:8
	instruction(0xe664)
	EDI = EBP
	RDI = zext(EDI)
	instruction(0xe666)
	$U1:8 = 0xe66b:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x279d0:8

0x2430e  MOV RAX,qword ptr [RBP + -0x288]
0x24315  CMP qword ptr [RAX],0x0
0x24319  JNZ 0x26749
<L0> (entry=0x2430e):
	instruction(0x2430e)
	$U1:8 = RBP + 0xfffffffffffffd78:8
	RAX = ram[$U1:8]
	instruction(0x24315)
	$U5:8 = ram[RAX]
	CF = $U5:8 < 0x0:8
	$U6:8 = ram[RAX]
	OF = $U6:8 sborrow 0x0:8
	$U7:8 = ram[RAX]
	$U1:8 = $U7:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x24319)
	$U1:1 = !ZF
	if $U1:1 jump 0x26749:8

0x9768  MOV RCX,-0x3333333333333333
0x9772  MOV R12,RAX
0x9775  MOV RAX,qword ptr [0x39ab8]
0x977c  LEA RDX,[0x4f + RAX*0x4]
0x9784  MOV RAX,RDX
0x9787  MUL RCX
0x978a  SHR RDX,0x5
0x978e  LEA RBX,[RDX + RDX*0x4]
0x9792  MOV RDI,RBX
0x9795  SHL RDI,0x5
0x9799  CALL qword ptr [0x3aa60]
<L0> (entry=0x9768):
	instruction(0x9768)
	RCX = 0xcccccccccccccccd:8
	instruction(0x9772)
	R12 = RAX
	instruction(0x9775)
	RAX = ram[0x39ab8:8]
	instruction(0x977c)
	$U2:8 = RAX * 0x4:8
	$U1:8 = 0x4f:8 + $U2:8
	RDX = $U1:8
	instruction(0x9784)
	RAX = RDX
	instruction(0x9787)
	$U2:16 = zext(RAX)
	$U3:16 = zext(RCX)
	$U1:16 = $U2:16 * $U3:16
	RDX = $U1[8]:8
	RAX = $U1:8
	CF = RDX != 0x0:8
	OF = CF
	instruction(0x978a)
	$U1:8 = 0x5:8 & 0x3f:8
	$U2:8 = RDX
	RDX = RDX >> $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 >> $U5:8
	$U7:8 = $U6:8 & 0x1:8
	$U4:1 = $U7:8 != 0x0:8
	$U8:1 = !$U3:1
	$U9:1 = $U8:1 && CF
	$U10:1 = $U3:1 && $U4:1
	CF = $U9:1 || $U10:1
	$U11:1 = $U1:8 == 0x1:8
	$U12:1 = $U2:8 s< 0x0:8
	$U13:1 = !$U11:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U11:1 && $U12:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RDX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RDX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RDX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x978e)
	$U2:8 = RDX * 0x4:8
	$U1:8 = RDX + $U2:8
	RBX = $U1:8
	instruction(0x9792)
	RDI = RBX
	instruction(0x9795)
	$U1:8 = 0x5:8 & 0x3f:8
	$U2:8 = RDI
	RDI = RDI << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RDI s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RDI s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RDI == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RDI & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x9799)
	$U1:8 = ram[0x3aa60:8]
	$U2:8 = 0x979f:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U2:8
	call $U1:8

0x2251c  LEA RAX,[0x6420]
0x22523  MOV qword ptr [0x3ae58],RAX
0x2252a  RDTSC
0x2252c  LEA RBX,[0x3baf0]
0x22533  MOV RDI,RBX
0x22536  SHL RDX,0x20
0x2253a  OR RAX,RDX
0x2253d  MOV qword ptr [0x3aaa0],RAX
0x22544  CALL 0x14530
<L0> (entry=0x2251c):
	instruction(0x2251c)
	RAX = 0x6420:8
	instruction(0x22523)
	$U1:8 = RAX
	ram[0x3ae58:8] = $U1:8
	instruction(0x2252a)
	$U1:8 = rdtsc()
	EDX = $U1[4]:4
	EAX = $U1:4
	instruction(0x2252c)
	RBX = 0x3baf0:8
	instruction(0x22533)
	RDI = RBX
	instruction(0x22536)
	$U1:8 = 0x20:8 & 0x3f:8
	$U2:8 = RDX
	RDX = RDX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RDX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RDX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RDX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RDX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x2253a)
	CF = 0x0:1
	OF = 0x0:1
	RAX = RAX | RDX
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2253d)
	$U1:8 = RAX
	ram[0x3aaa0:8] = $U1:8
	instruction(0x22544)
	$U1:8 = 0x22549:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x14530:8

0xba9d  ADD RSP,0x20
0xbaa1  MOV EDX,EAX
0xbaa3  JMP 0xb722
<L0> (entry=0xba9d):
	instruction(0xba9d)
	CF = RSP carry 0x20:8
	OF = RSP scarry 0x20:8
	RSP = RSP + 0x20:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xbaa1)
	EDX = EAX
	RDX = zext(EDX)
	instruction(0xbaa3)
	jump 0xb722:8

0x5aa0  ENDBR64
0x5aa4  PUSH R15
0x5aa6  LEA RAX,[0x2fee9]
0x5aad  PUSH R14
0x5aaf  MOVQ XMM1, RAX
0x5ab4  PUSH R13
0x5ab6  MOV R13,RDX
0x5ab9  LEA RDX,[0x31168]
0x5ac0  PUSH R12
0x5ac2  MOVQ XMM2, RDX
0x5ac7  MOV R12,RDI
0x5aca  PUSH RBP
0x5acb  PUNPCKLQDQ XMM1, XMM2
0x5acf  PUSH RBX
0x5ad0  SUB RSP,0x18
0x5ad4  MOVAPS xmmword ptr [RSP], XMM1
0x5ad8  TEST RSI,RSI
0x5adb  JZ 0x5b80
<L0> (entry=0x5aa0):
	instruction(0x5aa0)
	instruction(0x5aa4)
	$U1:8 = R15
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x5aa6)
	RAX = 0x2fee9:8
	instruction(0x5aad)
	$U1:8 = R14
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x5aaf)
	XMM1 = zext(RAX)
	instruction(0x5ab4)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x5ab6)
	R13 = RDX
	instruction(0x5ab9)
	RDX = 0x31168:8
	instruction(0x5ac0)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x5ac2)
	XMM2 = zext(RDX)
	instruction(0x5ac7)
	R12 = RDI
	instruction(0x5aca)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x5acb)
	XMM1_Qb = XMM2_Qa
	instruction(0x5acf)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x5ad0)
	CF = RSP < 0x18:8
	OF = RSP sborrow 0x18:8
	RSP = RSP - 0x18:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x5ad4)
	$U1:16 = XMM1
	ram[RSP] = $U1:16
	instruction(0x5ad8)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RSI & RSI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x5adb)
	if ZF jump 0x5b80:8

0x206f0  MOV EAX,dword ptr [RDX + 0x8]
0x206f3  ADD RDX,0x10
0x206f7  MOV R11D,0x1
0x206fd  MOV dword ptr [RSP + 0x38],EAX
0x20701  MOV RAX,qword ptr [RDX]
0x20704  TEST RAX,RAX
0x20707  JNZ 0x20508
<L0> (entry=0x206f0):
	instruction(0x206f0)
	$U1:8 = RDX + 0x8:8
	EAX = ram[$U1:8]
	RAX = zext(EAX)
	instruction(0x206f3)
	CF = RDX carry 0x10:8
	OF = RDX scarry 0x10:8
	RDX = RDX + 0x10:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x206f7)
	R11 = 0x1:8
	instruction(0x206fd)
	$U1:8 = 0x38:8 + RSP
	$U2:4 = EAX
	ram[$U1:8] = $U2:4
	instruction(0x20701)
	RAX = ram[RDX]
	instruction(0x20704)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x20707)
	$U1:1 = !ZF
	if $U1:1 jump 0x20508:8

0x24793  MOV RSI,R12
0x24796  SUB RSI,RAX
0x24799  MOV RAX,RSI
0x2479c  JMP 0x23881
<L0> (entry=0x24793):
	instruction(0x24793)
	RSI = R12
	instruction(0x24796)
	CF = RSI < RAX
	OF = RSI sborrow RAX
	RSI = RSI - RAX
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x24799)
	RAX = RSI
	instruction(0x2479c)
	jump 0x23881:8

0x498f  MOV qword ptr [RAX + 0x10],0x0
0x4997  LEA RAX,[RBP + -0x430]
0x499e  MOV qword ptr [RBP + -0x4e8],RAX
0x49a5  MOV qword ptr [RBP + -0x440],RAX
0x49ac  MOV EAX,dword ptr [0x3c2a0]
0x49b2  MOV qword ptr [RBP + -0x438],0x400
0x49bd  MOV dword ptr [0x3c2a0],0x0
0x49c7  MOV qword ptr [RBP + -0x4c0],R10
0x49ce  MOV qword ptr [RBP + -0x4d0],R14
0x49d5  MOV dword ptr [RBP + -0x4f0],EAX
0x49db  MOV RAX,R10
0x49de  MOV dword ptr [RAX],0x1
0x49e4  MOV RAX,qword ptr [R15 + 0x2c0]
0x49eb  MOV qword ptr [RBP + -0x4a0],RAX
0x49f2  TEST RAX,RAX
0x49f5  JZ 0x5328
<L0> (entry=0x498f):
	instruction(0x498f)
	$U1:8 = RAX + 0x10:8
	$U2:8 = 0x0:8
	ram[$U1:8] = $U2:8
	instruction(0x4997)
	$U1:8 = RBP + 0xfffffffffffffbd0:8
	RAX = $U1:8
	instruction(0x499e)
	$U1:8 = RBP + 0xfffffffffffffb18:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x49a5)
	$U1:8 = RBP + 0xfffffffffffffbc0:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x49ac)
	EAX = ram[0x3c2a0:8]
	RAX = zext(EAX)
	instruction(0x49b2)
	$U1:8 = RBP + 0xfffffffffffffbc8:8
	$U2:8 = 0x400:8
	ram[$U1:8] = $U2:8
	instruction(0x49bd)
	$U1:4 = 0x0:4
	ram[0x3c2a0:8] = $U1:4
	instruction(0x49c7)
	$U1:8 = RBP + 0xfffffffffffffb40:8
	$U2:8 = R10
	ram[$U1:8] = $U2:8
	instruction(0x49ce)
	$U1:8 = RBP + 0xfffffffffffffb30:8
	$U2:8 = R14
	ram[$U1:8] = $U2:8
	instruction(0x49d5)
	$U1:8 = RBP + 0xfffffffffffffb10:8
	$U2:4 = EAX
	ram[$U1:8] = $U2:4
	instruction(0x49db)
	RAX = R10
	instruction(0x49de)
	$U1:4 = 0x1:4
	ram[RAX] = $U1:4
	instruction(0x49e4)
	$U1:8 = R15 + 0x2c0:8
	RAX = ram[$U1:8]
	instruction(0x49eb)
	$U1:8 = RBP + 0xfffffffffffffb60:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x49f2)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x49f5)
	if ZF jump 0x5328:8

0x4ef1  MOV R9D,dword ptr [0x3c2a0]
0x4ef8  TEST R9D,R9D
0x4efb  JNZ 0x4f0d
<L0> (entry=0x4ef1):
	instruction(0x4ef1)
	R9D = ram[0x3c2a0:8]
	R9 = zext(R9D)
	instruction(0x4ef8)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = R9D & R9D
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x4efb)
	$U1:1 = !ZF
	if $U1:1 jump 0x4f0d:8

0x48cf  LEA R10,[RSP + 0xf]
0x48d4  MOVZX EAX,byte ptr [R14 + 0x31c]
0x48dc  MOVQ XMM0, R14
0x48e1  AND R10,-0x10
0x48e5  LEA RDX,[R10 + 0x18]
0x48e9  AND EAX,0xffffff9f
0x48ec  MOV qword ptr [RBP + -0x4f8],R10
0x48f3  MOVQ XMM6, RDX
0x48f8  OR EAX,0x20
0x48fb  MOV dword ptr [R10],0x0
0x4902  PUNPCKLQDQ XMM0, XMM6
0x4906  MOV byte ptr [R14 + 0x31c],AL
0x490d  MOVUPS xmmword ptr [R10 + 0x8], XMM0
0x4912  TEST R9D,R9D
0x4915  JZ 0x5631
<L0> (entry=0x48cf):
	instruction(0x48cf)
	$U1:8 = 0xf:8 + RSP
	R10 = $U1:8
	instruction(0x48d4)
	$U1:8 = R14 + 0x31c:8
	$U2:1 = ram[$U1:8]
	EAX = zext($U2:1)
	RAX = zext(EAX)
	instruction(0x48dc)
	XMM0 = zext(R14)
	instruction(0x48e1)
	CF = 0x0:1
	OF = 0x0:1
	R10 = R10 & 0xfffffffffffffff0:8
	SF = R10 s< 0x0:8
	ZF = R10 == 0x0:8
	$U1:8 = R10 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x48e5)
	$U1:8 = R10 + 0x18:8
	RDX = $U1:8
	instruction(0x48e9)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX & 0xffffff9f:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x48ec)
	$U1:8 = RBP + 0xfffffffffffffb08:8
	$U2:8 = R10
	ram[$U1:8] = $U2:8
	instruction(0x48f3)
	XMM6 = zext(RDX)
	instruction(0x48f8)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX | 0x20:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x48fb)
	$U1:4 = 0x0:4
	ram[R10] = $U1:4
	instruction(0x4902)
	XMM0_Qb = XMM6_Qa
	instruction(0x4906)
	$U1:8 = R14 + 0x31c:8
	$U2:1 = AL
	ram[$U1:8] = $U2:1
	instruction(0x490d)
	$U1:8 = R10 + 0x8:8
	$U2:16 = XMM0
	ram[$U1:8] = $U2:16
	instruction(0x4912)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = R9D & R9D
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x4915)
	if ZF jump 0x5631:8

0x7b4b  MOV RCX,qword ptr [RBX + 0x8]
0x7b4f  LEA RAX,[RDX + RCX*0x1]
0x7b53  CMP RAX,qword ptr [R13]
0x7b57  JBE 0x7d80
<L0> (entry=0x7b4b):
	instruction(0x7b4b)
	$U1:8 = RBX + 0x8:8
	RCX = ram[$U1:8]
	instruction(0x7b4f)
	$U2:8 = RCX * 0x1:8
	$U1:8 = RDX + $U2:8
	RAX = $U1:8
	instruction(0x7b53)
	$U5:8 = ram[R13]
	CF = RAX < $U5:8
	$U6:8 = ram[R13]
	OF = RAX sborrow $U6:8
	$U7:8 = ram[R13]
	$U1:8 = RAX - $U7:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7b57)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x7d80:8

0x14870  LEA RSP,[RBP + -0x28]
0x14874  POP RBX
0x14875  POP R12
0x14877  POP R13
0x14879  POP R14
0x1487b  POP R15
0x1487d  POP RBP
0x1487e  RET
<L0> (entry=0x14870):
	instruction(0x14870)
	$U1:8 = RBP + 0xffffffffffffffd8:8
	RSP = $U1:8
	instruction(0x14874)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0x14875)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R12 = $U1:8
	instruction(0x14877)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R13 = $U1:8
	instruction(0x14879)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R14 = $U1:8
	instruction(0x1487b)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R15 = $U1:8
	instruction(0x1487d)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBP = $U1:8
	instruction(0x1487e)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0xba5a  CMP qword ptr [0x39aa0],-0x1
0xba62  MOV EDX,0xffffffff
0xba67  JZ 0xb722
<L0> (entry=0xba5a):
	instruction(0xba5a)
	$U5:8 = ram[0x39aa0:8]
	CF = $U5:8 < 0xffffffffffffffff:8
	$U6:8 = ram[0x39aa0:8]
	OF = $U6:8 sborrow 0xffffffffffffffff:8
	$U7:8 = ram[0x39aa0:8]
	$U1:8 = $U7:8 - 0xffffffffffffffff:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xba62)
	RDX = 0xffffffff:8
	instruction(0xba67)
	if ZF jump 0xb722:8

0x3060  ENDBR64
0x3064  JMP qword ptr [0x3b020]
<L0> (entry=0x3060):
	instruction(0x3060)
	instruction(0x3064)
	$U1:8 = ram[0x3b020:8]
	jump $U1:8

0xb4d8  ADD RSI,RDX
0xb4db  MOV RDI,R13
0xb4de  ADD RSI,RAX
0xb4e1  CALL 0x28220
<L0> (entry=0xb4d8):
	instruction(0xb4d8)
	CF = RSI carry RDX
	OF = RSI scarry RDX
	RSI = RSI + RDX
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xb4db)
	RDI = R13
	instruction(0xb4de)
	CF = RSI carry RAX
	OF = RSI scarry RAX
	RSI = RSI + RAX
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xb4e1)
	$U1:8 = 0xb4e6:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x28220:8

0x18d70  ENDBR64
0x18d74  MOV EDI,EDI
0x18d76  LEA RCX,[0x39b00]
0x18d7d  LEA RAX,[RDI*0x8]
0x18d85  SUB RAX,RDI
0x18d88  SHL RAX,0x4
0x18d8c  ADD RAX,RCX
0x18d8f  MOV R8D,dword ptr [RAX + 0x30]
0x18d93  MOV RAX,qword ptr [RAX + 0x48]
0x18d97  CMP R8D,0x2
0x18d9b  JA 0x18dd8
<L0> (entry=0x18d70):
	instruction(0x18d70)
	instruction(0x18d74)
	EDI = EDI
	RDI = zext(EDI)
	instruction(0x18d76)
	RCX = 0x39b00:8
	instruction(0x18d7d)
	$U1:8 = RDI * 0x8:8
	RAX = $U1:8
	instruction(0x18d85)
	CF = RAX < RDI
	OF = RAX sborrow RDI
	RAX = RAX - RDI
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x18d88)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RAX
	RAX = RAX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RAX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RAX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RAX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RAX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x18d8c)
	CF = RAX carry RCX
	OF = RAX scarry RCX
	RAX = RAX + RCX
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x18d8f)
	$U1:8 = RAX + 0x30:8
	R8D = ram[$U1:8]
	R8 = zext(R8D)
	instruction(0x18d93)
	$U1:8 = RAX + 0x48:8
	RAX = ram[$U1:8]
	instruction(0x18d97)
	CF = R8D < 0x2:4
	OF = R8D sborrow 0x2:4
	$U1:4 = R8D - 0x2:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x18d9b)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x18dd8:8

0x1b5a0  ADD EAX,dword ptr [RSP + 0xb0]
0x1b5a7  MOV dword ptr [RSP + 0x8c],EAX
0x1b5ae  MOV ESI,EAX
0x1b5b0  CMP EAX,0x5d
0x1b5b3  JA 0x1b640
<L0> (entry=0x1b5a0):
	instruction(0x1b5a0)
	$U4:8 = 0xb0:8 + RSP
	$U5:4 = ram[$U4:8]
	CF = EAX carry $U5:4
	$U6:4 = ram[$U4:8]
	OF = EAX scarry $U6:4
	$U7:4 = ram[$U4:8]
	EAX = EAX + $U7:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1b5a7)
	$U1:8 = 0x8c:8 + RSP
	$U2:4 = EAX
	ram[$U1:8] = $U2:4
	instruction(0x1b5ae)
	ESI = EAX
	RSI = zext(ESI)
	instruction(0x1b5b0)
	CF = EAX < 0x5d:4
	OF = EAX sborrow 0x5d:4
	$U1:4 = EAX - 0x5d:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1b5b3)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x1b640:8

0x1e78a  MOV RDX,qword ptr [RBP + -0xa0]
0x1e791  MOV RDI,qword ptr [RBP + -0x78]
0x1e795  NOP dword ptr [RAX]
0x1e798  MOV RAX,RDX
0x1e79b  MOV R12,RSI
0x1e79e  SHR RAX,CL
0x1e7a1  AND EAX,0x1
0x1e7a4  CMP RAX,0x1
0x1e7a8  SBB RDI,-0x1
0x1e7ac  ADD RCX,0x1
0x1e7b0  SHL R12,CL
0x1e7b3  NEG R12
0x1e7b6  AND R12,RDX
0x1e7b9  JNZ 0x1e798
<L0> (entry=0x1e78a):
	instruction(0x1e78a)
	$U1:8 = RBP + 0xffffffffffffff60:8
	RDX = ram[$U1:8]
	instruction(0x1e791)
	$U1:8 = RBP + 0xffffffffffffff88:8
	RDI = ram[$U1:8]
	instruction(0x1e795)
	instruction(0x1e798)
	RAX = RDX
	instruction(0x1e79b)
	R12 = RSI
	instruction(0x1e79e)
	$U1:1 = CL & 0x3f:1
	$U2:8 = RAX
	RAX = RAX >> $U1:1
	$U3:1 = $U1:1 != 0x0:1
	$U5:1 = $U1:1 - 0x1:1
	$U6:8 = $U2:8 >> $U5:1
	$U7:8 = $U6:8 & 0x1:8
	$U4:1 = $U7:8 != 0x0:8
	$U8:1 = !$U3:1
	$U9:1 = $U8:1 && CF
	$U10:1 = $U3:1 && $U4:1
	CF = $U9:1 || $U10:1
	$U11:1 = $U1:1 == 0x1:1
	$U12:1 = $U2:8 s< 0x0:8
	$U13:1 = !$U11:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U11:1 && $U12:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:1 != 0x0:1
	$U17:1 = RAX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RAX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RAX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1e7a1)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX & 0x1:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e7a4)
	CF = RAX < 0x1:8
	OF = RAX sborrow 0x1:8
	$U1:8 = RAX - 0x1:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e7a8)
	$U1:8 = zext(CF)
	CF = RDI < 0xffffffffffffffff:8
	OF = RDI sborrow 0xffffffffffffffff:8
	$U2:8 = RDI - 0xffffffffffffffff:8
	$U3:1 = $U2:8 < $U1:8
	CF = CF || $U3:1
	$U4:1 = $U2:8 sborrow $U1:8
	OF = OF ^^ $U4:1
	RDI = $U2:8 - $U1:8
	SF = RDI s< 0x0:8
	ZF = RDI == 0x0:8
	$U5:8 = RDI & 0xff:8
	$U6:1 = count_ones($U5:8)
	$U7:1 = $U6:1 & 0x1:1
	PF = $U7:1 == 0x0:1
	instruction(0x1e7ac)
	CF = RCX carry 0x1:8
	OF = RCX scarry 0x1:8
	RCX = RCX + 0x1:8
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e7b0)
	$U1:1 = CL & 0x3f:1
	$U2:8 = R12
	R12 = R12 << $U1:1
	$U3:1 = $U1:1 != 0x0:1
	$U5:1 = $U1:1 - 0x1:1
	$U6:8 = $U2:8 << $U5:1
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:1 == 0x1:1
	$U12:1 = R12 s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:1 != 0x0:1
	$U17:1 = R12 s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = R12 == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = R12 & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1e7b3)
	CF = R12 != 0x0:8
	OF = 0x0:8 sborrow R12
	R12 = -R12
	SF = R12 s< 0x0:8
	ZF = R12 == 0x0:8
	$U1:8 = R12 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e7b6)
	CF = 0x0:1
	OF = 0x0:1
	R12 = R12 & RDX
	SF = R12 s< 0x0:8
	ZF = R12 == 0x0:8
	$U1:8 = R12 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e7b9)
	$U1:1 = !ZF
	if $U1:1 jump 0x1e798:8

0x1eb9f  MOV RAX,qword ptr [RBP + -0x58]
0x1eba3  MOV RDX,R15
0x1eba6  MOV RSI,qword ptr [RAX]
0x1eba9  CALL 0x2bfa0
<L0> (entry=0x1eb9f):
	instruction(0x1eb9f)
	$U1:8 = RBP + 0xffffffffffffffa8:8
	RAX = ram[$U1:8]
	instruction(0x1eba3)
	RDX = R15
	instruction(0x1eba6)
	RSI = ram[RAX]
	instruction(0x1eba9)
	$U1:8 = 0x1ebae:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2bfa0:8

0x279a0  ENDBR64
0x279a4  MOV EAX,0x15
0x279a9  SYSCALL
<L0> (entry=0x279a0):
	instruction(0x279a0)
	instruction(0x279a4)
	RAX = 0x15:8
	instruction(0x279a9)
	RCX = 0x279ab:8
	$U1:1 = NT & 0x1:1
	$U2:8 = zext($U1:1)
	$U3:8 = 0x4000:8 * $U2:8
	$U4:1 = OF & 0x1:1
	$U5:8 = zext($U4:1)
	$U6:8 = 0x800:8 * $U5:8
	$U7:8 = $U3:8 | $U6:8
	$U8:1 = DF & 0x1:1
	$U9:8 = zext($U8:1)
	$U10:8 = 0x400:8 * $U9:8
	$U11:8 = $U7:8 | $U10:8
	$U12:1 = IF & 0x1:1
	$U13:8 = zext($U12:1)
	$U14:8 = 0x200:8 * $U13:8
	$U15:8 = $U11:8 | $U14:8
	$U16:1 = TF & 0x1:1
	$U17:8 = zext($U16:1)
	$U18:8 = 0x100:8 * $U17:8
	$U19:8 = $U15:8 | $U18:8
	$U20:1 = SF & 0x1:1
	$U21:8 = zext($U20:1)
	$U22:8 = 0x80:8 * $U21:8
	$U23:8 = $U19:8 | $U22:8
	$U24:1 = ZF & 0x1:1
	$U25:8 = zext($U24:1)
	$U26:8 = 0x40:8 * $U25:8
	$U27:8 = $U23:8 | $U26:8
	$U28:1 = AF & 0x1:1
	$U29:8 = zext($U28:1)
	$U30:8 = 0x10:8 * $U29:8
	$U31:8 = $U27:8 | $U30:8
	$U32:1 = PF & 0x1:1
	$U33:8 = zext($U32:1)
	$U34:8 = 0x4:8 * $U33:8
	$U35:8 = $U31:8 | $U34:8
	$U36:1 = CF & 0x1:1
	$U37:8 = zext($U36:1)
	$U38:8 = 0x1:8 * $U37:8
	R11 = $U35:8 | $U38:8
	NEXT_PC = 0x279ab:8
	exception(0x101:4, 0x0:4)

0x23545  MOV RCX,qword ptr [RAX + 0x30]
0x23549  MOVQ XMM0, RSI
0x2354e  MOVQ XMM5, RCX
0x23553  LEA RSI,[RCX + -0x1]
0x23557  PUNPCKLQDQ XMM0, XMM5
0x2355b  MOVUPS xmmword ptr [R15 + 0x440], XMM0
0x23563  MOV RDI,qword ptr [RAX + 0x10]
0x23567  AND RSI,RDI
0x2356a  TEST RCX,RCX
0x2356d  CMOVNZ RCX,RSI
0x23571  ADD RAX,0x38
0x23575  MOV qword ptr [R15 + 0x450],RCX
0x2357c  MOV RCX,qword ptr [RAX + -0x18]
0x23580  MOV qword ptr [R15 + 0x430],RDI
0x23587  MOV qword ptr [R15 + 0x438],RCX
0x2358e  MOV qword ptr [R15 + 0x460],0x1
0x23599  MOV qword ptr [0x3c088],0x1
0x235a4  CMP R12,RAX
0x235a7  JA 0x23330
<L0> (entry=0x23545):
	instruction(0x23545)
	$U1:8 = RAX + 0x30:8
	RCX = ram[$U1:8]
	instruction(0x23549)
	XMM0 = zext(RSI)
	instruction(0x2354e)
	XMM5 = zext(RCX)
	instruction(0x23553)
	$U1:8 = RCX + 0xffffffffffffffff:8
	RSI = $U1:8
	instruction(0x23557)
	XMM0_Qb = XMM5_Qa
	instruction(0x2355b)
	$U1:8 = R15 + 0x440:8
	$U2:16 = XMM0
	ram[$U1:8] = $U2:16
	instruction(0x23563)
	$U1:8 = RAX + 0x10:8
	RDI = ram[$U1:8]
	instruction(0x23567)
	CF = 0x0:1
	OF = 0x0:1
	RSI = RSI & RDI
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2356a)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RCX & RCX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2356d)
	$U3:1 = !ZF
	$U1:8 = RSI
	$U2:1 = !$U3:1
	if $U2:1 jump <L419>
<L1>:
	RCX = $U1:8
<L2>:
	instruction(0x23571)
	CF = RAX carry 0x38:8
	OF = RAX scarry 0x38:8
	RAX = RAX + 0x38:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x23575)
	$U1:8 = R15 + 0x450:8
	$U2:8 = RCX
	ram[$U1:8] = $U2:8
	instruction(0x2357c)
	$U1:8 = RAX + 0xffffffffffffffe8:8
	RCX = ram[$U1:8]
	instruction(0x23580)
	$U1:8 = R15 + 0x430:8
	$U2:8 = RDI
	ram[$U1:8] = $U2:8
	instruction(0x23587)
	$U1:8 = R15 + 0x438:8
	$U2:8 = RCX
	ram[$U1:8] = $U2:8
	instruction(0x2358e)
	$U1:8 = R15 + 0x460:8
	$U2:8 = 0x1:8
	ram[$U1:8] = $U2:8
	instruction(0x23599)
	$U1:8 = 0x1:8
	ram[0x3c088:8] = $U1:8
	instruction(0x235a4)
	CF = R12 < RAX
	OF = R12 sborrow RAX
	$U1:8 = R12 - RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x235a7)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x23330:8

0x1b69b  AND dword ptr [0x3ab98],0xfffff7ef
0x1b6a5  OR dword ptr [0x3aba0],0x800
0x1b6af  JMP 0x1b43a
<L0> (entry=0x1b69b):
	instruction(0x1b69b)
	CF = 0x0:1
	OF = 0x0:1
	$U4:4 = ram[0x3ab98:8]
	$U5:4 = $U4:4 & 0xfffff7ef:4
	ram[0x3ab98:8] = $U5:4
	$U6:4 = ram[0x3ab98:8]
	SF = $U6:4 s< 0x0:4
	$U7:4 = ram[0x3ab98:8]
	ZF = $U7:4 == 0x0:4
	$U8:4 = ram[0x3ab98:8]
	$U1:4 = $U8:4 & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1b6a5)
	CF = 0x0:1
	OF = 0x0:1
	$U4:4 = ram[0x3aba0:8]
	$U5:4 = $U4:4 | 0x800:4
	ram[0x3aba0:8] = $U5:4
	$U6:4 = ram[0x3aba0:8]
	SF = $U6:4 s< 0x0:4
	$U7:4 = ram[0x3aba0:8]
	ZF = $U7:4 == 0x0:4
	$U8:4 = ram[0x3aba0:8]
	$U1:4 = $U8:4 & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1b6af)
	jump 0x1b43a:8

0x1a9b5  MOV RAX,qword ptr [RSP + 0xb0]
0x1a9bd  TEST RAX,RAX
0x1a9c0  JZ 0x1a9cc
<L0> (entry=0x1a9b5):
	instruction(0x1a9b5)
	$U1:8 = 0xb0:8 + RSP
	RAX = ram[$U1:8]
	instruction(0x1a9bd)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1a9c0)
	if ZF jump 0x1a9cc:8

0x237b0  XOR EBX,EBX
0x237b2  MOV R12,qword ptr [0x3bb28]
0x237b9  TEST byte ptr [0x3be0e],0x20
0x237c0  CMOVNZ RBX,qword ptr [0x3baf0]
0x237c8  ADD RBX,qword ptr [RAX + 0x8]
0x237cc  MOV RAX,qword ptr [0x3bb58]
0x237d3  MOV RDI,qword ptr [R12]
0x237d7  ADD RBX,qword ptr [RAX + 0x8]
0x237db  MOV RSI,RBX
0x237de  CALL 0x28220
<L0> (entry=0x237b0):
	instruction(0x237b0)
	CF = 0x0:1
	OF = 0x0:1
	EBX = EBX ^ EBX
	RBX = zext(EBX)
	SF = EBX s< 0x0:4
	ZF = EBX == 0x0:4
	$U1:4 = EBX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x237b2)
	R12 = ram[0x3bb28:8]
	instruction(0x237b9)
	CF = 0x0:1
	OF = 0x0:1
	$U5:1 = ram[0x3be0e:8]
	$U1:1 = $U5:1 & 0x20:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x237c0)
	$U3:1 = !ZF
	$U1:8 = ram[0x3baf0:8]
	$U2:1 = !$U3:1
	if $U2:1 jump <L467>
<L1>:
	RBX = $U1:8
<L2>:
	instruction(0x237c8)
	$U4:8 = RAX + 0x8:8
	$U5:8 = ram[$U4:8]
	CF = RBX carry $U5:8
	$U6:8 = ram[$U4:8]
	OF = RBX scarry $U6:8
	$U7:8 = ram[$U4:8]
	RBX = RBX + $U7:8
	SF = RBX s< 0x0:8
	ZF = RBX == 0x0:8
	$U1:8 = RBX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x237cc)
	RAX = ram[0x3bb58:8]
	instruction(0x237d3)
	RDI = ram[R12]
	instruction(0x237d7)
	$U4:8 = RAX + 0x8:8
	$U5:8 = ram[$U4:8]
	CF = RBX carry $U5:8
	$U6:8 = ram[$U4:8]
	OF = RBX scarry $U6:8
	$U7:8 = ram[$U4:8]
	RBX = RBX + $U7:8
	SF = RBX s< 0x0:8
	ZF = RBX == 0x0:8
	$U1:8 = RBX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x237db)
	RSI = RBX
	instruction(0x237de)
	$U1:8 = 0x237e3:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x28220:8

0x8e8e  POP RBX
0x8e8f  MOV RAX,R12
0x8e92  POP RBP
0x8e93  POP R12
0x8e95  POP R13
0x8e97  POP R14
0x8e99  RET
<L0> (entry=0x8e8e):
	instruction(0x8e8e)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0x8e8f)
	RAX = R12
	instruction(0x8e92)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBP = $U1:8
	instruction(0x8e93)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R12 = $U1:8
	instruction(0x8e95)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R13 = $U1:8
	instruction(0x8e97)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R14 = $U1:8
	instruction(0x8e99)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x220c0  MOV RSI,R8
0x220c3  SUB RSI,RAX
0x220c6  MOV RAX,RSI
0x220c9  MOV qword ptr [RCX + RAX*0x8],RDX
0x220cd  MOV RAX,qword ptr [RDX + 0x10]
0x220d1  ADD RDX,0x10
0x220d5  TEST RAX,RAX
0x220d8  JZ 0x22128
<L0> (entry=0x220c0):
	instruction(0x220c0)
	RSI = R8
	instruction(0x220c3)
	CF = RSI < RAX
	OF = RSI sborrow RAX
	RSI = RSI - RAX
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x220c6)
	RAX = RSI
	instruction(0x220c9)
	$U2:8 = RAX * 0x8:8
	$U1:8 = RCX + $U2:8
	$U3:8 = RDX
	ram[$U1:8] = $U3:8
	instruction(0x220cd)
	$U1:8 = RDX + 0x10:8
	RAX = ram[$U1:8]
	instruction(0x220d1)
	CF = RDX carry 0x10:8
	OF = RDX scarry 0x10:8
	RDX = RDX + 0x10:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x220d5)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x220d8)
	if ZF jump 0x22128:8

0x2bfea  CMP EDX,0x1
0x2bfed  JL 0x2bfff
<L0> (entry=0x2bfea):
	instruction(0x2bfea)
	CF = EDX < 0x1:4
	OF = EDX sborrow 0x1:4
	$U1:4 = EDX - 0x1:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2bfed)
	$U1:1 = OF != SF
	if $U1:1 jump 0x2bfff:8

0x2333b  CMP ECX,0x7
0x2333e  JA 0x23380
<L0> (entry=0x2333b):
	instruction(0x2333b)
	CF = ECX < 0x7:4
	OF = ECX sborrow 0x7:4
	$U1:4 = ECX - 0x7:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2333e)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x23380:8

0xb4b1  MOV RAX,qword ptr [R14 + 0xb0]
0xb4b8  TEST RAX,RAX
0xb4bb  JZ 0xb470
<L0> (entry=0xb4b1):
	instruction(0xb4b1)
	$U1:8 = R14 + 0xb0:8
	RAX = ram[$U1:8]
	instruction(0xb4b8)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb4bb)
	if ZF jump 0xb470:8

0x240fa  MOV RCX,qword ptr [RBP + -0x40]
0x240fe  MOV RDX,qword ptr [RBP + -0x48]
0x24102  MOV RSI,qword ptr [RBP + -0x60]
0x24106  MOV RDI,qword ptr [RBP + -0x68]
0x2410a  CALL 0x9710
<L0> (entry=0x240fa):
	instruction(0x240fa)
	$U1:8 = RBP + 0xffffffffffffffc0:8
	RCX = ram[$U1:8]
	instruction(0x240fe)
	$U1:8 = RBP + 0xffffffffffffffb8:8
	RDX = ram[$U1:8]
	instruction(0x24102)
	$U1:8 = RBP + 0xffffffffffffffa0:8
	RSI = ram[$U1:8]
	instruction(0x24106)
	$U1:8 = RBP + 0xffffffffffffff98:8
	RDI = ram[$U1:8]
	instruction(0x2410a)
	$U1:8 = 0x2410f:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x9710:8

0x20b8e  CMP R8D,0x3
0x20b92  JNZ 0x20b37
<L0> (entry=0x20b8e):
	instruction(0x20b8e)
	CF = R8D < 0x3:4
	OF = R8D sborrow 0x3:4
	$U1:4 = R8D - 0x3:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x20b92)
	$U1:1 = !ZF
	if $U1:1 jump 0x20b37:8

0xb55a  MOV ESI,0x2f
0xb55f  MOV RDI,R13
0xb562  MOV byte ptr [RSP + 0x57],0x0
0xb567  CALL 0x2b810
<L0> (entry=0xb55a):
	instruction(0xb55a)
	RSI = 0x2f:8
	instruction(0xb55f)
	RDI = R13
	instruction(0xb562)
	$U1:8 = 0x57:8 + RSP
	$U2:1 = 0x0:1
	ram[$U1:8] = $U2:1
	instruction(0xb567)
	$U1:8 = 0xb56c:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2b810:8

0x236be  TEST R11,R11
0x236c1  JZ 0x236d3
<L0> (entry=0x236be):
	instruction(0x236be)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R11 & R11
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x236c1)
	if ZF jump 0x236d3:8

0xbabc  MOV RCX,qword ptr [RSP + 0x28]
0xbac1  TEST RCX,RCX
0xbac4  JZ 0xbb5a
<L0> (entry=0xbabc):
	instruction(0xbabc)
	$U1:8 = 0x28:8 + RSP
	RCX = ram[$U1:8]
	instruction(0xbac1)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RCX & RCX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xbac4)
	if ZF jump 0xbb5a:8

0x1ebba  MOV RBX,qword ptr [RBP + -0x98]
0x1ebc1  MOVZX ECX,byte ptr [RBP + -0xa0]
0x1ebc8  MOV EDX,0x10
0x1ebcd  MOV RAX,RBX
0x1ebd0  SHL RDX,CL
0x1ebd3  ADD RDX,RBX
0x1ebd6  NOP word ptr CS:[RAX + RAX*0x1]
0x1ebe0  MOV qword ptr [RAX + 0x8],0x0
0x1ebe8  ADD RAX,0x10
0x1ebec  CMP RAX,RDX
0x1ebef  JNZ 0x1ebe0
<L0> (entry=0x1ebba):
	instruction(0x1ebba)
	$U1:8 = RBP + 0xffffffffffffff68:8
	RBX = ram[$U1:8]
	instruction(0x1ebc1)
	$U1:8 = RBP + 0xffffffffffffff60:8
	$U2:1 = ram[$U1:8]
	ECX = zext($U2:1)
	RCX = zext(ECX)
	instruction(0x1ebc8)
	RDX = 0x10:8
	instruction(0x1ebcd)
	RAX = RBX
	instruction(0x1ebd0)
	$U1:1 = CL & 0x3f:1
	$U2:8 = RDX
	RDX = RDX << $U1:1
	$U3:1 = $U1:1 != 0x0:1
	$U5:1 = $U1:1 - 0x1:1
	$U6:8 = $U2:8 << $U5:1
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:1 == 0x1:1
	$U12:1 = RDX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:1 != 0x0:1
	$U17:1 = RDX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RDX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RDX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1ebd3)
	CF = RDX carry RBX
	OF = RDX scarry RBX
	RDX = RDX + RBX
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ebd6)
	$U2:8 = RAX * 0x1:8
	$U1:8 = RAX + $U2:8
	instruction(0x1ebe0)
	$U1:8 = RAX + 0x8:8
	$U2:8 = 0x0:8
	ram[$U1:8] = $U2:8
	instruction(0x1ebe8)
	CF = RAX carry 0x10:8
	OF = RAX scarry 0x10:8
	RAX = RAX + 0x10:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ebec)
	CF = RAX < RDX
	OF = RAX sborrow RDX
	$U1:8 = RAX - RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1ebef)
	$U1:1 = !ZF
	if $U1:1 jump 0x1ebe0:8

0x1afbd  MOV EDI,0xc0
0x1afc2  MOV qword ptr [RSP],RBX
0x1afc6  MOV qword ptr [RSP + 0x50],RAX
0x1afcb  CALL 0x19f10
<L0> (entry=0x1afbd):
	instruction(0x1afbd)
	RDI = 0xc0:8
	instruction(0x1afc2)
	$U1:8 = RBX
	ram[RSP] = $U1:8
	instruction(0x1afc6)
	$U1:8 = 0x50:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1afcb)
	$U1:8 = 0x1afd0:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x19f10:8

0x279db  CMP RAX,-0x1000
0x279e1  JA 0x279e8
<L0> (entry=0x279db):
	instruction(0x279db)
	CF = RAX < 0xfffffffffffff000:8
	OF = RAX sborrow 0xfffffffffffff000:8
	$U1:8 = RAX - 0xfffffffffffff000:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x279e1)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x279e8:8

0xb982  MOV RDI,RAX
0xb985  TEST RAX,RAX
0xb988  JZ 0xba41
<L0> (entry=0xb982):
	instruction(0xb982)
	RDI = RAX
	instruction(0xb985)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb988)
	if ZF jump 0xba41:8

0x1ab13  MOV RCX,R14
0x1ab16  MOV RDX,R15
0x1ab19  MOV RSI,RBP
0x1ab1c  MOV RAX,0xfffffffffffffff
0x1ab26  MOV EDI,0x10
0x1ab2b  MOV qword ptr [RSP + 0xa8],0x4040
0x1ab37  MOV qword ptr [RSP + 0xb0],RAX
0x1ab3f  MOV RAX,qword ptr [RSP + 0x40]
0x1ab44  MOV qword ptr [RSP + 0xa0],RAX
0x1ab4c  CALL 0x18820
<L0> (entry=0x1ab13):
	instruction(0x1ab13)
	RCX = R14
	instruction(0x1ab16)
	RDX = R15
	instruction(0x1ab19)
	RSI = RBP
	instruction(0x1ab1c)
	RAX = 0xfffffffffffffff:8
	instruction(0x1ab26)
	RDI = 0x10:8
	instruction(0x1ab2b)
	$U1:8 = 0xa8:8 + RSP
	$U2:8 = 0x4040:8
	ram[$U1:8] = $U2:8
	instruction(0x1ab37)
	$U1:8 = 0xb0:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1ab3f)
	$U1:8 = 0x40:8 + RSP
	RAX = ram[$U1:8]
	instruction(0x1ab44)
	$U1:8 = 0xa0:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1ab4c)
	$U1:8 = 0x1ab51:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x18820:8

0xe90e  LEA RDX,[RBX + RBX*0x4]
0xe912  LEA RCX,[R12 + -0xa30]
0xe91a  SHL RDX,0x5
0xe91e  ADD RDX,RCX
0xe921  MOV RAX,qword ptr [RDX]
0xe924  TEST RAX,RAX
0xe927  JZ 0xe980
<L0> (entry=0xe90e):
	instruction(0xe90e)
	$U2:8 = RBX * 0x4:8
	$U1:8 = RBX + $U2:8
	RDX = $U1:8
	instruction(0xe912)
	$U1:8 = 0xfffffffffffff5d0:8 + R12
	RCX = $U1:8
	instruction(0xe91a)
	$U1:8 = 0x5:8 & 0x3f:8
	$U2:8 = RDX
	RDX = RDX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RDX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RDX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RDX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RDX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0xe91e)
	CF = RDX carry RCX
	OF = RDX scarry RCX
	RDX = RDX + RCX
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xe921)
	RAX = ram[RDX]
	instruction(0xe924)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xe927)
	if ZF jump 0xe980:8

0x23650  MOV RCX,qword ptr [R15]
0x23653  ADD RCX,qword ptr [RAX + 0x10]
0x23657  ADD RAX,0x38
0x2365b  MOV qword ptr [R15 + 0x10],RCX
0x2365f  MOV ECX,dword ptr [RAX + -0x34]
0x23662  MOVZX ESI,byte ptr [R15 + 0x31e]
0x2366a  SHR ECX,0x1
0x2366c  XOR ECX,0x1
0x2366f  AND ESI,0xffffffdf
0x23672  AND ECX,0x1
0x23675  SHL ECX,0x5
0x23678  OR ECX,ESI
0x2367a  MOV byte ptr [R15 + 0x31e],CL
0x23681  CMP R12,RAX
0x23684  JA 0x23330
<L0> (entry=0x23650):
	instruction(0x23650)
	RCX = ram[R15]
	instruction(0x23653)
	$U4:8 = RAX + 0x10:8
	$U5:8 = ram[$U4:8]
	CF = RCX carry $U5:8
	$U6:8 = ram[$U4:8]
	OF = RCX scarry $U6:8
	$U7:8 = ram[$U4:8]
	RCX = RCX + $U7:8
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x23657)
	CF = RAX carry 0x38:8
	OF = RAX scarry 0x38:8
	RAX = RAX + 0x38:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2365b)
	$U1:8 = R15 + 0x10:8
	$U2:8 = RCX
	ram[$U1:8] = $U2:8
	instruction(0x2365f)
	$U1:8 = RAX + 0xffffffffffffffcc:8
	ECX = ram[$U1:8]
	RCX = zext(ECX)
	instruction(0x23662)
	$U1:8 = R15 + 0x31e:8
	$U2:1 = ram[$U1:8]
	ESI = zext($U2:1)
	RSI = zext(ESI)
	instruction(0x2366a)
	$U1:4 = ECX & 0x1:4
	CF = $U1:4 != 0x0:4
	OF = 0x0:1
	ECX = ECX >> 0x1:8
	RCX = zext(ECX)
	SF = ECX s< 0x0:4
	ZF = ECX == 0x0:4
	$U2:4 = ECX & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2366c)
	CF = 0x0:1
	OF = 0x0:1
	ECX = ECX ^ 0x1:4
	RCX = zext(ECX)
	SF = ECX s< 0x0:4
	ZF = ECX == 0x0:4
	$U1:4 = ECX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2366f)
	CF = 0x0:1
	OF = 0x0:1
	ESI = ESI & 0xffffffdf:4
	RSI = zext(ESI)
	SF = ESI s< 0x0:4
	ZF = ESI == 0x0:4
	$U1:4 = ESI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x23672)
	CF = 0x0:1
	OF = 0x0:1
	ECX = ECX & 0x1:4
	RCX = zext(ECX)
	SF = ECX s< 0x0:4
	ZF = ECX == 0x0:4
	$U1:4 = ECX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x23675)
	$U1:8 = 0x5:8 & 0x1f:8
	$U2:4 = ECX
	ECX = ECX << $U1:8
	RCX = zext(ECX)
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:4 = $U2:4 << $U5:8
	$U4:1 = $U6:4 s< 0x0:4
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = ECX s< 0x0:4
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = ECX s< 0x0:4
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = ECX == 0x0:4
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:4 = ECX & 0xff:4
	$U27:1 = count_ones($U26:4)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x23678)
	CF = 0x0:1
	OF = 0x0:1
	ECX = ECX | ESI
	RCX = zext(ECX)
	SF = ECX s< 0x0:4
	ZF = ECX == 0x0:4
	$U1:4 = ECX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2367a)
	$U1:8 = R15 + 0x31e:8
	$U2:1 = CL
	ram[$U1:8] = $U2:1
	instruction(0x23681)
	CF = R12 < RAX
	OF = R12 sborrow RAX
	$U1:8 = R12 - RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23684)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x23330:8

0x7da6  MOV R15D,0xffffffff
0x7dac  JMP 0x7a59
<L0> (entry=0x7da6):
	instruction(0x7da6)
	R15 = 0xffffffff:8
	instruction(0x7dac)
	jump 0x7a59:8

0xead8  MOV qword ptr [RAX],R14
0xeadb  ADD RAX,0x10
0xeadf  CMP RAX,RDX
0xeae2  JNZ 0xead8
<L0> (entry=0xead8):
	instruction(0xead8)
	$U1:8 = R14
	ram[RAX] = $U1:8
	instruction(0xeadb)
	CF = RAX carry 0x10:8
	OF = RAX scarry 0x10:8
	RAX = RAX + 0x10:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xeadf)
	CF = RAX < RDX
	OF = RAX sborrow RDX
	$U1:8 = RAX - RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xeae2)
	$U1:1 = !ZF
	if $U1:1 jump 0xead8:8

0x4b84  MOV RBX,RAX
0x4b87  TEST RAX,RAX
0x4b8a  JZ 0x4e68
<L0> (entry=0x4b84):
	instruction(0x4b84)
	RBX = RAX
	instruction(0x4b87)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x4b8a)
	if ZF jump 0x4e68:8

0x4c5b  LEA RDX,[RBP + -0x470]
0x4c62  LEA RDI,[RBP + -0x490]
0x4c69  MOV qword ptr [RBP + -0x458],RAX
0x4c70  LEA RSI,[0x4460]
0x4c77  CALL 0x3050
<L0> (entry=0x4c5b):
	instruction(0x4c5b)
	$U1:8 = RBP + 0xfffffffffffffb90:8
	RDX = $U1:8
	instruction(0x4c62)
	$U1:8 = RBP + 0xfffffffffffffb70:8
	RDI = $U1:8
	instruction(0x4c69)
	$U1:8 = RBP + 0xfffffffffffffba8:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x4c70)
	RSI = 0x4460:8
	instruction(0x4c77)
	$U1:8 = 0x4c7c:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x3050:8

0x8255  MOV RAX,qword ptr [R15 + 0x30]
0x8259  LEA RCX,[0x3b040]
0x8260  LEA RAX,[RAX + RAX*0x4]
0x8264  SHL RAX,0x5
0x8268  MOV RAX,qword ptr [RCX + RAX*0x1]
0x826c  CMP byte ptr [RAX + 0x31d],0x0
0x8273  JS 0x8300
<L0> (entry=0x8255):
	instruction(0x8255)
	$U1:8 = R15 + 0x30:8
	RAX = ram[$U1:8]
	instruction(0x8259)
	RCX = 0x3b040:8
	instruction(0x8260)
	$U2:8 = RAX * 0x4:8
	$U1:8 = RAX + $U2:8
	RAX = $U1:8
	instruction(0x8264)
	$U1:8 = 0x5:8 & 0x3f:8
	$U2:8 = RAX
	RAX = RAX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RAX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RAX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RAX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RAX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x8268)
	$U2:8 = RAX * 0x1:8
	$U1:8 = RCX + $U2:8
	RAX = ram[$U1:8]
	instruction(0x826c)
	$U5:8 = RAX + 0x31d:8
	$U6:1 = ram[$U5:8]
	CF = $U6:1 < 0x0:1
	$U7:1 = ram[$U5:8]
	OF = $U7:1 sborrow 0x0:1
	$U8:1 = ram[$U5:8]
	$U1:1 = $U8:1 - 0x0:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x8273)
	if SF jump 0x8300:8

0xa516  MOV RDI,qword ptr [RBP + -0xf0]
0xa51d  CALL qword ptr [0x3aa68]
<L0> (entry=0xa516):
	instruction(0xa516)
	$U1:8 = RBP + 0xffffffffffffff10:8
	RDI = ram[$U1:8]
	instruction(0xa51d)
	$U1:8 = ram[0x3aa68:8]
	$U2:8 = 0xa523:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U2:8
	call $U1:8

0x20828  LEA RDX,[RSP + 0x58]
0x2082d  MOV ESI,R12D
0x20830  MOV RDI,RBP
0x20833  MOV RCX,qword ptr [0x3ab48]
0x2083a  CALL RBX
<L0> (entry=0x20828):
	instruction(0x20828)
	$U1:8 = 0x58:8 + RSP
	RDX = $U1:8
	instruction(0x2082d)
	ESI = R12D
	RSI = zext(ESI)
	instruction(0x20830)
	RDI = RBP
	instruction(0x20833)
	RCX = ram[0x3ab48:8]
	instruction(0x2083a)
	$U1:8 = RBX
	$U2:8 = 0x2083c:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U2:8
	call $U1:8

0x3070  ENDBR64
0x3074  JMP qword ptr [0x3b028]
<L0> (entry=0x3070):
	instruction(0x3070)
	instruction(0x3074)
	$U1:8 = ram[0x3b028:8]
	jump $U1:8

0x2437a  RDTSC
0x2437c  XOR ECX,ECX
0x2437e  MOV RBX,RAX
0x24381  SHL RDX,0x20
0x24385  MOV RSI,R13
0x24388  MOV RDI,R15
0x2438b  OR RBX,RDX
0x2438e  CMP dword ptr [RBP + -0x38],0x3
0x24392  MOV EDX,R12D
0x24395  SETZ CL
0x24398  XOR R8D,R8D
0x2439b  CALL 0x4840
<L0> (entry=0x2437a):
	instruction(0x2437a)
	$U1:8 = rdtsc()
	EDX = $U1[4]:4
	EAX = $U1:4
	instruction(0x2437c)
	CF = 0x0:1
	OF = 0x0:1
	ECX = ECX ^ ECX
	RCX = zext(ECX)
	SF = ECX s< 0x0:4
	ZF = ECX == 0x0:4
	$U1:4 = ECX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2437e)
	RBX = RAX
	instruction(0x24381)
	$U1:8 = 0x20:8 & 0x3f:8
	$U2:8 = RDX
	RDX = RDX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RDX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RDX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RDX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RDX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x24385)
	RSI = R13
	instruction(0x24388)
	RDI = R15
	instruction(0x2438b)
	CF = 0x0:1
	OF = 0x0:1
	RBX = RBX | RDX
	SF = RBX s< 0x0:8
	ZF = RBX == 0x0:8
	$U1:8 = RBX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2438e)
	$U5:8 = RBP + 0xffffffffffffffc8:8
	$U6:4 = ram[$U5:8]
	CF = $U6:4 < 0x3:4
	$U7:4 = ram[$U5:8]
	OF = $U7:4 sborrow 0x3:4
	$U8:4 = ram[$U5:8]
	$U1:4 = $U8:4 - 0x3:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x24392)
	EDX = R12D
	RDX = zext(EDX)
	instruction(0x24395)
	CL = ZF
	instruction(0x24398)
	CF = 0x0:1
	OF = 0x0:1
	R8D = R8D ^ R8D
	R8 = zext(R8D)
	SF = R8D s< 0x0:4
	ZF = R8D == 0x0:4
	$U1:4 = R8D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2439b)
	$U1:8 = 0x243a0:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x4840:8

0x1ed45  JMP 0x1ecbb
<L0> (entry=0x1ed45):
	jump 0x1ecbb:8

0xba6d  SUB RSP,0x8
0xba71  LEA RCX,[0x39aa0]
0xba78  MOV RDI,R13
0xba7b  LEA RDX,[RSP + 0x5f]
0xba80  PUSH RDX
0xba81  MOV EDX,EBX
0xba83  PUSH 0x40
0xba85  PUSH RAX
0xba86  MOV RSI,qword ptr [RSP + 0x60]
0xba8b  LEA R9,[RSP + 0x90]
0xba93  LEA R8,[RSP + 0x78]
0xba98  CALL 0x7f50
<L0> (entry=0xba6d):
	instruction(0xba6d)
	CF = RSP < 0x8:8
	OF = RSP sborrow 0x8:8
	RSP = RSP - 0x8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xba71)
	RCX = 0x39aa0:8
	instruction(0xba78)
	RDI = R13
	instruction(0xba7b)
	$U1:8 = 0x5f:8 + RSP
	RDX = $U1:8
	instruction(0xba80)
	$U1:8 = RDX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xba81)
	EDX = EBX
	RDX = zext(EDX)
	instruction(0xba83)
	$U1:8 = 0x40:8
	$U2:8 = $U1:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U2:8
	instruction(0xba85)
	$U1:8 = RAX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xba86)
	$U1:8 = 0x60:8 + RSP
	RSI = ram[$U1:8]
	instruction(0xba8b)
	$U1:8 = 0x90:8 + RSP
	R9 = $U1:8
	instruction(0xba93)
	$U1:8 = 0x78:8 + RSP
	R8 = $U1:8
	instruction(0xba98)
	$U1:8 = 0xba9d:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x7f50:8

0x4edb  MOV RDI,qword ptr [RBP + -0x440]
0x4ee2  CMP RDI,qword ptr [RBP + -0x4e8]
0x4ee9  JZ 0x4ef1
<L0> (entry=0x4edb):
	instruction(0x4edb)
	$U1:8 = RBP + 0xfffffffffffffbc0:8
	RDI = ram[$U1:8]
	instruction(0x4ee2)
	$U5:8 = RBP + 0xfffffffffffffb18:8
	$U6:8 = ram[$U5:8]
	CF = RDI < $U6:8
	$U7:8 = ram[$U5:8]
	OF = RDI sborrow $U7:8
	$U8:8 = ram[$U5:8]
	$U1:8 = RDI - $U8:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x4ee9)
	if ZF jump 0x4ef1:8

0x14730  ENDBR64
0x14734  PUSH RBP
0x14735  MOV R8,RDI
0x14738  MOV RBP,RSP
0x1473b  PUSH R15
0x1473d  PUSH R14
0x1473f  PUSH R13
0x14741  PUSH R12
0x14743  PUSH RBX
0x14744  SUB RSP,0x78
0x14748  MOV R13D,dword ptr [0x3ae08]
0x1474f  MOV byte ptr [RBP + -0x51],CL
0x14752  TEST R13D,R13D
0x14755  JNZ 0x149cd
<L0> (entry=0x14730):
	instruction(0x14730)
	instruction(0x14734)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x14735)
	R8 = RDI
	instruction(0x14738)
	RBP = RSP
	instruction(0x1473b)
	$U1:8 = R15
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1473d)
	$U1:8 = R14
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1473f)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x14741)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x14743)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x14744)
	CF = RSP < 0x78:8
	OF = RSP sborrow 0x78:8
	RSP = RSP - 0x78:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x14748)
	R13D = ram[0x3ae08:8]
	R13 = zext(R13D)
	instruction(0x1474f)
	$U1:8 = RBP + 0xffffffffffffffaf:8
	$U2:1 = CL
	ram[$U1:8] = $U2:1
	instruction(0x14752)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = R13D & R13D
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x14755)
	$U1:1 = !ZF
	if $U1:1 jump 0x149cd:8

0x14620  PUSH R13
0x14622  MOV R13,RDI
0x14625  PUSH R12
0x14627  MOV R12,RDX
0x1462a  PUSH RBP
0x1462b  MOV RBP,RSI
0x1462e  PUSH RBX
0x1462f  SUB RSP,0x8
0x14633  MOV RAX,qword ptr [RSI + 0x3d0]
0x1463a  OR byte ptr [RSI + 0x31d],0x1
0x14641  TEST RAX,RAX
0x14644  JZ 0x1466b
<L0> (entry=0x14620):
	instruction(0x14620)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x14622)
	R13 = RDI
	instruction(0x14625)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x14627)
	R12 = RDX
	instruction(0x1462a)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1462b)
	RBP = RSI
	instruction(0x1462e)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1462f)
	CF = RSP < 0x8:8
	OF = RSP sborrow 0x8:8
	RSP = RSP - 0x8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x14633)
	$U1:8 = RSI + 0x3d0:8
	RAX = ram[$U1:8]
	instruction(0x1463a)
	$U4:8 = RSI + 0x31d:8
	CF = 0x0:1
	OF = 0x0:1
	$U5:1 = ram[$U4:8]
	$U6:1 = $U5:1 | 0x1:1
	ram[$U4:8] = $U6:1
	$U7:1 = ram[$U4:8]
	SF = $U7:1 s< 0x0:1
	$U8:1 = ram[$U4:8]
	ZF = $U8:1 == 0x0:1
	$U9:1 = ram[$U4:8]
	$U1:1 = $U9:1 & 0xff:1
	$U2:1 = count_ones($U1:1)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x14641)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x14644)
	if ZF jump 0x1466b:8

0x225d0  MOV RSI,RBX
0x225d3  SUB RSI,RAX
0x225d6  CMP RSI,0xa
0x225da  JA 0x220cd
<L0> (entry=0x225d0):
	instruction(0x225d0)
	RSI = RBX
	instruction(0x225d3)
	CF = RSI < RAX
	OF = RSI sborrow RAX
	RSI = RSI - RAX
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x225d6)
	CF = RSI < 0xa:8
	OF = RSI sborrow 0xa:8
	$U1:8 = RSI - 0xa:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x225da)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x220cd:8

0x9890  CMP qword ptr [RBP + -0x38],0x0
0x9895  MOV RBX,RAX
0x9898  JNZ 0x9831
<L0> (entry=0x9890):
	instruction(0x9890)
	$U5:8 = RBP + 0xffffffffffffffc8:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x0:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x0:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x9895)
	RBX = RAX
	instruction(0x9898)
	$U1:1 = !ZF
	if $U1:1 jump 0x9831:8

0x242b5  CMP qword ptr [RBP + -0x180],0x0
0x242bd  MOV byte ptr [RBP + -0x268],0x1
0x242c4  JNZ 0x2534f
<L0> (entry=0x242b5):
	instruction(0x242b5)
	$U5:8 = RBP + 0xfffffffffffffe80:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x0:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x0:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x242bd)
	$U1:8 = RBP + 0xfffffffffffffd98:8
	$U2:1 = 0x1:1
	ram[$U1:8] = $U2:1
	instruction(0x242c4)
	$U1:1 = !ZF
	if $U1:1 jump 0x2534f:8

0x7b2c  CMP dword ptr [RBX],0x4
0x7b2f  JNZ 0x7b10
<L0> (entry=0x7b2c):
	instruction(0x7b2c)
	$U5:4 = ram[RBX]
	CF = $U5:4 < 0x4:4
	$U6:4 = ram[RBX]
	OF = $U6:4 sborrow 0x4:4
	$U7:4 = ram[RBX]
	$U1:4 = $U7:4 - 0x4:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7b2f)
	$U1:1 = !ZF
	if $U1:1 jump 0x7b10:8

0x7985  MOV dword ptr [0x3c2a0],0x0
0x798f  LEA RAX,[R13 + 0x8]
0x7993  MOV EBX,0x340
0x7998  MOV qword ptr [R13],0x0
0x79a0  MOV qword ptr [RBP + -0x38],RAX
0x79a4  XOR EAX,EAX
0x79a6  MOV RDI,qword ptr [RBP + -0x38]
0x79aa  MOV RDX,RBX
0x79ad  SUB RDX,RAX
0x79b0  LEA RSI,[RDI + RAX*0x1]
0x79b4  MOV EDI,R15D
0x79b7  CALL 0x27b60
<L0> (entry=0x7985):
	instruction(0x7985)
	$U1:4 = 0x0:4
	ram[0x3c2a0:8] = $U1:4
	instruction(0x798f)
	$U1:8 = R13 + 0x8:8
	RAX = $U1:8
	instruction(0x7993)
	RBX = 0x340:8
	instruction(0x7998)
	$U1:8 = 0x0:8
	ram[R13] = $U1:8
	instruction(0x79a0)
	$U1:8 = RBP + 0xffffffffffffffc8:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x79a4)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x79a6)
	$U1:8 = RBP + 0xffffffffffffffc8:8
	RDI = ram[$U1:8]
	instruction(0x79aa)
	RDX = RBX
	instruction(0x79ad)
	CF = RDX < RAX
	OF = RDX sborrow RAX
	RDX = RDX - RAX
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x79b0)
	$U2:8 = RAX * 0x1:8
	$U1:8 = RDI + $U2:8
	RSI = $U1:8
	instruction(0x79b4)
	EDI = R15D
	RDI = zext(EDI)
	instruction(0x79b7)
	$U1:8 = 0x79bc:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x27b60:8

0x7d29  AND EDX,0xfff
0x7d2f  SUB RSP,RDX
0x7d32  TEST RDX,RDX
0x7d35  JNZ 0x7edb
<L0> (entry=0x7d29):
	instruction(0x7d29)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX & 0xfff:4
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7d2f)
	CF = RSP < RDX
	OF = RSP sborrow RDX
	RSP = RSP - RDX
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7d32)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RDX & RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7d35)
	$U1:1 = !ZF
	if $U1:1 jump 0x7edb:8

0x106a8  CMP AL,0x6c
0x106aa  JZ 0x106b0
<L0> (entry=0x106a8):
	instruction(0x106a8)
	CF = AL < 0x6c:1
	OF = AL sborrow 0x6c:1
	$U1:1 = AL - 0x6c:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x106aa)
	if ZF jump 0x106b0:8

0x20528  MOV RAX,qword ptr [RDX + 0x10]
0x2052c  ADD RDX,0x10
0x20530  TEST RAX,RAX
0x20533  JNZ 0x20508
<L0> (entry=0x20528):
	instruction(0x20528)
	$U1:8 = RDX + 0x10:8
	RAX = ram[$U1:8]
	instruction(0x2052c)
	CF = RDX carry 0x10:8
	OF = RDX scarry 0x10:8
	RDX = RDX + 0x10:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x20530)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x20533)
	$U1:1 = !ZF
	if $U1:1 jump 0x20508:8

0x99ad  MOV RAX,qword ptr [RBX + 0xb8]
0x99b4  MOV qword ptr [RBX + 0x3c0],-0x1
0x99bf  TEST RAX,RAX
0x99c2  JZ 0x9ac5
<L0> (entry=0x99ad):
	instruction(0x99ad)
	$U1:8 = RBX + 0xb8:8
	RAX = ram[$U1:8]
	instruction(0x99b4)
	$U1:8 = RBX + 0x3c0:8
	$U2:8 = 0xffffffffffffffff:8
	ram[$U1:8] = $U2:8
	instruction(0x99bf)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x99c2)
	if ZF jump 0x9ac5:8

0x14700  ENDBR64
0x14704  SUB RSP,0x18
0x14708  XOR EDX,EDX
0x1470a  MOV EDI,0xc
0x1470f  LEA RSI,[RSP + 0xc]
0x14714  CALL 0x18d70
<L0> (entry=0x14700):
	instruction(0x14700)
	instruction(0x14704)
	CF = RSP < 0x18:8
	OF = RSP sborrow 0x18:8
	RSP = RSP - 0x18:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x14708)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX ^ EDX
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1470a)
	RDI = 0xc:8
	instruction(0x1470f)
	$U1:8 = 0xc:8 + RSP
	RSI = $U1:8
	instruction(0x14714)
	$U1:8 = 0x14719:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x18d70:8

0x23730  MOV ECX,dword ptr [RAX + 0x4]
0x23733  ADD RAX,0x38
0x23737  MOV dword ptr [0x3c080],ECX
0x2373d  CMP R12,RAX
0x23740  JA 0x23330
<L0> (entry=0x23730):
	instruction(0x23730)
	$U1:8 = RAX + 0x4:8
	ECX = ram[$U1:8]
	RCX = zext(ECX)
	instruction(0x23733)
	CF = RAX carry 0x38:8
	OF = RAX scarry 0x38:8
	RAX = RAX + 0x38:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x23737)
	$U1:4 = ECX
	ram[0x3c080:8] = $U1:4
	instruction(0x2373d)
	CF = R12 < RAX
	OF = R12 sborrow RAX
	$U1:8 = R12 - RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23740)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x23330:8

0x23842  MOV RAX,qword ptr [RDX]
0x23845  LEA RCX,[R15 + 0x40]
0x23849  TEST RAX,RAX
0x2384c  JZ 0x238be
<L0> (entry=0x23842):
	instruction(0x23842)
	RAX = ram[RDX]
	instruction(0x23845)
	$U1:8 = R15 + 0x40:8
	RCX = $U1:8
	instruction(0x23849)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2384c)
	if ZF jump 0x238be:8

0x1f266  MOV ESI,0x3a
0x1f26b  MOV RDI,RBP
0x1f26e  CALL 0x2b810
<L0> (entry=0x1f266):
	instruction(0x1f266)
	RSI = 0x3a:8
	instruction(0x1f26b)
	RDI = RBP
	instruction(0x1f26e)
	$U1:8 = 0x1f273:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2b810:8

0x2055e  MOV RAX,qword ptr [RSP + 0x10]
0x20563  MOV qword ptr [0x3adc8],RAX
0x2056a  TEST R10B,R10B
0x2056d  JZ 0x2057b
<L0> (entry=0x2055e):
	instruction(0x2055e)
	$U1:8 = 0x10:8 + RSP
	RAX = ram[$U1:8]
	instruction(0x20563)
	$U1:8 = RAX
	ram[0x3adc8:8] = $U1:8
	instruction(0x2056a)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = R10B & R10B
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2056d)
	if ZF jump 0x2057b:8

0x205b1  MOV RAX,qword ptr [RSP + 0x30]
0x205b6  MOV qword ptr [0x3aae8],RAX
0x205bd  CMP byte ptr [RSP + 0x1b],0x0
0x205c2  JZ 0x205ce
<L0> (entry=0x205b1):
	instruction(0x205b1)
	$U1:8 = 0x30:8 + RSP
	RAX = ram[$U1:8]
	instruction(0x205b6)
	$U1:8 = RAX
	ram[0x3aae8:8] = $U1:8
	instruction(0x205bd)
	$U5:8 = 0x1b:8 + RSP
	$U6:1 = ram[$U5:8]
	CF = $U6:1 < 0x0:1
	$U7:1 = ram[$U5:8]
	OF = $U7:1 sborrow 0x0:1
	$U8:1 = ram[$U5:8]
	$U1:1 = $U8:1 - 0x0:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x205c2)
	if ZF jump 0x205ce:8

0x234b6  ADD RSI,0x7
0x234ba  AND RSI,-0x8
0x234be  LEA RCX,[R11 + RSI*0x1]
0x234c2  MOV RSI,R13
0x234c5  SUB RSI,RCX
0x234c8  CMP RSI,0x7
0x234cc  JLE 0x25486
<L0> (entry=0x234b6):
	instruction(0x234b6)
	CF = RSI carry 0x7:8
	OF = RSI scarry 0x7:8
	RSI = RSI + 0x7:8
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x234ba)
	CF = 0x0:1
	OF = 0x0:1
	RSI = RSI & 0xfffffffffffffff8:8
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x234be)
	$U2:8 = RSI * 0x1:8
	$U1:8 = R11 + $U2:8
	RCX = $U1:8
	instruction(0x234c2)
	RSI = R13
	instruction(0x234c5)
	CF = RSI < RCX
	OF = RSI sborrow RCX
	RSI = RSI - RCX
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x234c8)
	CF = RSI < 0x7:8
	OF = RSI sborrow 0x7:8
	$U1:8 = RSI - 0x7:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x234cc)
	$U2:1 = OF != SF
	$U1:1 = ZF || $U2:1
	if $U1:1 jump 0x25486:8

0x22128  MOVZX EDX,byte ptr [0x3be0e]
0x2212f  MOV EDI,EDX
0x22131  AND EDI,0x20
0x22134  JNZ 0x221ba
<L0> (entry=0x22128):
	instruction(0x22128)
	$U1:1 = ram[0x3be0e:8]
	EDX = zext($U1:1)
	RDX = zext(EDX)
	instruction(0x2212f)
	EDI = EDX
	RDI = zext(EDI)
	instruction(0x22131)
	CF = 0x0:1
	OF = 0x0:1
	EDI = EDI & 0x20:4
	RDI = zext(EDI)
	SF = EDI s< 0x0:4
	ZF = EDI == 0x0:4
	$U1:4 = EDI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x22134)
	$U1:1 = !ZF
	if $U1:1 jump 0x221ba:8

0x279b8  NEG EAX
0x279ba  MOV dword ptr [0x3c2a0],EAX
0x279c0  MOV EAX,0xffffffff
0x279c5  RET
<L0> (entry=0x279b8):
	instruction(0x279b8)
	CF = EAX != 0x0:4
	OF = 0x0:4 sborrow EAX
	EAX = -EAX
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	RAX = zext(EAX)
	instruction(0x279ba)
	$U1:4 = EAX
	ram[0x3c2a0:8] = $U1:4
	instruction(0x279c0)
	RAX = 0xffffffff:8
	instruction(0x279c5)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x221b6  ADD qword ptr [RAX + 0x8],R12
0x221ba  MOV RAX,qword ptr [0x3bbd0]
0x221c1  TEST RAX,RAX
0x221c4  JZ 0x221d1
<L0> (entry=0x221b6):
	instruction(0x221b6)
	$U4:8 = RAX + 0x8:8
	$U5:8 = ram[$U4:8]
	CF = $U5:8 carry R12
	$U6:8 = ram[$U4:8]
	OF = $U6:8 scarry R12
	$U7:8 = ram[$U4:8]
	$U8:8 = $U7:8 + R12
	ram[$U4:8] = $U8:8
	$U9:8 = ram[$U4:8]
	SF = $U9:8 s< 0x0:8
	$U10:8 = ram[$U4:8]
	ZF = $U10:8 == 0x0:8
	$U11:8 = ram[$U4:8]
	$U1:8 = $U11:8 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x221ba)
	RAX = ram[0x3bbd0:8]
	instruction(0x221c1)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x221c4)
	if ZF jump 0x221d1:8

0x1ef33  CMP qword ptr [RBP + -0x80],0x3
0x1ef38  JNZ 0x1edfe
<L0> (entry=0x1ef33):
	instruction(0x1ef33)
	$U5:8 = RBP + 0xffffffffffffff80:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x3:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x3:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x3:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1ef38)
	$U1:1 = !ZF
	if $U1:1 jump 0x1edfe:8

0x205a0  MOV RAX,qword ptr [RSP + 0x28]
0x205a5  MOV qword ptr [0x3ab40],RAX
0x205ac  TEST R15B,R15B
0x205af  JZ 0x205bd
<L0> (entry=0x205a0):
	instruction(0x205a0)
	$U1:8 = 0x28:8 + RSP
	RAX = ram[$U1:8]
	instruction(0x205a5)
	$U1:8 = RAX
	ram[0x3ab40:8] = $U1:8
	instruction(0x205ac)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = R15B & R15B
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x205af)
	if ZF jump 0x205bd:8

0x1971e  CMP dword ptr [0x3ab54],0xc
0x19725  JLE 0x19750
<L0> (entry=0x1971e):
	instruction(0x1971e)
	$U5:4 = ram[0x3ab54:8]
	CF = $U5:4 < 0xc:4
	$U6:4 = ram[0x3ab54:8]
	OF = $U6:4 sborrow 0xc:4
	$U7:4 = ram[0x3ab54:8]
	$U1:4 = $U7:4 - 0xc:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x19725)
	$U2:1 = OF != SF
	$U1:1 = ZF || $U2:1
	if $U1:1 jump 0x19750:8

0x1b45f  TEST byte ptr [0x3ab90],0x10
0x1b466  JZ 0x1b472
<L0> (entry=0x1b45f):
	instruction(0x1b45f)
	CF = 0x0:1
	OF = 0x0:1
	$U5:1 = ram[0x3ab90:8]
	$U1:1 = $U5:1 & 0x10:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1b466)
	if ZF jump 0x1b472:8

0x1ece0  MOV RCX,qword ptr [RAX + RSI*0x1]
0x1ece4  ADD RAX,0x10
0x1ece8  ADD RCX,R13
0x1eceb  MOV qword ptr [RAX + -0x10],RCX
0x1ecef  SUB RDX,0x1
0x1ecf3  JNZ 0x1ece0
<L0> (entry=0x1ece0):
	instruction(0x1ece0)
	$U2:8 = RSI * 0x1:8
	$U1:8 = RAX + $U2:8
	RCX = ram[$U1:8]
	instruction(0x1ece4)
	CF = RAX carry 0x10:8
	OF = RAX scarry 0x10:8
	RAX = RAX + 0x10:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ece8)
	CF = RCX carry R13
	OF = RCX scarry R13
	RCX = RCX + R13
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1eceb)
	$U1:8 = RAX + 0xfffffffffffffff0:8
	$U2:8 = RCX
	ram[$U1:8] = $U2:8
	instruction(0x1ecef)
	CF = RDX < 0x1:8
	OF = RDX sborrow 0x1:8
	RDX = RDX - 0x1:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ecf3)
	$U1:1 = !ZF
	if $U1:1 jump 0x1ece0:8

0xb65e  TEST R12,R12
0xb661  JZ 0xbe05
<L0> (entry=0xb65e):
	instruction(0xb65e)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R12 & R12
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb661)
	if ZF jump 0xbe05:8

0x1aa26  MOV qword ptr [RSP + 0x20],R12
0x1aa2b  MOV RAX,R12
0x1aa2e  XOR EDX,EDX
0x1aa30  MOV RSI,R14
0x1aa33  MOV EDI,0xa
0x1aa38  MOV qword ptr [RSP + 0x40],RAX
0x1aa3d  CALL 0x18d70
<L0> (entry=0x1aa26):
	instruction(0x1aa26)
	$U1:8 = 0x20:8 + RSP
	$U2:8 = R12
	ram[$U1:8] = $U2:8
	instruction(0x1aa2b)
	RAX = R12
	instruction(0x1aa2e)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX ^ EDX
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1aa30)
	RSI = R14
	instruction(0x1aa33)
	RDI = 0xa:8
	instruction(0x1aa38)
	$U1:8 = 0x40:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1aa3d)
	$U1:8 = 0x1aa42:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x18d70:8

0x17710  ENDBR64
0x17714  PUSH RBP
0x17715  MOV RBP,RSP
0x17718  PUSH R15
0x1771a  MOV R15,RDI
0x1771d  PUSH R14
0x1771f  PUSH R13
0x17721  PUSH R12
0x17723  PUSH RBX
0x17724  SUB RSP,0xc8
0x1772b  TEST byte ptr [0x3aae0],0x1
0x17732  JNZ 0x17d50
<L0> (entry=0x17710):
	instruction(0x17710)
	instruction(0x17714)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x17715)
	RBP = RSP
	instruction(0x17718)
	$U1:8 = R15
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1771a)
	R15 = RDI
	instruction(0x1771d)
	$U1:8 = R14
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1771f)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x17721)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x17723)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x17724)
	CF = RSP < 0xc8:8
	OF = RSP sborrow 0xc8:8
	RSP = RSP - 0xc8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1772b)
	CF = 0x0:1
	OF = 0x0:1
	$U5:1 = ram[0x3aae0:8]
	$U1:1 = $U5:1 & 0x1:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x17732)
	$U1:1 = !ZF
	if $U1:1 jump 0x17d50:8

0xe62a  TEST EAX,EAX
0xe62c  JNS 0xe640
<L0> (entry=0xe62a):
	instruction(0xe62a)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xe62c)
	$U1:1 = !SF
	if $U1:1 jump 0xe640:8

0x7c70  MOV RCX,qword ptr [RBX + 0x30]
0x7c74  MOV EAX,dword ptr [R12]
0x7c78  MOV EDI,dword ptr [R12 + 0x4]
0x7c7d  MOV RSI,RCX
0x7c80  LEA RAX,[RCX + RAX*0x1 + 0xb]
0x7c85  NEG RSI
0x7c88  LEA RCX,[RCX + RDI*0x1 + -0x1]
0x7c8d  AND RAX,RSI
0x7c90  ADD RAX,RCX
0x7c93  LEA RCX,[RDX + -0x20]
0x7c97  AND RAX,RSI
0x7c9a  CMP RAX,RCX
0x7c9d  JA 0x7cb0
<L0> (entry=0x7c70):
	instruction(0x7c70)
	$U1:8 = RBX + 0x30:8
	RCX = ram[$U1:8]
	instruction(0x7c74)
	EAX = ram[R12]
	RAX = zext(EAX)
	instruction(0x7c78)
	$U1:8 = 0x4:8 + R12
	EDI = ram[$U1:8]
	RDI = zext(EDI)
	instruction(0x7c7d)
	RSI = RCX
	instruction(0x7c80)
	$U2:8 = 0xb:8 + RCX
	$U3:8 = RAX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	RAX = $U1:8
	instruction(0x7c85)
	CF = RSI != 0x0:8
	OF = 0x0:8 sborrow RSI
	RSI = -RSI
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7c88)
	$U2:8 = 0xffffffffffffffff:8 + RCX
	$U3:8 = RDI * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	RCX = $U1:8
	instruction(0x7c8d)
	CF = 0x0:1
	OF = 0x0:1
	RAX = RAX & RSI
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7c90)
	CF = RAX carry RCX
	OF = RAX scarry RCX
	RAX = RAX + RCX
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7c93)
	$U1:8 = RDX + 0xffffffffffffffe0:8
	RCX = $U1:8
	instruction(0x7c97)
	CF = 0x0:1
	OF = 0x0:1
	RAX = RAX & RSI
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7c9a)
	CF = RAX < RCX
	OF = RAX sborrow RCX
	$U1:8 = RAX - RCX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7c9d)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x7cb0:8

0xabc0  JMP 0xa50d
<L0> (entry=0xabc0):
	jump 0xa50d:8

0xb96a  MOV R8D,dword ptr [0x3ab08]
0xb971  TEST R8D,R8D
0xb974  JNZ 0xba41
<L0> (entry=0xb96a):
	instruction(0xb96a)
	R8D = ram[0x3ab08:8]
	R8 = zext(R8D)
	instruction(0xb971)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = R8D & R8D
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb974)
	$U1:1 = !ZF
	if $U1:1 jump 0xba41:8

0x233e1  CMP qword ptr [R12 + 0x30],0x8
0x233e7  JNZ 0x233af
<L0> (entry=0x233e1):
	instruction(0x233e1)
	$U5:8 = 0x30:8 + R12
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x8:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x8:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x8:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x233e7)
	$U1:1 = !ZF
	if $U1:1 jump 0x233af:8

0xb72f  MOV EDI,dword ptr [RSP + 0x1c]
0xb733  XOR EAX,EAX
0xb735  TEST EDI,EDI
0xb737  CMOVNZ R12,RAX
0xb73b  CMP EDX,-0x1
0xb73e  JZ 0xb761
<L0> (entry=0xb72f):
	instruction(0xb72f)
	$U1:8 = 0x1c:8 + RSP
	EDI = ram[$U1:8]
	RDI = zext(EDI)
	instruction(0xb733)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xb735)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EDI & EDI
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb737)
	$U3:1 = !ZF
	$U1:8 = RAX
	$U2:1 = !$U3:1
	if $U2:1 jump <L916>
<L1>:
	R12 = $U1:8
<L2>:
	instruction(0xb73b)
	CF = EDX < 0xffffffff:4
	OF = EDX sborrow 0xffffffff:4
	$U1:4 = EDX - 0xffffffff:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb73e)
	if ZF jump 0xb761:8

0x1affd  MOV EDI,0xc5
0x1b002  MOV RBP,RAX
0x1b005  CALL 0x19f10
<L0> (entry=0x1affd):
	instruction(0x1affd)
	RDI = 0xc5:8
	instruction(0x1b002)
	RBP = RAX
	instruction(0x1b005)
	$U1:8 = 0x1b00a:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x19f10:8

0x1e846  MOV R14,RSI
0x1e849  MOVSXD RAX,R12D
0x1e84c  MOV qword ptr [RBP + -0x68],RSI
0x1e850  SHL R14,0x4
0x1e854  LEA RDI,[RAX + RAX*0x8 + 0x250]
0x1e85c  MOV qword ptr [RBP + -0x60],RDX
0x1e860  ADD R14,RDX
0x1e863  ADD RDI,R15
0x1e866  MOV qword ptr [R14],RDI
0x1e869  CALL 0x2ba40
<L0> (entry=0x1e846):
	instruction(0x1e846)
	R14 = RSI
	instruction(0x1e849)
	RAX = sext(R12D)
	instruction(0x1e84c)
	$U1:8 = RBP + 0xffffffffffffff98:8
	$U2:8 = RSI
	ram[$U1:8] = $U2:8
	instruction(0x1e850)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = R14
	R14 = R14 << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = R14 s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = R14 s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = R14 == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = R14 & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1e854)
	$U2:8 = 0x250:8 + RAX
	$U3:8 = RAX * 0x8:8
	$U1:8 = $U2:8 + $U3:8
	RDI = $U1:8
	instruction(0x1e85c)
	$U1:8 = RBP + 0xffffffffffffffa0:8
	$U2:8 = RDX
	ram[$U1:8] = $U2:8
	instruction(0x1e860)
	CF = R14 carry RDX
	OF = R14 scarry RDX
	R14 = R14 + RDX
	SF = R14 s< 0x0:8
	ZF = R14 == 0x0:8
	$U1:8 = R14 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e863)
	CF = RDI carry R15
	OF = RDI scarry R15
	RDI = RDI + R15
	SF = RDI s< 0x0:8
	ZF = RDI == 0x0:8
	$U1:8 = RDI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e866)
	$U1:8 = RDI
	ram[R14] = $U1:8
	instruction(0x1e869)
	$U1:8 = 0x1e86e:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2ba40:8

0x2380f  LEA RAX,[0x3c230]
0x23816  MOV qword ptr [R12 + 0x8],RAX
0x2381b  TEST byte ptr [0x3be0c],0x4
0x23822  JZ 0x266ec
<L0> (entry=0x2380f):
	instruction(0x2380f)
	RAX = 0x3c230:8
	instruction(0x23816)
	$U1:8 = 0x8:8 + R12
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x2381b)
	CF = 0x0:1
	OF = 0x0:1
	$U5:1 = ram[0x3be0c:8]
	$U1:1 = $U5:1 & 0x4:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23822)
	if ZF jump 0x266ec:8

0x7a70  CMP byte ptr [R13 + 0x17],0x0
0x7a75  JNZ 0x7a0f
<L0> (entry=0x7a70):
	instruction(0x7a70)
	$U5:8 = R13 + 0x17:8
	$U6:1 = ram[$U5:8]
	CF = $U6:1 < 0x0:1
	$U7:1 = ram[$U5:8]
	OF = $U7:1 sborrow 0x0:1
	$U8:1 = ram[$U5:8]
	$U1:1 = $U8:1 - 0x0:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7a75)
	$U1:1 = !ZF
	if $U1:1 jump 0x7a0f:8

0x241a1  MOVZX EAX,word ptr [0x1038]
0x241a8  LEA RDX,[0x1000]
0x241af  ADD RDX,qword ptr [0x1020]
0x241b6  MOV qword ptr [0x3bd98],RDX
0x241bd  LEA RCX,[RAX*0x8]
0x241c5  MOV word ptr [0x3bda8],AX
0x241cc  SUB RCX,RAX
0x241cf  LEA RDX,[RDX + RCX*0x8 + -0x38]
0x241d4  JMP 0x241f7
<L0> (entry=0x241a1):
	instruction(0x241a1)
	$U1:2 = ram[0x1038:8]
	EAX = zext($U1:2)
	RAX = zext(EAX)
	instruction(0x241a8)
	RDX = 0x1000:8
	instruction(0x241af)
	$U4:8 = ram[0x1020:8]
	CF = RDX carry $U4:8
	$U5:8 = ram[0x1020:8]
	OF = RDX scarry $U5:8
	$U6:8 = ram[0x1020:8]
	RDX = RDX + $U6:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x241b6)
	$U1:8 = RDX
	ram[0x3bd98:8] = $U1:8
	instruction(0x241bd)
	$U1:8 = RAX * 0x8:8
	RCX = $U1:8
	instruction(0x241c5)
	$U1:2 = AX
	ram[0x3bda8:8] = $U1:2
	instruction(0x241cc)
	CF = RCX < RAX
	OF = RCX sborrow RAX
	RCX = RCX - RAX
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x241cf)
	$U2:8 = 0xffffffffffffffc8:8 + RDX
	$U3:8 = RCX * 0x8:8
	$U1:8 = $U2:8 + $U3:8
	RDX = $U1:8
	instruction(0x241d4)
	jump 0x241f7:8

0x2bfe5  CMP EDX,0x4
0x2bfe8  JNC 0x2c000
<L0> (entry=0x2bfe5):
	instruction(0x2bfe5)
	CF = EDX < 0x4:4
	OF = EDX sborrow 0x4:4
	$U1:4 = EDX - 0x4:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2bfe8)
	$U1:1 = !CF
	if $U1:1 jump 0x2c000:8

0x20b22  LEA RDI,[RSP + 0xc2]
0x20b2a  TEST EAX,EAX
0x20b2c  JNZ 0x20bc8
<L0> (entry=0x20b22):
	instruction(0x20b22)
	$U1:8 = 0xc2:8 + RSP
	RDI = $U1:8
	instruction(0x20b2a)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x20b2c)
	$U1:1 = !ZF
	if $U1:1 jump 0x20bc8:8

0x7edb  OR qword ptr [RSP + RDX*0x1 + -0x8],0x0
0x7ee1  JMP 0x7d3b
<L0> (entry=0x7edb):
	instruction(0x7edb)
	$U5:8 = 0xfffffffffffffff8:8 + RSP
	$U6:8 = RDX * 0x1:8
	$U4:8 = $U5:8 + $U6:8
	CF = 0x0:1
	OF = 0x0:1
	$U7:8 = ram[$U4:8]
	$U8:8 = $U7:8 | 0x0:8
	ram[$U4:8] = $U8:8
	$U9:8 = ram[$U4:8]
	SF = $U9:8 s< 0x0:8
	$U10:8 = ram[$U4:8]
	ZF = $U10:8 == 0x0:8
	$U11:8 = ram[$U4:8]
	$U1:8 = $U11:8 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7ee1)
	jump 0x7d3b:8

0x27b06  MOV EDX,R8D
0x27b09  MOV RSI,R9
0x27b0c  MOV EDI,0xffffff9c
0x27b11  MOV EAX,0x101
0x27b16  SYSCALL
<L0> (entry=0x27b06):
	instruction(0x27b06)
	EDX = R8D
	RDX = zext(EDX)
	instruction(0x27b09)
	RSI = R9
	instruction(0x27b0c)
	RDI = 0xffffff9c:8
	instruction(0x27b11)
	RAX = 0x101:8
	instruction(0x27b16)
	RCX = 0x27b18:8
	$U1:1 = NT & 0x1:1
	$U2:8 = zext($U1:1)
	$U3:8 = 0x4000:8 * $U2:8
	$U4:1 = OF & 0x1:1
	$U5:8 = zext($U4:1)
	$U6:8 = 0x800:8 * $U5:8
	$U7:8 = $U3:8 | $U6:8
	$U8:1 = DF & 0x1:1
	$U9:8 = zext($U8:1)
	$U10:8 = 0x400:8 * $U9:8
	$U11:8 = $U7:8 | $U10:8
	$U12:1 = IF & 0x1:1
	$U13:8 = zext($U12:1)
	$U14:8 = 0x200:8 * $U13:8
	$U15:8 = $U11:8 | $U14:8
	$U16:1 = TF & 0x1:1
	$U17:8 = zext($U16:1)
	$U18:8 = 0x100:8 * $U17:8
	$U19:8 = $U15:8 | $U18:8
	$U20:1 = SF & 0x1:1
	$U21:8 = zext($U20:1)
	$U22:8 = 0x80:8 * $U21:8
	$U23:8 = $U19:8 | $U22:8
	$U24:1 = ZF & 0x1:1
	$U25:8 = zext($U24:1)
	$U26:8 = 0x40:8 * $U25:8
	$U27:8 = $U23:8 | $U26:8
	$U28:1 = AF & 0x1:1
	$U29:8 = zext($U28:1)
	$U30:8 = 0x10:8 * $U29:8
	$U31:8 = $U27:8 | $U30:8
	$U32:1 = PF & 0x1:1
	$U33:8 = zext($U32:1)
	$U34:8 = 0x4:8 * $U33:8
	$U35:8 = $U31:8 | $U34:8
	$U36:1 = CF & 0x1:1
	$U37:8 = zext($U36:1)
	$U38:8 = 0x1:8 * $U37:8
	R11 = $U35:8 | $U38:8
	NEXT_PC = 0x27b18:8
	exception(0x101:4, 0x0:4)

0x8122  MOV dword ptr [R12 + RBX*0x4 + 0x24],0x2
0x812b  MOV dword ptr [RBP + -0xc8],0x1
0x8135  MOV EAX,dword ptr [RBP + -0xf4]
0x813b  TEST EAX,EAX
0x813d  JZ 0x8160
<L0> (entry=0x8122):
	instruction(0x8122)
	$U2:8 = 0x24:8 + R12
	$U3:8 = RBX * 0x4:8
	$U1:8 = $U2:8 + $U3:8
	$U4:4 = 0x2:4
	ram[$U1:8] = $U4:4
	instruction(0x812b)
	$U1:8 = RBP + 0xffffffffffffff38:8
	$U2:4 = 0x1:4
	ram[$U1:8] = $U2:4
	instruction(0x8135)
	$U1:8 = RBP + 0xffffffffffffff0c:8
	EAX = ram[$U1:8]
	RAX = zext(EAX)
	instruction(0x813b)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x813d)
	if ZF jump 0x8160:8

0x1b5f7  CMP ESI,0x5e
0x1b5fa  JA 0x1b683
<L0> (entry=0x1b5f7):
	instruction(0x1b5f7)
	CF = ESI < 0x5e:4
	OF = ESI sborrow 0x5e:4
	$U1:4 = ESI - 0x5e:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1b5fa)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x1b683:8

0xe66b  JMP 0xe62e
<L0> (entry=0xe66b):
	jump 0xe62e:8

0xe498  MOV RCX,qword ptr [0x3aaf8]
0xe49f  LEA RAX,[0x3c2d8]
0xe4a6  LEA RDX,[RCX + RAX*0x1 + -0x1]
0xe4ab  NEG RCX
0xe4ae  AND RDX,RCX
0xe4b1  MOV qword ptr [0x3c180],RDX
0xe4b8  JMP 0xe3f4
<L0> (entry=0xe498):
	instruction(0xe498)
	RCX = ram[0x3aaf8:8]
	instruction(0xe49f)
	RAX = 0x3c2d8:8
	instruction(0xe4a6)
	$U2:8 = 0xffffffffffffffff:8 + RCX
	$U3:8 = RAX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	RDX = $U1:8
	instruction(0xe4ab)
	CF = RCX != 0x0:8
	OF = 0x0:8 sborrow RCX
	RCX = -RCX
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xe4ae)
	CF = 0x0:1
	OF = 0x0:1
	RDX = RDX & RCX
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xe4b1)
	$U1:8 = RDX
	ram[0x3c180:8] = $U1:8
	instruction(0xe4b8)
	jump 0xe3f4:8

0x22397  MOV R13,qword ptr [RBX + 0x8]
0x2239b  MOV R12,qword ptr [RBX]
0x2239e  MOV RAX,R13
0x223a1  MOV R14,R13
0x223a4  ADD R12,RDX
0x223a7  SHR RAX,0x20
0x223ab  LEA RAX,[RAX + RAX*0x2]
0x223af  LEA R15,[RSI + RAX*0x8]
0x223b3  AND R14D,0xffffffff
0x223b7  JZ 0x2238a
<L0> (entry=0x22397):
	instruction(0x22397)
	$U1:8 = RBX + 0x8:8
	R13 = ram[$U1:8]
	instruction(0x2239b)
	R12 = ram[RBX]
	instruction(0x2239e)
	RAX = R13
	instruction(0x223a1)
	R14 = R13
	instruction(0x223a4)
	CF = R12 carry RDX
	OF = R12 scarry RDX
	R12 = R12 + RDX
	SF = R12 s< 0x0:8
	ZF = R12 == 0x0:8
	$U1:8 = R12 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x223a7)
	$U1:8 = 0x20:8 & 0x3f:8
	$U2:8 = RAX
	RAX = RAX >> $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 >> $U5:8
	$U7:8 = $U6:8 & 0x1:8
	$U4:1 = $U7:8 != 0x0:8
	$U8:1 = !$U3:1
	$U9:1 = $U8:1 && CF
	$U10:1 = $U3:1 && $U4:1
	CF = $U9:1 || $U10:1
	$U11:1 = $U1:8 == 0x1:8
	$U12:1 = $U2:8 s< 0x0:8
	$U13:1 = !$U11:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U11:1 && $U12:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RAX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RAX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RAX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x223ab)
	$U2:8 = RAX * 0x2:8
	$U1:8 = RAX + $U2:8
	RAX = $U1:8
	instruction(0x223af)
	$U2:8 = RAX * 0x8:8
	$U1:8 = RSI + $U2:8
	R15 = $U1:8
	instruction(0x223b3)
	CF = 0x0:1
	OF = 0x0:1
	R14D = R14D & 0xffffffff:4
	R14 = zext(R14D)
	SF = R14D s< 0x0:4
	ZF = R14D == 0x0:4
	$U1:4 = R14D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x223b7)
	if ZF jump 0x2238a:8

0x1b472  MOV R8D,0x1
0x1b478  LEA R15,[RSP + 0xa8]
0x1b480  JMP 0x1a7f6
<L0> (entry=0x1b472):
	instruction(0x1b472)
	R8 = 0x1:8
	instruction(0x1b478)
	$U1:8 = 0xa8:8 + RSP
	R15 = $U1:8
	instruction(0x1b480)
	jump 0x1a7f6:8

0x16090  ENDBR64
0x16094  LEA RAX,[0x3c0c8]
0x1609b  MOVQ XMM0, RAX
0x160a0  ADD RAX,0x10
0x160a4  PUNPCKLQDQ XMM0, XMM0
0x160a8  MOVUPS xmmword ptr [0x3c0c8], XMM0
0x160af  MOVQ XMM0, RAX
0x160b4  ADD RAX,0x10
0x160b8  PUNPCKLQDQ XMM0, XMM0
0x160bc  MOVUPS xmmword ptr [0x3c0d8], XMM0
0x160c3  MOVQ XMM0, RAX
0x160c8  LEA RAX,[0x16080]
0x160cf  PUNPCKLQDQ XMM0, XMM0
0x160d3  MOV qword ptr [0x3aa80],RAX
0x160da  MOV qword ptr [0x3aa78],RAX
0x160e1  MOVUPS xmmword ptr [0x3c0e8], XMM0
0x160e8  RET
<L0> (entry=0x16090):
	instruction(0x16090)
	instruction(0x16094)
	RAX = 0x3c0c8:8
	instruction(0x1609b)
	XMM0 = zext(RAX)
	instruction(0x160a0)
	CF = RAX carry 0x10:8
	OF = RAX scarry 0x10:8
	RAX = RAX + 0x10:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x160a4)
	XMM0_Qb = XMM0_Qa
	instruction(0x160a8)
	$U1:16 = XMM0
	ram[0x3c0c8:8] = $U1:16
	instruction(0x160af)
	XMM0 = zext(RAX)
	instruction(0x160b4)
	CF = RAX carry 0x10:8
	OF = RAX scarry 0x10:8
	RAX = RAX + 0x10:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x160b8)
	XMM0_Qb = XMM0_Qa
	instruction(0x160bc)
	$U1:16 = XMM0
	ram[0x3c0d8:8] = $U1:16
	instruction(0x160c3)
	XMM0 = zext(RAX)
	instruction(0x160c8)
	RAX = 0x16080:8
	instruction(0x160cf)
	XMM0_Qb = XMM0_Qa
	instruction(0x160d3)
	$U1:8 = RAX
	ram[0x3aa80:8] = $U1:8
	instruction(0x160da)
	$U1:8 = RAX
	ram[0x3aa78:8] = $U1:8
	instruction(0x160e1)
	$U1:16 = XMM0
	ram[0x3c0e8:8] = $U1:16
	instruction(0x160e8)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x26ab0  ENDBR64
0x26ab4  PUSH R12
0x26ab6  PUSH RBX
0x26ab7  MOV RBX,RDI
0x26aba  SUB RSP,0x8
0x26abe  MOV R12,qword ptr [0x3c298]
0x26ac5  TEST R12,R12
0x26ac8  JZ 0x26b20
<L0> (entry=0x26ab0):
	instruction(0x26ab0)
	instruction(0x26ab4)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x26ab6)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x26ab7)
	RBX = RDI
	instruction(0x26aba)
	CF = RSP < 0x8:8
	OF = RSP sborrow 0x8:8
	RSP = RSP - 0x8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x26abe)
	R12 = ram[0x3c298:8]
	instruction(0x26ac5)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R12 & R12
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x26ac8)
	if ZF jump 0x26b20:8

0xec8b  MOV RAX,R14
0xec8e  JMP 0xeb4f
<L0> (entry=0xec8b):
	instruction(0xec8b)
	RAX = R14
	instruction(0xec8e)
	jump 0xeb4f:8

0xb498  MOV RSI,R14
0xb49b  MOV RDI,R13
0xb49e  CALL 0xe690
<L0> (entry=0xb498):
	instruction(0xb498)
	RSI = R14
	instruction(0xb49b)
	RDI = R13
	instruction(0xb49e)
	$U1:8 = 0xb4a3:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0xe690:8

0x23350  CMP ECX,0x6474e551
0x23356  JZ 0x23730
<L0> (entry=0x23350):
	instruction(0x23350)
	CF = ECX < 0x6474e551:4
	OF = ECX sborrow 0x6474e551:4
	$U1:4 = ECX - 0x6474e551:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23356)
	if ZF jump 0x23730:8

0x24300  NOP
0x24301  MOV ESI,0x1
0x24306  MOV RDI,R15
0x24309  CALL 0x1c170
<L0> (entry=0x24300):
	instruction(0x24300)
	instruction(0x24301)
	RSI = 0x1:8
	instruction(0x24306)
	RDI = R15
	instruction(0x24309)
	$U1:8 = 0x2430e:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x1c170:8

0x207f3  MOV RDI,qword ptr [0x3aae8]
0x207fa  TEST RDI,RDI
0x207fd  JZ 0x2080b
<L0> (entry=0x207f3):
	instruction(0x207f3)
	RDI = ram[0x3aae8:8]
	instruction(0x207fa)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RDI & RDI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x207fd)
	if ZF jump 0x2080b:8

0xe8f0  ENDBR64
0xe8f4  PUSH R12
0xe8f6  LEA R12,[0x3ba70]
0xe8fd  PUSH RBP
0xe8fe  MOV RBP,RDI
0xe901  MOV RDI,R12
0xe904  PUSH RBX
0xe905  MOV RBX,RSI
0xe908  CALL qword ptr [0x3aa80]
<L0> (entry=0xe8f0):
	instruction(0xe8f0)
	instruction(0xe8f4)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xe8f6)
	R12 = 0x3ba70:8
	instruction(0xe8fd)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xe8fe)
	RBP = RDI
	instruction(0xe901)
	RDI = R12
	instruction(0xe904)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xe905)
	RBX = RSI
	instruction(0xe908)
	$U1:8 = ram[0x3aa80:8]
	$U2:8 = 0xe90e:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U2:8
	call $U1:8

0x27b18  CMP RAX,-0x1000
0x27b1e  JA 0x27b50
<L0> (entry=0x27b18):
	instruction(0x27b18)
	CF = RAX < 0xfffffffffffff000:8
	OF = RAX sborrow 0xfffffffffffff000:8
	$U1:8 = RAX - 0xfffffffffffff000:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x27b1e)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x27b50:8

0xba4d  TEST byte ptr [RAX + 0x3ed],0x8
0xba54  JNZ 0xbe2f
<L0> (entry=0xba4d):
	instruction(0xba4d)
	$U5:8 = RAX + 0x3ed:8
	CF = 0x0:1
	OF = 0x0:1
	$U6:1 = ram[$U5:8]
	$U1:1 = $U6:1 & 0x8:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xba54)
	$U1:1 = !ZF
	if $U1:1 jump 0xbe2f:8

0x80bf  MOV RDX,qword ptr [RBP + -0xd8]
0x80c6  MOV RSI,qword ptr [RBP + -0xe0]
0x80cd  MOV RDI,RAX
0x80d0  CALL 0x2bfa0
<L0> (entry=0x80bf):
	instruction(0x80bf)
	$U1:8 = RBP + 0xffffffffffffff28:8
	RDX = ram[$U1:8]
	instruction(0x80c6)
	$U1:8 = RBP + 0xffffffffffffff20:8
	RSI = ram[$U1:8]
	instruction(0x80cd)
	RDI = RAX
	instruction(0x80d0)
	$U1:8 = 0x80d5:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2bfa0:8

0x2bfe0  CMP EDX,0x8
0x2bfe3  JNC 0x2c010
<L0> (entry=0x2bfe0):
	instruction(0x2bfe0)
	CF = EDX < 0x8:4
	OF = EDX sborrow 0x8:4
	$U1:4 = EDX - 0x8:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2bfe3)
	$U1:1 = !CF
	if $U1:1 jump 0x2c010:8

0x149fb  LEA RDX,[R9 + 0xf]
0x149ff  MOV RSI,RSP
0x14a02  SHR RDX,0x4
0x14a06  SHL RDX,0x4
0x14a0a  MOV RDI,RDX
0x14a0d  AND RDI,-0x1000
0x14a14  SUB RSI,RDI
0x14a17  CMP RSP,RSI
0x14a1a  JZ 0x14a31
<L0> (entry=0x149fb):
	instruction(0x149fb)
	$U1:8 = R9 + 0xf:8
	RDX = $U1:8
	instruction(0x149ff)
	RSI = RSP
	instruction(0x14a02)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RDX
	RDX = RDX >> $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 >> $U5:8
	$U7:8 = $U6:8 & 0x1:8
	$U4:1 = $U7:8 != 0x0:8
	$U8:1 = !$U3:1
	$U9:1 = $U8:1 && CF
	$U10:1 = $U3:1 && $U4:1
	CF = $U9:1 || $U10:1
	$U11:1 = $U1:8 == 0x1:8
	$U12:1 = $U2:8 s< 0x0:8
	$U13:1 = !$U11:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U11:1 && $U12:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RDX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RDX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RDX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x14a06)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RDX
	RDX = RDX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RDX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RDX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RDX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RDX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x14a0a)
	RDI = RDX
	instruction(0x14a0d)
	CF = 0x0:1
	OF = 0x0:1
	RDI = RDI & 0xfffffffffffff000:8
	SF = RDI s< 0x0:8
	ZF = RDI == 0x0:8
	$U1:8 = RDI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x14a14)
	CF = RSI < RDI
	OF = RSI sborrow RDI
	RSI = RSI - RDI
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x14a17)
	CF = RSP < RSI
	OF = RSP sborrow RSI
	$U1:8 = RSP - RSI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x14a1a)
	if ZF jump 0x14a31:8

0xe530  ENDBR64
0xe534  MOV RCX,qword ptr [0x3c178]
0xe53b  CMP RCX,RDI
0xe53e  JZ 0xe548
<L0> (entry=0xe530):
	instruction(0xe530)
	instruction(0xe534)
	RCX = ram[0x3c178:8]
	instruction(0xe53b)
	CF = RCX < RDI
	OF = RCX sborrow RDI
	$U1:8 = RCX - RDI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xe53e)
	if ZF jump 0xe548:8

0x223c0  MOVZX ECX,byte ptr [R15 + 0x4]
0x223c5  MOVZX R11D,word ptr [R15 + 0x6]
0x223ca  MOV RAX,qword ptr [R15 + 0x8]
0x223ce  AND ECX,0xf
0x223d1  CMP R11W,-0xf
0x223d6  JZ 0x224b0
<L0> (entry=0x223c0):
	instruction(0x223c0)
	$U1:8 = R15 + 0x4:8
	$U2:1 = ram[$U1:8]
	ECX = zext($U2:1)
	RCX = zext(ECX)
	instruction(0x223c5)
	$U1:8 = R15 + 0x6:8
	$U2:2 = ram[$U1:8]
	R11D = zext($U2:2)
	R11 = zext(R11D)
	instruction(0x223ca)
	$U1:8 = R15 + 0x8:8
	RAX = ram[$U1:8]
	instruction(0x223ce)
	CF = 0x0:1
	OF = 0x0:1
	ECX = ECX & 0xf:4
	RCX = zext(ECX)
	SF = ECX s< 0x0:4
	ZF = ECX == 0x0:4
	$U1:4 = ECX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x223d1)
	CF = R11W < 0xfff1:2
	OF = R11W sborrow 0xfff1:2
	$U1:2 = R11W - 0xfff1:2
	SF = $U1:2 s< 0x0:2
	ZF = $U1:2 == 0x0:2
	$U2:2 = $U1:2 & 0xff:2
	$U3:1 = count_ones($U2:2)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x223d6)
	if ZF jump 0x224b0:8

0x1e8a5  MOV RAX,RSI
0x1e8a8  SHL RAX,0x4
0x1e8ac  ADD RAX,RDX
0x1e8af  MOV RDX,qword ptr [0x3aae8]
0x1e8b6  TEST RDX,RDX
0x1e8b9  JZ 0x1e8d8
<L0> (entry=0x1e8a5):
	instruction(0x1e8a5)
	RAX = RSI
	instruction(0x1e8a8)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RAX
	RAX = RAX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RAX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RAX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RAX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RAX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1e8ac)
	CF = RAX carry RDX
	OF = RAX scarry RDX
	RAX = RAX + RDX
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e8af)
	RDX = ram[0x3aae8:8]
	instruction(0x1e8b6)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RDX & RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e8b9)
	if ZF jump 0x1e8d8:8

0x240db  MOV EDX,dword ptr [0x3aae4]
0x240e1  TEST EDX,EDX
0x240e3  JNZ 0x25780
<L0> (entry=0x240db):
	instruction(0x240db)
	EDX = ram[0x3aae4:8]
	RDX = zext(EDX)
	instruction(0x240e1)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EDX & EDX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x240e3)
	$U1:1 = !ZF
	if $U1:1 jump 0x25780:8

0x7bcd  MOV RDX,qword ptr [RBP + -0x40]
0x7bd1  MOV R8,qword ptr [RBP + -0x48]
0x7bd5  MOV R11,0x1000000004
0x7bdf  MOV R10,0x554e4700000001
0x7be9  MOV R9,qword ptr [RBP + -0x50]
0x7bed  CMP RAX,RDX
0x7bf0  JNZ 0x7f2f
<L0> (entry=0x7bcd):
	instruction(0x7bcd)
	$U1:8 = RBP + 0xffffffffffffffc0:8
	RDX = ram[$U1:8]
	instruction(0x7bd1)
	$U1:8 = RBP + 0xffffffffffffffb8:8
	R8 = ram[$U1:8]
	instruction(0x7bd5)
	R11 = 0x1000000004:8
	instruction(0x7bdf)
	R10 = 0x554e4700000001:8
	instruction(0x7be9)
	$U1:8 = RBP + 0xffffffffffffffb0:8
	R9 = ram[$U1:8]
	instruction(0x7bed)
	CF = RAX < RDX
	OF = RAX sborrow RDX
	$U1:8 = RAX - RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7bf0)
	$U1:1 = !ZF
	if $U1:1 jump 0x7f2f:8

0xb640  MOV RDI,R13
0xb643  CALL 0x2ba40
<L0> (entry=0xb640):
	instruction(0xb640)
	RDI = R13
	instruction(0xb643)
	$U1:8 = 0xb648:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2ba40:8

0x79f1  MOVZX EDX,byte ptr [R13 + 0x10]
0x79f6  TEST DL,DL
0x79f8  JNZ 0x7e10
<L0> (entry=0x79f1):
	instruction(0x79f1)
	$U1:8 = R13 + 0x10:8
	$U2:1 = ram[$U1:8]
	EDX = zext($U2:1)
	RDX = zext(EDX)
	instruction(0x79f6)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = DL & DL
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x79f8)
	$U1:1 = !ZF
	if $U1:1 jump 0x7e10:8

0x23294  MOV RAX,qword ptr [R15 + 0x2a8]
0x2329b  MOV byte ptr [RBP + -0x290],0x0
0x232a2  MOVZX ECX,word ptr [R15 + 0x2b8]
0x232aa  MOV qword ptr [RBP + -0x268],RAX
0x232b1  OR byte ptr [R15 + 0x31e],0x4
0x232b9  LEA RAX,[RCX*0x8]
0x232c1  MOV RDI,qword ptr [RBP + -0x268]
0x232c8  MOVDQA XMM0, xmmword ptr [0x33f90]
0x232d0  SUB RAX,RCX
0x232d3  ADD dword ptr [R15 + 0x318],0x1
0x232db  MOV qword ptr [R15 + 0x368],0x0
0x232e6  LEA R12,[RDI + RAX*0x8]
0x232ea  MOVUPS xmmword ptr [R15 + 0x358], XMM0
0x232f2  CMP R12,RDI
0x232f5  JBE 0x25704
<L0> (entry=0x23294):
	instruction(0x23294)
	$U1:8 = R15 + 0x2a8:8
	RAX = ram[$U1:8]
	instruction(0x2329b)
	$U1:8 = RBP + 0xfffffffffffffd70:8
	$U2:1 = 0x0:1
	ram[$U1:8] = $U2:1
	instruction(0x232a2)
	$U1:8 = R15 + 0x2b8:8
	$U2:2 = ram[$U1:8]
	ECX = zext($U2:2)
	RCX = zext(ECX)
	instruction(0x232aa)
	$U1:8 = RBP + 0xfffffffffffffd98:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x232b1)
	$U4:8 = R15 + 0x31e:8
	CF = 0x0:1
	OF = 0x0:1
	$U5:1 = ram[$U4:8]
	$U6:1 = $U5:1 | 0x4:1
	ram[$U4:8] = $U6:1
	$U7:1 = ram[$U4:8]
	SF = $U7:1 s< 0x0:1
	$U8:1 = ram[$U4:8]
	ZF = $U8:1 == 0x0:1
	$U9:1 = ram[$U4:8]
	$U1:1 = $U9:1 & 0xff:1
	$U2:1 = count_ones($U1:1)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x232b9)
	$U1:8 = RCX * 0x8:8
	RAX = $U1:8
	instruction(0x232c1)
	$U1:8 = RBP + 0xfffffffffffffd98:8
	RDI = ram[$U1:8]
	instruction(0x232c8)
	XMM0 = ram[0x33f90:8]
	instruction(0x232d0)
	CF = RAX < RCX
	OF = RAX sborrow RCX
	RAX = RAX - RCX
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x232d3)
	$U4:8 = R15 + 0x318:8
	$U5:4 = ram[$U4:8]
	CF = $U5:4 carry 0x1:4
	$U6:4 = ram[$U4:8]
	OF = $U6:4 scarry 0x1:4
	$U7:4 = ram[$U4:8]
	$U8:4 = $U7:4 + 0x1:4
	ram[$U4:8] = $U8:4
	$U9:4 = ram[$U4:8]
	SF = $U9:4 s< 0x0:4
	$U10:4 = ram[$U4:8]
	ZF = $U10:4 == 0x0:4
	$U11:4 = ram[$U4:8]
	$U1:4 = $U11:4 & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x232db)
	$U1:8 = R15 + 0x368:8
	$U2:8 = 0x0:8
	ram[$U1:8] = $U2:8
	instruction(0x232e6)
	$U2:8 = RAX * 0x8:8
	$U1:8 = RDI + $U2:8
	R12 = $U1:8
	instruction(0x232ea)
	$U1:8 = R15 + 0x358:8
	$U2:16 = XMM0
	ram[$U1:8] = $U2:16
	instruction(0x232f2)
	CF = R12 < RDI
	OF = R12 sborrow RDI
	$U1:8 = R12 - RDI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x232f5)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x25704:8

0x79bc  TEST RAX,RAX
0x79bf  JLE 0x7e49
<L0> (entry=0x79bc):
	instruction(0x79bc)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x79bf)
	$U2:1 = OF != SF
	$U1:1 = ZF || $U2:1
	if $U1:1 jump 0x7e49:8

0x9831  LEA RDI,[R14 + 0x28]
0x9835  MOV RDX,R15
0x9838  XOR ESI,ESI
0x983a  CALL 0x2c1a0
<L0> (entry=0x9831):
	instruction(0x9831)
	$U1:8 = R14 + 0x28:8
	RDI = $U1:8
	instruction(0x9835)
	RDX = R15
	instruction(0x9838)
	CF = 0x0:1
	OF = 0x0:1
	ESI = ESI ^ ESI
	RSI = zext(ESI)
	SF = ESI s< 0x0:4
	ZF = ESI == 0x0:4
	$U1:4 = ESI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x983a)
	$U1:8 = 0x983f:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2c1a0:8

0x4ffb  MOV RDI,qword ptr [R14 + 0x3d8]
0x5002  TEST RDI,RDI
0x5005  JZ 0x54e8
<L0> (entry=0x4ffb):
	instruction(0x4ffb)
	$U1:8 = R14 + 0x3d8:8
	RDI = ram[$U1:8]
	instruction(0x5002)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RDI & RDI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x5005)
	if ZF jump 0x54e8:8

0x239d3  MOV RDI,R15
0x239d6  CALL 0x14530
<L0> (entry=0x239d3):
	instruction(0x239d3)
	RDI = R15
	instruction(0x239d6)
	$U1:8 = 0x239db:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x14530:8

0x205ea  MOV RAX,qword ptr [RSP + 0x40]
0x205ef  MOV qword ptr [0x3aaf8],RAX
0x205f6  JMP 0x207dd
<L0> (entry=0x205ea):
	instruction(0x205ea)
	$U1:8 = 0x40:8 + RSP
	RAX = ram[$U1:8]
	instruction(0x205ef)
	$U1:8 = RAX
	ram[0x3aaf8:8] = $U1:8
	instruction(0x205f6)
	jump 0x207dd:8

0x9c12  MOV qword ptr [RBP + -0x118],RAX
0x9c19  MOV EAX,dword ptr [RBP + 0x18]
0x9c1c  AND EAX,0x20000000
0x9c21  MOV dword ptr [RBP + -0x124],EAX
0x9c27  JZ 0xa0c8
<L0> (entry=0x9c12):
	instruction(0x9c12)
	$U1:8 = RBP + 0xfffffffffffffee8:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x9c19)
	$U1:8 = RBP + 0x18:8
	EAX = ram[$U1:8]
	RAX = zext(EAX)
	instruction(0x9c1c)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX & 0x20000000:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x9c21)
	$U1:8 = RBP + 0xfffffffffffffedc:8
	$U2:4 = EAX
	ram[$U1:8] = $U2:4
	instruction(0x9c27)
	if ZF jump 0xa0c8:8

0x7aa2  CMP word ptr [R13 + 0x3e],0x38
0x7aa8  JNZ 0x7e52
<L0> (entry=0x7aa2):
	instruction(0x7aa2)
	$U5:8 = R13 + 0x3e:8
	$U6:2 = ram[$U5:8]
	CF = $U6:2 < 0x38:2
	$U7:2 = ram[$U5:8]
	OF = $U7:2 sborrow 0x38:2
	$U8:2 = ram[$U5:8]
	$U1:2 = $U8:2 - 0x38:2
	SF = $U1:2 s< 0x0:2
	ZF = $U1:2 == 0x0:2
	$U2:2 = $U1:2 & 0xff:2
	$U3:1 = count_ones($U2:2)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7aa8)
	$U1:1 = !ZF
	if $U1:1 jump 0x7e52:8

0x1ee2c  MOV EAX,dword ptr [RBP + -0xa0]
0x1ee32  LEA ECX,[RAX + -0x3]
0x1ee35  SHL RDX,CL
0x1ee38  JMP 0x1e941
<L0> (entry=0x1ee2c):
	instruction(0x1ee2c)
	$U1:8 = RBP + 0xffffffffffffff60:8
	EAX = ram[$U1:8]
	RAX = zext(EAX)
	instruction(0x1ee32)
	$U1:8 = RAX + 0xfffffffffffffffd:8
	ECX = $U1:4
	RCX = zext(ECX)
	instruction(0x1ee35)
	$U1:1 = CL & 0x3f:1
	$U2:8 = RDX
	RDX = RDX << $U1:1
	$U3:1 = $U1:1 != 0x0:1
	$U5:1 = $U1:1 - 0x1:1
	$U6:8 = $U2:8 << $U5:1
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:1 == 0x1:1
	$U12:1 = RDX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:1 != 0x0:1
	$U17:1 = RDX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RDX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RDX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1ee38)
	jump 0x1e941:8

0x22166  ADD qword ptr [RAX + 0x8],R12
0x2216a  MOV RAX,qword ptr [0x3bb60]
0x22171  TEST RAX,RAX
0x22174  JZ 0x2217a
<L0> (entry=0x22166):
	instruction(0x22166)
	$U4:8 = RAX + 0x8:8
	$U5:8 = ram[$U4:8]
	CF = $U5:8 carry R12
	$U6:8 = ram[$U4:8]
	OF = $U6:8 scarry R12
	$U7:8 = ram[$U4:8]
	$U8:8 = $U7:8 + R12
	ram[$U4:8] = $U8:8
	$U9:8 = ram[$U4:8]
	SF = $U9:8 s< 0x0:8
	$U10:8 = ram[$U4:8]
	ZF = $U10:8 == 0x0:8
	$U11:8 = ram[$U4:8]
	$U1:8 = $U11:8 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2216a)
	RAX = ram[0x3bb60:8]
	instruction(0x22171)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x22174)
	if ZF jump 0x2217a:8

0x18820  ENDBR64
0x18824  MOV R9D,EDI
0x18827  MOV RDI,RDX
0x1882a  LEA R8,[0x39b00]
0x18831  MOV R10,RSI
0x18834  MOV EDX,R9D
0x18837  MOV RSI,RCX
0x1883a  LEA RAX,[RDX*0x8]
0x18842  SUB RAX,RDX
0x18845  SHL RAX,0x4
0x18849  ADD RAX,R8
0x1884c  MOV ECX,dword ptr [RAX + 0x30]
0x1884f  CMP ECX,0x3
0x18852  JZ 0x18920
<L0> (entry=0x18820):
	instruction(0x18820)
	instruction(0x18824)
	R9D = EDI
	R9 = zext(R9D)
	instruction(0x18827)
	RDI = RDX
	instruction(0x1882a)
	R8 = 0x39b00:8
	instruction(0x18831)
	R10 = RSI
	instruction(0x18834)
	EDX = R9D
	RDX = zext(EDX)
	instruction(0x18837)
	RSI = RCX
	instruction(0x1883a)
	$U1:8 = RDX * 0x8:8
	RAX = $U1:8
	instruction(0x18842)
	CF = RAX < RDX
	OF = RAX sborrow RDX
	RAX = RAX - RDX
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x18845)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RAX
	RAX = RAX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RAX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RAX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RAX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RAX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x18849)
	CF = RAX carry R8
	OF = RAX scarry R8
	RAX = RAX + R8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1884c)
	$U1:8 = RAX + 0x30:8
	ECX = ram[$U1:8]
	RCX = zext(ECX)
	instruction(0x1884f)
	CF = ECX < 0x3:4
	OF = ECX sborrow 0x3:4
	$U1:4 = ECX - 0x3:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x18852)
	if ZF jump 0x18920:8

0x1e14c  MOV RCX,qword ptr [RSI + 0x8]
0x1e150  MOV RSI,qword ptr [RSI]
0x1e153  CALL 0x1e070
<L0> (entry=0x1e14c):
	instruction(0x1e14c)
	$U1:8 = RSI + 0x8:8
	RCX = ram[$U1:8]
	instruction(0x1e150)
	RSI = ram[RSI]
	instruction(0x1e153)
	$U1:8 = 0x1e158:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x1e070:8

0x22435  MOV R12,qword ptr [0x3baf0]
0x2243c  MOVZX EDX,byte ptr [0x3be0e]
0x22443  JMP 0x22307
<L0> (entry=0x22435):
	instruction(0x22435)
	R12 = ram[0x3baf0:8]
	instruction(0x2243c)
	$U1:1 = ram[0x3be0e:8]
	EDX = zext($U1:1)
	RDX = zext(EDX)
	instruction(0x22443)
	jump 0x22307:8

0x23243  MOV R15,RAX
0x23246  TEST RAX,RAX
0x23249  JZ 0x26a53
<L0> (entry=0x23243):
	instruction(0x23243)
	R15 = RAX
	instruction(0x23246)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23249)
	if ZF jump 0x26a53:8

0x2384e  MOV EDI,0x6fffffff
0x23853  MOV R11D,0x6ffffdff
0x23859  MOV EBX,0x6ffffeff
0x2385e  MOV R12D,0x6fffff41
0x23864  MOV R13D,0x6ffffe35
0x2386a  MOV R10D,0x32
0x23870  MOV R8D,0x70000022
0x23876  JMP 0x23892
<L0> (entry=0x2384e):
	instruction(0x2384e)
	RDI = 0x6fffffff:8
	instruction(0x23853)
	R11 = 0x6ffffdff:8
	instruction(0x23859)
	RBX = 0x6ffffeff:8
	instruction(0x2385e)
	R12 = 0x6fffff41:8
	instruction(0x23864)
	R13 = 0x6ffffe35:8
	instruction(0x2386a)
	R10 = 0x32:8
	instruction(0x23870)
	R8 = 0x70000022:8
	instruction(0x23876)
	jump 0x23892:8

0x1b443  TEST byte ptr [0x3ac24],0x10
0x1b44a  JNZ 0x1b456
<L0> (entry=0x1b443):
	instruction(0x1b443)
	CF = 0x0:1
	OF = 0x0:1
	$U5:1 = ram[0x3ac24:8]
	$U1:1 = $U5:1 & 0x10:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1b44a)
	$U1:1 = !ZF
	if $U1:1 jump 0x1b456:8

0x242cf  MOV qword ptr [RBP + -0x298],RAX
0x242d6  MOV RAX,qword ptr [R15 + 0xe8]
0x242dd  TEST RAX,RAX
0x242e0  JZ 0x242ed
<L0> (entry=0x242cf):
	instruction(0x242cf)
	$U1:8 = RBP + 0xfffffffffffffd68:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x242d6)
	$U1:8 = R15 + 0xe8:8
	RAX = ram[$U1:8]
	instruction(0x242dd)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x242e0)
	if ZF jump 0x242ed:8

0x4f0d  MOV RAX,qword ptr [R14 + 0x3d0]
0x4f14  MOV qword ptr [RBP + -0x4b0],RAX
0x4f1b  TEST RAX,RAX
0x4f1e  JZ 0x4f3e
<L0> (entry=0x4f0d):
	instruction(0x4f0d)
	$U1:8 = R14 + 0x3d0:8
	RAX = ram[$U1:8]
	instruction(0x4f14)
	$U1:8 = RBP + 0xfffffffffffffb50:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x4f1b)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x4f1e)
	if ZF jump 0x4f3e:8

0x23513  MOV ECX,dword ptr [RCX + 0x8]
0x23516  CMP R8D,0xc0000002
0x2351d  JZ 0x23720
<L0> (entry=0x23513):
	instruction(0x23513)
	$U1:8 = RCX + 0x8:8
	ECX = ram[$U1:8]
	RCX = zext(ECX)
	instruction(0x23516)
	CF = R8D < 0xc0000002:4
	OF = R8D sborrow 0xc0000002:4
	$U1:4 = R8D - 0xc0000002:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2351d)
	if ZF jump 0x23720:8

0x2bfa0  ENDBR64
0x2bfa4  MOV RAX,RDI
0x2bfa7  ADD RAX,RDX
0x2bfaa  JMP 0x2bfb7
<L0> (entry=0x2bfa0):
	instruction(0x2bfa0)
	instruction(0x2bfa4)
	RAX = RDI
	instruction(0x2bfa7)
	CF = RAX carry RDX
	OF = RAX scarry RDX
	RAX = RAX + RDX
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2bfaa)
	jump 0x2bfb7:8

0x23389  MOV qword ptr [RBP + -0x2a0],R14
0x23390  JMP 0x233bc
<L0> (entry=0x23389):
	instruction(0x23389)
	$U1:8 = RBP + 0xfffffffffffffd60:8
	$U2:8 = R14
	ram[$U1:8] = $U2:8
	instruction(0x23390)
	jump 0x233bc:8

0x238ca  MOV RAX,qword ptr [R15 + 0xe0]
0x238d1  TEST RAX,RAX
0x238d4  JZ 0x238e1
<L0> (entry=0x238ca):
	instruction(0x238ca)
	$U1:8 = R15 + 0xe0:8
	RAX = ram[$U1:8]
	instruction(0x238d1)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x238d4)
	if ZF jump 0x238e1:8

0x1ec20  SUB RCX,0x1
0x1ec24  MOV ESI,R8D
0x1ec27  MOV RDX,RBX
0x1ec2a  MOV RAX,R11
0x1ec2d  SHL ESI,CL
0x1ec2f  MOVSXD RSI,ESI
0x1ec32  SUB RAX,0x1
0x1ec36  ADD RDX,0x10
0x1ec3a  TEST RSI,RAX
0x1ec3d  JZ 0x1ec5d
<L0> (entry=0x1ec20):
	instruction(0x1ec20)
	CF = RCX < 0x1:8
	OF = RCX sborrow 0x1:8
	RCX = RCX - 0x1:8
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ec24)
	ESI = R8D
	RSI = zext(ESI)
	instruction(0x1ec27)
	RDX = RBX
	instruction(0x1ec2a)
	RAX = R11
	instruction(0x1ec2d)
	$U1:1 = CL & 0x1f:1
	$U2:4 = ESI
	ESI = ESI << $U1:1
	RSI = zext(ESI)
	$U3:1 = $U1:1 != 0x0:1
	$U5:1 = $U1:1 - 0x1:1
	$U6:4 = $U2:4 << $U5:1
	$U4:1 = $U6:4 s< 0x0:4
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:1 == 0x1:1
	$U12:1 = ESI s< 0x0:4
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:1 != 0x0:1
	$U17:1 = ESI s< 0x0:4
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = ESI == 0x0:4
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:4 = ESI & 0xff:4
	$U27:1 = count_ones($U26:4)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1ec2f)
	RSI = sext(ESI)
	instruction(0x1ec32)
	CF = RAX < 0x1:8
	OF = RAX sborrow 0x1:8
	RAX = RAX - 0x1:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ec36)
	CF = RDX carry 0x10:8
	OF = RDX scarry 0x10:8
	RDX = RDX + 0x10:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ec3a)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RSI & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1ec3d)
	if ZF jump 0x1ec5d:8

0x4369  MOV EAX,dword ptr [0x3c118]
0x436f  XOR EDX,EDX
0x4371  LEA R8,[0x3c118]
0x4378  TEST EAX,EAX
0x437a  JZ 0x4430
<L0> (entry=0x4369):
	instruction(0x4369)
	EAX = ram[0x3c118:8]
	RAX = zext(EAX)
	instruction(0x436f)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX ^ EDX
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x4371)
	R8 = 0x3c118:8
	instruction(0x4378)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x437a)
	if ZF jump 0x4430:8

0x1e30c  LEA RAX,[RSP + 0x2c]
0x1e311  MOV qword ptr [RSP + 0x30],RDI
0x1e316  XOR ESI,ESI
0x1e318  LEA RDI,[RSP + 0x40]
0x1e31d  MOV qword ptr [RSP + 0x38],RAX
0x1e322  LEA RAX,[RSP + 0x30]
0x1e327  MOV qword ptr [0x3c218],RAX
0x1e32e  CALL 0x27ef0
<L0> (entry=0x1e30c):
	instruction(0x1e30c)
	$U1:8 = 0x2c:8 + RSP
	RAX = $U1:8
	instruction(0x1e311)
	$U1:8 = 0x30:8 + RSP
	$U2:8 = RDI
	ram[$U1:8] = $U2:8
	instruction(0x1e316)
	CF = 0x0:1
	OF = 0x0:1
	ESI = ESI ^ ESI
	RSI = zext(ESI)
	SF = ESI s< 0x0:4
	ZF = ESI == 0x0:4
	$U1:4 = ESI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e318)
	$U1:8 = 0x40:8 + RSP
	RDI = $U1:8
	instruction(0x1e31d)
	$U1:8 = 0x38:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1e322)
	$U1:8 = 0x30:8 + RSP
	RAX = $U1:8
	instruction(0x1e327)
	$U1:8 = RAX
	ram[0x3c218:8] = $U1:8
	instruction(0x1e32e)
	$U1:8 = 0x1e333:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x27ef0:8

0xbaa8  MOV EAX,EBP
0xbaaa  MOV R12,qword ptr [RSP + 0x30]
0xbaaf  MOV RBP,qword ptr [RSP + 0x48]
0xbab4  TEST AL,AL
0xbab6  JNZ 0xbb5a
<L0> (entry=0xbaa8):
	instruction(0xbaa8)
	EAX = EBP
	RAX = zext(EAX)
	instruction(0xbaaa)
	$U1:8 = 0x30:8 + RSP
	R12 = ram[$U1:8]
	instruction(0xbaaf)
	$U1:8 = 0x48:8 + RSP
	RBP = ram[$U1:8]
	instruction(0xbab4)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = AL & AL
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xbab6)
	$U1:1 = !ZF
	if $U1:1 jump 0xbb5a:8

0x27b60  ENDBR64
0x27b64  XOR EAX,EAX
0x27b66  SYSCALL
<L0> (entry=0x27b60):
	instruction(0x27b60)
	instruction(0x27b64)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x27b66)
	RCX = 0x27b68:8
	$U1:1 = NT & 0x1:1
	$U2:8 = zext($U1:1)
	$U3:8 = 0x4000:8 * $U2:8
	$U4:1 = OF & 0x1:1
	$U5:8 = zext($U4:1)
	$U6:8 = 0x800:8 * $U5:8
	$U7:8 = $U3:8 | $U6:8
	$U8:1 = DF & 0x1:1
	$U9:8 = zext($U8:1)
	$U10:8 = 0x400:8 * $U9:8
	$U11:8 = $U7:8 | $U10:8
	$U12:1 = IF & 0x1:1
	$U13:8 = zext($U12:1)
	$U14:8 = 0x200:8 * $U13:8
	$U15:8 = $U11:8 | $U14:8
	$U16:1 = TF & 0x1:1
	$U17:8 = zext($U16:1)
	$U18:8 = 0x100:8 * $U17:8
	$U19:8 = $U15:8 | $U18:8
	$U20:1 = SF & 0x1:1
	$U21:8 = zext($U20:1)
	$U22:8 = 0x80:8 * $U21:8
	$U23:8 = $U19:8 | $U22:8
	$U24:1 = ZF & 0x1:1
	$U25:8 = zext($U24:1)
	$U26:8 = 0x40:8 * $U25:8
	$U27:8 = $U23:8 | $U26:8
	$U28:1 = AF & 0x1:1
	$U29:8 = zext($U28:1)
	$U30:8 = 0x10:8 * $U29:8
	$U31:8 = $U27:8 | $U30:8
	$U32:1 = PF & 0x1:1
	$U33:8 = zext($U32:1)
	$U34:8 = 0x4:8 * $U33:8
	$U35:8 = $U31:8 | $U34:8
	$U36:1 = CF & 0x1:1
	$U37:8 = zext($U36:1)
	$U38:8 = 0x1:8 * $U37:8
	R11 = $U35:8 | $U38:8
	NEXT_PC = 0x27b68:8
	exception(0x101:4, 0x0:4)

0x27b9e  CMP RAX,-0x1000
0x27ba4  JA 0x27bb0
<L0> (entry=0x27b9e):
	instruction(0x27b9e)
	CF = RAX < 0xfffffffffffff000:8
	OF = RAX sborrow 0xfffffffffffff000:8
	$U1:8 = RAX - 0xfffffffffffff000:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x27ba4)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x27bb0:8

0x7a50  MOV RDI,R9
0x7a53  CALL qword ptr [0x3aa68]
<L0> (entry=0x7a50):
	instruction(0x7a50)
	RDI = R9
	instruction(0x7a53)
	$U1:8 = ram[0x3aa68:8]
	$U2:8 = 0x7a59:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U2:8
	call $U1:8

0x1059c  MOV RBX,RDX
0x1059f  MOVZX EAX,byte ptr [RBX]
0x105a2  TEST AL,AL
0x105a4  JNZ 0x10520
<L0> (entry=0x1059c):
	instruction(0x1059c)
	RBX = RDX
	instruction(0x1059f)
	$U1:1 = ram[RBX]
	EAX = zext($U1:1)
	RAX = zext(EAX)
	instruction(0x105a2)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = AL & AL
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x105a4)
	$U1:1 = !ZF
	if $U1:1 jump 0x10520:8

0x22338  NOP dword ptr [RAX + RAX*0x1]
0x22340  MOV RDX,qword ptr [RAX]
0x22343  ADD RDX,R12
0x22346  CMP dword ptr [RAX + 0x8],0x8
0x2234a  JNZ 0x22641
<L0> (entry=0x22338):
	instruction(0x22338)
	$U2:8 = RAX * 0x1:8
	$U1:8 = RAX + $U2:8
	instruction(0x22340)
	RDX = ram[RAX]
	instruction(0x22343)
	CF = RDX carry R12
	OF = RDX scarry R12
	RDX = RDX + R12
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x22346)
	$U5:8 = RAX + 0x8:8
	$U6:4 = ram[$U5:8]
	CF = $U6:4 < 0x8:4
	$U7:4 = ram[$U5:8]
	OF = $U7:4 sborrow 0x8:4
	$U8:4 = ram[$U5:8]
	$U1:4 = $U8:4 - 0x8:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2234a)
	$U1:1 = !ZF
	if $U1:1 jump 0x22641:8

0x9ac5  MOV qword ptr [RBX + 0x330],-0x1
0x9ad0  JMP 0x9946
<L0> (entry=0x9ac5):
	instruction(0x9ac5)
	$U1:8 = RBX + 0x330:8
	$U2:8 = 0xffffffffffffffff:8
	ram[$U1:8] = $U2:8
	instruction(0x9ad0)
	jump 0x9946:8

0x84ee  OR qword ptr [RSP + RCX*0x1 + -0x8],0x0
0x84f4  JMP 0x7ff0
<L0> (entry=0x84ee):
	instruction(0x84ee)
	$U5:8 = 0xfffffffffffffff8:8 + RSP
	$U6:8 = RCX * 0x1:8
	$U4:8 = $U5:8 + $U6:8
	CF = 0x0:1
	OF = 0x0:1
	$U7:8 = ram[$U4:8]
	$U8:8 = $U7:8 | 0x0:8
	ram[$U4:8] = $U8:8
	$U9:8 = ram[$U4:8]
	SF = $U9:8 s< 0x0:8
	$U10:8 = ram[$U4:8]
	ZF = $U10:8 == 0x0:8
	$U11:8 = ram[$U4:8]
	$U1:8 = $U11:8 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x84f4)
	jump 0x7ff0:8

0x26aca  TEST RBX,RBX
0x26acd  JZ 0x26aea
<L0> (entry=0x26aca):
	instruction(0x26aca)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RBX & RBX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x26acd)
	if ZF jump 0x26aea:8

0x1e546  LEA RAX,[0x30c70]
0x1e54d  MOV qword ptr [RBP + -0x48],0x0
0x1e555  MOV R14,qword ptr [RBP + -0x70]
0x1e559  MOV qword ptr [RBP + -0x50],RAX
0x1e55d  MOV EAX,dword ptr [RBP + -0x8c]
0x1e563  MOV dword ptr [RBP + -0x38],EAX
0x1e566  MOV RAX,qword ptr [RBP + -0x98]
0x1e56d  MOV qword ptr [RBP + -0x40],RAX
0x1e571  JMP 0x1e58a
<L0> (entry=0x1e546):
	instruction(0x1e546)
	RAX = 0x30c70:8
	instruction(0x1e54d)
	$U1:8 = RBP + 0xffffffffffffffb8:8
	$U2:8 = 0x0:8
	ram[$U1:8] = $U2:8
	instruction(0x1e555)
	$U1:8 = RBP + 0xffffffffffffff90:8
	R14 = ram[$U1:8]
	instruction(0x1e559)
	$U1:8 = RBP + 0xffffffffffffffb0:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1e55d)
	$U1:8 = RBP + 0xffffffffffffff74:8
	EAX = ram[$U1:8]
	RAX = zext(EAX)
	instruction(0x1e563)
	$U1:8 = RBP + 0xffffffffffffffc8:8
	$U2:4 = EAX
	ram[$U1:8] = $U2:4
	instruction(0x1e566)
	$U1:8 = RBP + 0xffffffffffffff68:8
	RAX = ram[$U1:8]
	instruction(0x1e56d)
	$U1:8 = RBP + 0xffffffffffffffc0:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1e571)
	jump 0x1e58a:8

0x2345a  MOVZX ECX,byte ptr [R15 + 0x321]
0x23462  TEST CL,0x3
0x23465  JNZ 0x233af
<L0> (entry=0x2345a):
	instruction(0x2345a)
	$U1:8 = R15 + 0x321:8
	$U2:1 = ram[$U1:8]
	ECX = zext($U2:1)
	RCX = zext(ECX)
	instruction(0x23462)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = CL & 0x3:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23465)
	$U1:1 = !ZF
	if $U1:1 jump 0x233af:8

0xb667  CMP qword ptr [R12 + 0x128],0x0
0xb670  JZ 0xb7e5
<L0> (entry=0xb667):
	instruction(0xb667)
	$U5:8 = 0x128:8 + R12
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x0:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x0:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb670)
	if ZF jump 0xb7e5:8

0x7b9b  AND ESI,0xfff
0x7ba1  SUB RSP,RSI
0x7ba4  TEST RSI,RSI
0x7ba7  JNZ 0x7ed0
<L0> (entry=0x7b9b):
	instruction(0x7b9b)
	CF = 0x0:1
	OF = 0x0:1
	ESI = ESI & 0xfff:4
	RSI = zext(ESI)
	SF = ESI s< 0x0:4
	ZF = ESI == 0x0:4
	$U1:4 = ESI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7ba1)
	CF = RSP < RSI
	OF = RSP sborrow RSI
	RSP = RSP - RSI
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7ba4)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RSI & RSI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7ba7)
	$U1:1 = !ZF
	if $U1:1 jump 0x7ed0:8

0x22428  ADD R8,0x20
0x2242c  CMP R8,R10
0x2242f  JZ 0x22510
<L0> (entry=0x22428):
	instruction(0x22428)
	CF = R8 carry 0x20:8
	OF = R8 scarry 0x20:8
	R8 = R8 + 0x20:8
	SF = R8 s< 0x0:8
	ZF = R8 == 0x0:8
	$U1:8 = R8 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2242c)
	CF = R8 < R10
	OF = R8 sborrow R10
	$U1:8 = R8 - R10
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2242f)
	if ZF jump 0x22510:8

0x1056a  MOV RSI,RDX
0x1056d  MOVSXD RCX,R12D
0x10570  SUB RSI,RBX
0x10573  SHL RCX,0x4
0x10577  MOV qword ptr [RBP + RCX*0x1 + -0x428],RSI
0x1057f  TEST RSI,RSI
0x10582  JZ 0x10590
<L0> (entry=0x1056a):
	instruction(0x1056a)
	RSI = RDX
	instruction(0x1056d)
	RCX = sext(R12D)
	instruction(0x10570)
	CF = RSI < RBX
	OF = RSI sborrow RBX
	RSI = RSI - RBX
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x10573)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RCX
	RCX = RCX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RCX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RCX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RCX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RCX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x10577)
	$U2:8 = 0xfffffffffffffbd8:8 + RBP
	$U3:8 = RCX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	$U4:8 = RSI
	ram[$U1:8] = $U4:8
	instruction(0x1057f)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RSI & RSI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x10582)
	if ZF jump 0x10590:8

0x7aea  MOV R11,0x1000000004
0x7af4  MOV RBX,R8
0x7af7  XOR R9D,R9D
0x7afa  MOV R10,0x554e4700000001
0x7b04  JMP 0x7b2c
<L0> (entry=0x7aea):
	instruction(0x7aea)
	R11 = 0x1000000004:8
	instruction(0x7af4)
	RBX = R8
	instruction(0x7af7)
	CF = 0x0:1
	OF = 0x0:1
	R9D = R9D ^ R9D
	R9 = zext(R9D)
	SF = R9D s< 0x0:4
	ZF = R9D == 0x0:4
	$U1:4 = R9D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7afa)
	R10 = 0x554e4700000001:8
	instruction(0x7b04)
	jump 0x7b2c:8

0x4a06  CMP qword ptr [R15 + 0x48],0x0
0x4a0b  JNZ 0x4af8
<L0> (entry=0x4a06):
	instruction(0x4a06)
	$U5:8 = R15 + 0x48:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x0:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x0:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x4a0b)
	$U1:1 = !ZF
	if $U1:1 jump 0x4af8:8

0xe4f0  ENDBR64
0xe4f4  MOV RAX,RDI
0xe4f7  MOV RCX,RDI
0xe4fa  MUL RSI
0xe4fd  MOV RDI,RAX
0xe500  SETO AL
0xe503  OR RCX,RSI
0xe506  SHR RCX,0x20
0xe50a  MOVZX EAX,AL
0xe50d  JZ 0xe514
<L0> (entry=0xe4f0):
	instruction(0xe4f0)
	instruction(0xe4f4)
	RAX = RDI
	instruction(0xe4f7)
	RCX = RDI
	instruction(0xe4fa)
	$U2:16 = zext(RAX)
	$U3:16 = zext(RSI)
	$U1:16 = $U2:16 * $U3:16
	RDX = $U1[8]:8
	RAX = $U1:8
	CF = RDX != 0x0:8
	OF = CF
	instruction(0xe4fd)
	RDI = RAX
	instruction(0xe500)
	AL = OF
	instruction(0xe503)
	CF = 0x0:1
	OF = 0x0:1
	RCX = RCX | RSI
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xe506)
	$U1:8 = 0x20:8 & 0x3f:8
	$U2:8 = RCX
	RCX = RCX >> $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 >> $U5:8
	$U7:8 = $U6:8 & 0x1:8
	$U4:1 = $U7:8 != 0x0:8
	$U8:1 = !$U3:1
	$U9:1 = $U8:1 && CF
	$U10:1 = $U3:1 && $U4:1
	CF = $U9:1 || $U10:1
	$U11:1 = $U1:8 == 0x1:8
	$U12:1 = $U2:8 s< 0x0:8
	$U13:1 = !$U11:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U11:1 && $U12:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RCX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RCX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RCX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0xe50a)
	EAX = zext(AL)
	RAX = zext(EAX)
	instruction(0xe50d)
	if ZF jump 0xe514:8

0x235e0  MOV RSI,qword ptr [0x3bb00]
0x235e7  MOV RCX,qword ptr [R15]
0x235ea  MOV byte ptr [RBP + -0x288],0x1
0x235f1  ADD RCX,qword ptr [RAX + 0x10]
0x235f5  MOV qword ptr [0x3bb28],R8
0x235fc  MOV qword ptr [R8],RCX
0x235ff  TEST RSI,RSI
0x23602  JNZ 0x23380
<L0> (entry=0x235e0):
	instruction(0x235e0)
	RSI = ram[0x3bb00:8]
	instruction(0x235e7)
	RCX = ram[R15]
	instruction(0x235ea)
	$U1:8 = RBP + 0xfffffffffffffd78:8
	$U2:1 = 0x1:1
	ram[$U1:8] = $U2:1
	instruction(0x235f1)
	$U4:8 = RAX + 0x10:8
	$U5:8 = ram[$U4:8]
	CF = RCX carry $U5:8
	$U6:8 = ram[$U4:8]
	OF = RCX scarry $U6:8
	$U7:8 = ram[$U4:8]
	RCX = RCX + $U7:8
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x235f5)
	$U1:8 = R8
	ram[0x3bb28:8] = $U1:8
	instruction(0x235fc)
	$U1:8 = RCX
	ram[R8] = $U1:8
	instruction(0x235ff)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RSI & RSI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23602)
	$U1:1 = !ZF
	if $U1:1 jump 0x23380:8

0x238be  MOV RAX,qword ptr [R15]
0x238c1  TEST RAX,RAX
0x238c4  JNZ 0x24c98
<L0> (entry=0x238be):
	instruction(0x238be)
	RAX = ram[R15]
	instruction(0x238c1)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x238c4)
	$U1:1 = !ZF
	if $U1:1 jump 0x24c98:8

0x234d2  MOV ESI,R8D
0x234d5  MOV R8D,dword ptr [RCX]
0x234d8  MOV EBX,dword ptr [RCX + 0x4]
0x234db  CMP R8D,ESI
0x234de  JC 0x233af
<L0> (entry=0x234d2):
	instruction(0x234d2)
	ESI = R8D
	RSI = zext(ESI)
	instruction(0x234d5)
	R8D = ram[RCX]
	R8 = zext(R8D)
	instruction(0x234d8)
	$U1:8 = RCX + 0x4:8
	EBX = ram[$U1:8]
	RBX = zext(EBX)
	instruction(0x234db)
	CF = R8D < ESI
	OF = R8D sborrow ESI
	$U1:4 = R8D - ESI
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x234de)
	if CF jump 0x233af:8

0x1e18c  MOV RDI,qword ptr [RBX]
0x1e18f  CALL 0x5aa0
<L0> (entry=0x1e18c):
	instruction(0x1e18c)
	RDI = ram[RBX]
	instruction(0x1e18f)
	$U1:8 = 0x1e194:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x5aa0:8

0x8e89  TEST RAX,RAX
0x8e8c  JNZ 0x8ea0
<L0> (entry=0x8e89):
	instruction(0x8e89)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x8e8c)
	$U1:1 = !ZF
	if $U1:1 jump 0x8ea0:8

0x282a3  LEA R9,[RAX + 0xf]
0x282a7  SUB R9,RCX
0x282aa  LEA R10,[0x2e418]
0x282b1  MOVSXD R9,dword ptr [R10 + R9*0x4]
0x282b5  LEA R10,[R10 + R9*0x1]
0x282b9  JMP R10
<L0> (entry=0x282a3):
	instruction(0x282a3)
	$U1:8 = RAX + 0xf:8
	R9 = $U1:8
	instruction(0x282a7)
	CF = R9 < RCX
	OF = R9 sborrow RCX
	R9 = R9 - RCX
	SF = R9 s< 0x0:8
	ZF = R9 == 0x0:8
	$U1:8 = R9 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x282aa)
	R10 = 0x2e418:8
	instruction(0x282b1)
	$U2:8 = R9 * 0x4:8
	$U1:8 = R10 + $U2:8
	$U3:4 = ram[$U1:8]
	R9 = sext($U3:4)
	instruction(0x282b5)
	$U2:8 = R9 * 0x1:8
	$U1:8 = R10 + $U2:8
	R10 = $U1:8
	instruction(0x282b9)
	jump R10

0x9746  MOV EDI,0x28
0x974b  MOV qword ptr [0x39ac0],RAX
0x9752  CALL qword ptr [0x3aa60]
<L0> (entry=0x9746):
	instruction(0x9746)
	RDI = 0x28:8
	instruction(0x974b)
	$U1:8 = RAX
	ram[0x39ac0:8] = $U1:8
	instruction(0x9752)
	$U1:8 = ram[0x3aa60:8]
	$U2:8 = 0x9758:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U2:8
	call $U1:8

0x23484  TEST DIL,0x7
0x23488  JNZ 0x233af
<L0> (entry=0x23484):
	instruction(0x23484)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = DIL & 0x7:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23488)
	$U1:1 = !ZF
	if $U1:1 jump 0x233af:8

0x1eaa7  CMP qword ptr [RBP + -0x80],0x1
0x1eaac  MOV qword ptr [RBX],R14
0x1eaaf  JZ 0x1ee83
<L0> (entry=0x1eaa7):
	instruction(0x1eaa7)
	$U5:8 = RBP + 0xffffffffffffff80:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x1:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x1:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x1:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1eaac)
	$U1:8 = R14
	ram[RBX] = $U1:8
	instruction(0x1eaaf)
	if ZF jump 0x1ee83:8

0x1b692  CMP EDX,0xc
0x1b695  JA 0x1b43a
<L0> (entry=0x1b692):
	instruction(0x1b692)
	CF = EDX < 0xc:4
	OF = EDX sborrow 0xc:4
	$U1:4 = EDX - 0xc:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1b695)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x1b43a:8

0xea60  LEA RDX,[RAX + R13*0x1]
0xea64  MOVZX EAX,byte ptr [R14 + 0x31c]
0xea6c  MOVZX R12D,byte ptr [RSP + 0x10]
0xea72  MOV qword ptr [R14 + 0x8],RDX
0xea76  AND R12D,0x3
0xea7a  AND EAX,0xfffffffc
0xea7d  OR R12D,EAX
0xea80  MOV byte ptr [R14 + 0x31c],R12B
0xea87  TEST byte ptr [0x3aae1],0x1
0xea8e  JZ 0xec50
<L0> (entry=0xea60):
	instruction(0xea60)
	$U2:8 = R13 * 0x1:8
	$U1:8 = RAX + $U2:8
	RDX = $U1:8
	instruction(0xea64)
	$U1:8 = R14 + 0x31c:8
	$U2:1 = ram[$U1:8]
	EAX = zext($U2:1)
	RAX = zext(EAX)
	instruction(0xea6c)
	$U1:8 = 0x10:8 + RSP
	$U2:1 = ram[$U1:8]
	R12D = zext($U2:1)
	R12 = zext(R12D)
	instruction(0xea72)
	$U1:8 = R14 + 0x8:8
	$U2:8 = RDX
	ram[$U1:8] = $U2:8
	instruction(0xea76)
	CF = 0x0:1
	OF = 0x0:1
	R12D = R12D & 0x3:4
	R12 = zext(R12D)
	SF = R12D s< 0x0:4
	ZF = R12D == 0x0:4
	$U1:4 = R12D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xea7a)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX & 0xfffffffc:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xea7d)
	CF = 0x0:1
	OF = 0x0:1
	R12D = R12D | EAX
	R12 = zext(R12D)
	SF = R12D s< 0x0:4
	ZF = R12D == 0x0:4
	$U1:4 = R12D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xea80)
	$U1:8 = R14 + 0x31c:8
	$U2:1 = R12B
	ram[$U1:8] = $U2:1
	instruction(0xea87)
	CF = 0x0:1
	OF = 0x0:1
	$U5:1 = ram[0x3aae1:8]
	$U1:1 = $U5:1 & 0x1:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xea8e)
	if ZF jump 0xec50:8

0x2bac2  BSF RAX,RDX
0x2bac6  RET
<L0> (entry=0x2bac2):
	instruction(0x2bac2)
	$tmp0:8 = 0x0:8
	ZF = RDX == 0x0:8
	$U2:1 = ZF == 0x1:1
	if $U2:1 jump <L333>
<L1>:
	$U3:8 = RDX >> $tmp0:8
	$U4:8 = $U3:8 & 0x1:8
	$U5:1 = $U4:8 != 0x0:8
	if $U5:1 jump <L333>
<L2>:
	$tmp0:8 = $tmp0:8 + 0x1:8
	jump <L331>
<L3>:
	RAX = $tmp0:8
	instruction(0x2bac6)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x1e798  MOV RAX,RDX
0x1e79b  MOV R12,RSI
0x1e79e  SHR RAX,CL
0x1e7a1  AND EAX,0x1
0x1e7a4  CMP RAX,0x1
0x1e7a8  SBB RDI,-0x1
0x1e7ac  ADD RCX,0x1
0x1e7b0  SHL R12,CL
0x1e7b3  NEG R12
0x1e7b6  AND R12,RDX
0x1e7b9  JNZ 0x1e798
<L0> (entry=0x1e798):
	instruction(0x1e798)
	RAX = RDX
	instruction(0x1e79b)
	R12 = RSI
	instruction(0x1e79e)
	$U1:1 = CL & 0x3f:1
	$U2:8 = RAX
	RAX = RAX >> $U1:1
	$U3:1 = $U1:1 != 0x0:1
	$U5:1 = $U1:1 - 0x1:1
	$U6:8 = $U2:8 >> $U5:1
	$U7:8 = $U6:8 & 0x1:8
	$U4:1 = $U7:8 != 0x0:8
	$U8:1 = !$U3:1
	$U9:1 = $U8:1 && CF
	$U10:1 = $U3:1 && $U4:1
	CF = $U9:1 || $U10:1
	$U11:1 = $U1:1 == 0x1:1
	$U12:1 = $U2:8 s< 0x0:8
	$U13:1 = !$U11:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U11:1 && $U12:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:1 != 0x0:1
	$U17:1 = RAX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RAX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RAX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1e7a1)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX & 0x1:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e7a4)
	CF = RAX < 0x1:8
	OF = RAX sborrow 0x1:8
	$U1:8 = RAX - 0x1:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e7a8)
	$U1:8 = zext(CF)
	CF = RDI < 0xffffffffffffffff:8
	OF = RDI sborrow 0xffffffffffffffff:8
	$U2:8 = RDI - 0xffffffffffffffff:8
	$U3:1 = $U2:8 < $U1:8
	CF = CF || $U3:1
	$U4:1 = $U2:8 sborrow $U1:8
	OF = OF ^^ $U4:1
	RDI = $U2:8 - $U1:8
	SF = RDI s< 0x0:8
	ZF = RDI == 0x0:8
	$U5:8 = RDI & 0xff:8
	$U6:1 = count_ones($U5:8)
	$U7:1 = $U6:1 & 0x1:1
	PF = $U7:1 == 0x0:1
	instruction(0x1e7ac)
	CF = RCX carry 0x1:8
	OF = RCX scarry 0x1:8
	RCX = RCX + 0x1:8
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e7b0)
	$U1:1 = CL & 0x3f:1
	$U2:8 = R12
	R12 = R12 << $U1:1
	$U3:1 = $U1:1 != 0x0:1
	$U5:1 = $U1:1 - 0x1:1
	$U6:8 = $U2:8 << $U5:1
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:1 == 0x1:1
	$U12:1 = R12 s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:1 != 0x0:1
	$U17:1 = R12 s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = R12 == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = R12 & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1e7b3)
	CF = R12 != 0x0:8
	OF = 0x0:8 sborrow R12
	R12 = -R12
	SF = R12 s< 0x0:8
	ZF = R12 == 0x0:8
	$U1:8 = R12 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e7b6)
	CF = 0x0:1
	OF = 0x0:1
	R12 = R12 & RDX
	SF = R12 s< 0x0:8
	ZF = R12 == 0x0:8
	$U1:8 = R12 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e7b9)
	$U1:1 = !ZF
	if $U1:1 jump 0x1e798:8

0x4380  CMP qword ptr [R8 + 0x10],0x0
0x4385  JNZ 0x43a9
<L0> (entry=0x4380):
	instruction(0x4380)
	$U5:8 = R8 + 0x10:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x0:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x0:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x4385)
	$U1:1 = !ZF
	if $U1:1 jump 0x43a9:8

0x278f0  NEG EAX
0x278f2  MOV dword ptr [0x3c2a0],EAX
0x278f8  MOV EAX,0xffffffff
0x278fd  RET
<L0> (entry=0x278f0):
	instruction(0x278f0)
	CF = EAX != 0x0:4
	OF = 0x0:4 sborrow EAX
	EAX = -EAX
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	RAX = zext(EAX)
	instruction(0x278f2)
	$U1:4 = EAX
	ram[0x3c2a0:8] = $U1:4
	instruction(0x278f8)
	RAX = 0xffffffff:8
	instruction(0x278fd)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x17c75  MOV qword ptr [0x3c208],-0x1
0x17c80  JMP 0x1785a
<L0> (entry=0x17c75):
	instruction(0x17c75)
	$U1:8 = 0xffffffffffffffff:8
	ram[0x3c208:8] = $U1:8
	instruction(0x17c80)
	jump 0x1785a:8

0x8245  MOV RBX,RDX
0x8248  JMP 0x8091
<L0> (entry=0x8245):
	instruction(0x8245)
	RBX = RDX
	instruction(0x8248)
	jump 0x8091:8

0x22307  MOV RSI,qword ptr [0x3bb60]
0x2230e  MOV RAX,qword ptr [R8]
0x22311  MOV RCX,qword ptr [R8 + 0x10]
0x22315  MOV RDI,qword ptr [R8 + 0x8]
0x22319  MOV RSI,qword ptr [RSI + 0x8]
0x2231d  ADD RDI,RAX
0x22320  AND EDX,0x20
0x22323  LEA RDX,[RCX + RCX*0x2]
0x22327  LEA R11,[RSI + R12*0x1]
0x2232b  LEA RBX,[RAX + RDX*0x8]
0x2232f  CMOVNZ RSI,R11
0x22333  CMP RAX,RBX
0x22336  JNC 0x22363
<L0> (entry=0x22307):
	instruction(0x22307)
	RSI = ram[0x3bb60:8]
	instruction(0x2230e)
	RAX = ram[R8]
	instruction(0x22311)
	$U1:8 = R8 + 0x10:8
	RCX = ram[$U1:8]
	instruction(0x22315)
	$U1:8 = R8 + 0x8:8
	RDI = ram[$U1:8]
	instruction(0x22319)
	$U1:8 = RSI + 0x8:8
	RSI = ram[$U1:8]
	instruction(0x2231d)
	CF = RDI carry RAX
	OF = RDI scarry RAX
	RDI = RDI + RAX
	SF = RDI s< 0x0:8
	ZF = RDI == 0x0:8
	$U1:8 = RDI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x22320)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX & 0x20:4
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x22323)
	$U2:8 = RCX * 0x2:8
	$U1:8 = RCX + $U2:8
	RDX = $U1:8
	instruction(0x22327)
	$U2:8 = R12 * 0x1:8
	$U1:8 = RSI + $U2:8
	R11 = $U1:8
	instruction(0x2232b)
	$U2:8 = RDX * 0x8:8
	$U1:8 = RAX + $U2:8
	RBX = $U1:8
	instruction(0x2232f)
	$U3:1 = !ZF
	$U1:8 = R11
	$U2:1 = !$U3:1
	if $U2:1 jump <L61>
<L1>:
	RSI = $U1:8
<L2>:
	instruction(0x22333)
	CF = RAX < RBX
	OF = RAX sborrow RBX
	$U1:8 = RAX - RBX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x22336)
	$U1:1 = !CF
	if $U1:1 jump 0x22363:8

0x818e  MOV RDX,qword ptr [RBP + -0xd0]
0x8195  MOV RSI,R14
0x8198  MOV RDI,RAX
0x819b  MOV dword ptr [RBP + -0xc8],R8D
0x81a2  CALL 0x2bfb0
<L0> (entry=0x818e):
	instruction(0x818e)
	$U1:8 = RBP + 0xffffffffffffff30:8
	RDX = ram[$U1:8]
	instruction(0x8195)
	RSI = R14
	instruction(0x8198)
	RDI = RAX
	instruction(0x819b)
	$U1:8 = RBP + 0xffffffffffffff38:8
	$U2:4 = R8D
	ram[$U1:8] = $U2:4
	instruction(0x81a2)
	$U1:8 = 0x81a7:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2bfb0:8

0x1e53a  MOV RDI,R14
0x1e53d  CALL 0x1f220
<L0> (entry=0x1e53a):
	instruction(0x1e53a)
	RDI = R14
	instruction(0x1e53d)
	$U1:8 = 0x1e542:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x1f220:8

0x1e62a  LEA RAX,[0x30c70]
0x1e631  MOV qword ptr [RBP + -0x48],0x0
0x1e639  MOV R12,qword ptr [RBP + -0x70]
0x1e63d  MOV qword ptr [RBP + -0x50],RAX
0x1e641  MOV EAX,dword ptr [RBP + -0x8c]
0x1e647  MOV dword ptr [RBP + -0x38],EAX
0x1e64a  MOV RAX,qword ptr [RBP + -0x98]
0x1e651  MOV qword ptr [RBP + -0x40],RAX
0x1e655  JMP 0x1e68e
<L0> (entry=0x1e62a):
	instruction(0x1e62a)
	RAX = 0x30c70:8
	instruction(0x1e631)
	$U1:8 = RBP + 0xffffffffffffffb8:8
	$U2:8 = 0x0:8
	ram[$U1:8] = $U2:8
	instruction(0x1e639)
	$U1:8 = RBP + 0xffffffffffffff90:8
	R12 = ram[$U1:8]
	instruction(0x1e63d)
	$U1:8 = RBP + 0xffffffffffffffb0:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1e641)
	$U1:8 = RBP + 0xffffffffffffff74:8
	EAX = ram[$U1:8]
	RAX = zext(EAX)
	instruction(0x1e647)
	$U1:8 = RBP + 0xffffffffffffffc8:8
	$U2:4 = EAX
	ram[$U1:8] = $U2:4
	instruction(0x1e64a)
	$U1:8 = RBP + 0xffffffffffffff68:8
	RAX = ram[$U1:8]
	instruction(0x1e651)
	$U1:8 = RBP + 0xffffffffffffffc0:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1e655)
	jump 0x1e68e:8

0x43c6  MOV RAX,R8
0x43c9  RET
<L0> (entry=0x43c6):
	instruction(0x43c6)
	RAX = R8
	instruction(0x43c9)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x24226  TEST RAX,RAX
0x24229  JZ 0x24265
<L0> (entry=0x24226):
	instruction(0x24226)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x24229)
	if ZF jump 0x24265:8

0x28235  CMP EAX,0x30
0x28238  JA 0x28280
<L0> (entry=0x28235):
	instruction(0x28235)
	CF = EAX < 0x30:4
	OF = EAX sborrow 0x30:4
	$U1:4 = EAX - 0x30:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x28238)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x28280:8

0x8279  MOV RAX,qword ptr [RBP + -0xd0]
0x8280  SUB RAX,qword ptr [RBP + -0xd8]
0x8287  MOV RDI,R14
0x828a  MOV byte ptr [R14 + RAX*0x1 + -0x1],0x0
0x8290  MOV RSI,qword ptr [RBP + -0x100]
0x8297  CALL 0x27860
<L0> (entry=0x8279):
	instruction(0x8279)
	$U1:8 = RBP + 0xffffffffffffff30:8
	RAX = ram[$U1:8]
	instruction(0x8280)
	$U4:8 = RBP + 0xffffffffffffff28:8
	$U5:8 = ram[$U4:8]
	CF = RAX < $U5:8
	$U6:8 = ram[$U4:8]
	OF = RAX sborrow $U6:8
	$U7:8 = ram[$U4:8]
	RAX = RAX - $U7:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x8287)
	RDI = R14
	instruction(0x828a)
	$U2:8 = 0xffffffffffffffff:8 + R14
	$U3:8 = RAX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	$U4:1 = 0x0:1
	ram[$U1:8] = $U4:1
	instruction(0x8290)
	$U1:8 = RBP + 0xffffffffffffff00:8
	RSI = ram[$U1:8]
	instruction(0x8297)
	$U1:8 = 0x829c:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x27860:8

0x27f50  ENDBR64
0x27f54  MOV R8,qword ptr [RDI + 0x30]
0x27f58  MOV R9,qword ptr [RDI + 0x8]
0x27f5c  MOV RDX,qword ptr [RDI + 0x38]
0x27f60  ROR R8,0x11
0x27f64  XOR R8,qword ptr [0x3aab0]
0x27f6b  ROR R9,0x11
0x27f6f  XOR R9,qword ptr [0x3aab0]
0x27f76  ROR RDX,0x11
0x27f7a  XOR RDX,qword ptr [0x3aab0]
0x27f81  XOR EAX,EAX
0x27f83  RDSSPD EAX
0x27f88  SUB RAX,qword ptr [RDI + 0x58]
0x27f8c  JZ 0x27faf
<L0> (entry=0x27f50):
	instruction(0x27f50)
	instruction(0x27f54)
	$U1:8 = RDI + 0x30:8
	R8 = ram[$U1:8]
	instruction(0x27f58)
	$U1:8 = RDI + 0x8:8
	R9 = ram[$U1:8]
	instruction(0x27f5c)
	$U1:8 = RDI + 0x38:8
	RDX = ram[$U1:8]
	instruction(0x27f60)
	$U1:8 = 0x11:8 & 0x3f:8
	$U2:8 = R8 >> $U1:8
	$U3:8 = 0x40:8 - $U1:8
	$U4:8 = R8 << $U3:8
	R8 = $U2:8 | $U4:8
	$U5:1 = $U1:8 != 0x0:8
	$U6:1 = R8 s< 0x0:8
	$U7:1 = !$U5:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U5:1 && $U6:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = R8 s< 0x0:8
	$U13:8 = R8 << 0x1:8
	$U14:1 = $U13:8 s< 0x0:8
	$U11:1 = $U12:1 ^^ $U14:1
	$U15:1 = !$U10:1
	$U16:1 = $U15:1 && OF
	$U17:1 = $U10:1 && $U11:1
	OF = $U16:1 || $U17:1
	instruction(0x27f64)
	CF = 0x0:1
	OF = 0x0:1
	$U4:8 = ram[0x3aab0:8]
	R8 = R8 ^ $U4:8
	SF = R8 s< 0x0:8
	ZF = R8 == 0x0:8
	$U1:8 = R8 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x27f6b)
	$U1:8 = 0x11:8 & 0x3f:8
	$U2:8 = R9 >> $U1:8
	$U3:8 = 0x40:8 - $U1:8
	$U4:8 = R9 << $U3:8
	R9 = $U2:8 | $U4:8
	$U5:1 = $U1:8 != 0x0:8
	$U6:1 = R9 s< 0x0:8
	$U7:1 = !$U5:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U5:1 && $U6:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = R9 s< 0x0:8
	$U13:8 = R9 << 0x1:8
	$U14:1 = $U13:8 s< 0x0:8
	$U11:1 = $U12:1 ^^ $U14:1
	$U15:1 = !$U10:1
	$U16:1 = $U15:1 && OF
	$U17:1 = $U10:1 && $U11:1
	OF = $U16:1 || $U17:1
	instruction(0x27f6f)
	CF = 0x0:1
	OF = 0x0:1
	$U4:8 = ram[0x3aab0:8]
	R9 = R9 ^ $U4:8
	SF = R9 s< 0x0:8
	ZF = R9 == 0x0:8
	$U1:8 = R9 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x27f76)
	$U1:8 = 0x11:8 & 0x3f:8
	$U2:8 = RDX >> $U1:8
	$U3:8 = 0x40:8 - $U1:8
	$U4:8 = RDX << $U3:8
	RDX = $U2:8 | $U4:8
	$U5:1 = $U1:8 != 0x0:8
	$U6:1 = RDX s< 0x0:8
	$U7:1 = !$U5:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U5:1 && $U6:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RDX s< 0x0:8
	$U13:8 = RDX << 0x1:8
	$U14:1 = $U13:8 s< 0x0:8
	$U11:1 = $U12:1 ^^ $U14:1
	$U15:1 = !$U10:1
	$U16:1 = $U15:1 && OF
	$U17:1 = $U10:1 && $U11:1
	OF = $U16:1 || $U17:1
	instruction(0x27f7a)
	CF = 0x0:1
	OF = 0x0:1
	$U4:8 = ram[0x3aab0:8]
	RDX = RDX ^ $U4:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x27f81)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x27f83)
	EAX = SSP:4
	instruction(0x27f88)
	$U4:8 = RDI + 0x58:8
	$U5:8 = ram[$U4:8]
	CF = RAX < $U5:8
	$U6:8 = ram[$U4:8]
	OF = RAX sborrow $U6:8
	$U7:8 = ram[$U4:8]
	RAX = RAX - $U7:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x27f8c)
	if ZF jump 0x27faf:8

0xea94  MOV EAX,dword ptr [RSP + 0x8]
0xea98  MOV qword ptr [R14 + 0x2e0],R15
0xea9f  MOV qword ptr [R14 + 0x30],RBX
0xeaa3  TEST EAX,EAX
0xeaa5  JZ 0xeae4
<L0> (entry=0xea94):
	instruction(0xea94)
	$U1:8 = 0x8:8 + RSP
	EAX = ram[$U1:8]
	RAX = zext(EAX)
	instruction(0xea98)
	$U1:8 = R14 + 0x2e0:8
	$U2:8 = R15
	ram[$U1:8] = $U2:8
	instruction(0xea9f)
	$U1:8 = R14 + 0x30:8
	$U2:8 = RBX
	ram[$U1:8] = $U2:8
	instruction(0xeaa3)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xeaa5)
	if ZF jump 0xeae4:8

0x14a31  AND EDX,0xfff
0x14a37  SUB RSP,RDX
0x14a3a  TEST RDX,RDX
0x14a3d  JZ 0x14a45
<L0> (entry=0x14a31):
	instruction(0x14a31)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX & 0xfff:4
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x14a37)
	CF = RSP < RDX
	OF = RSP sborrow RDX
	RSP = RSP - RDX
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x14a3a)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RDX & RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x14a3d)
	if ZF jump 0x14a45:8

0x106f0  ADD RBX,0x1
0x106f4  JMP 0x1059f
<L0> (entry=0x106f0):
	instruction(0x106f0)
	CF = RBX carry 0x1:8
	OF = RBX scarry 0x1:8
	RBX = RBX + 0x1:8
	SF = RBX s< 0x0:8
	ZF = RBX == 0x0:8
	$U1:8 = RBX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x106f4)
	jump 0x1059f:8

0x14b7e  MOV RDX,R9
0x14b81  MOV RSI,R14
0x14b84  MOV RDI,R8
0x14b87  CALL 0x2bfb0
<L0> (entry=0x14b7e):
	instruction(0x14b7e)
	RDX = R9
	instruction(0x14b81)
	RSI = R14
	instruction(0x14b84)
	RDI = R8
	instruction(0x14b87)
	$U1:8 = 0x14b8c:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2bfb0:8

0x24177  CMP qword ptr [R15],0x1
0x2417b  SBB RAX,RAX
0x2417e  MOV qword ptr [0x3ad80],RAX
0x24185  CMP word ptr [0x1034],0x40
0x2418d  JNZ 0x26662
<L0> (entry=0x24177):
	instruction(0x24177)
	$U5:8 = ram[R15]
	CF = $U5:8 < 0x1:8
	$U6:8 = ram[R15]
	OF = $U6:8 sborrow 0x1:8
	$U7:8 = ram[R15]
	$U1:8 = $U7:8 - 0x1:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2417b)
	$U1:8 = zext(CF)
	CF = RAX < RAX
	OF = RAX sborrow RAX
	$U2:8 = RAX - RAX
	$U3:1 = $U2:8 < $U1:8
	CF = CF || $U3:1
	$U4:1 = $U2:8 sborrow $U1:8
	OF = OF ^^ $U4:1
	RAX = $U2:8 - $U1:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U5:8 = RAX & 0xff:8
	$U6:1 = count_ones($U5:8)
	$U7:1 = $U6:1 & 0x1:1
	PF = $U7:1 == 0x0:1
	instruction(0x2417e)
	$U1:8 = RAX
	ram[0x3ad80:8] = $U1:8
	instruction(0x24185)
	$U5:2 = ram[0x1034:8]
	CF = $U5:2 < 0x40:2
	$U6:2 = ram[0x1034:8]
	OF = $U6:2 sborrow 0x40:2
	$U7:2 = ram[0x1034:8]
	$U1:2 = $U7:2 - 0x40:2
	SF = $U1:2 s< 0x0:2
	ZF = $U1:2 == 0x0:2
	$U2:2 = $U1:2 & 0xff:2
	$U3:1 = count_ones($U2:2)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2418d)
	$U1:1 = !ZF
	if $U1:1 jump 0x26662:8

0xb56c  TEST RAX,RAX
0xb56f  JZ 0xb640
<L0> (entry=0xb56c):
	instruction(0xb56c)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb56f)
	if ZF jump 0xb640:8

0x1a9db  MOV RAX,qword ptr [RSP + 0xb0]
0x1a9e3  MOV RCX,qword ptr [RSP + 0x30]
0x1a9e8  MOV RSI,R14
0x1a9eb  MOV EDI,0x10
0x1a9f0  TEST RAX,RAX
0x1a9f3  CMOVNZ RCX,RAX
0x1a9f7  XOR EDX,EDX
0x1a9f9  MOV qword ptr [RSP + 0x30],RCX
0x1a9fe  CALL 0x18d70
<L0> (entry=0x1a9db):
	instruction(0x1a9db)
	$U1:8 = 0xb0:8 + RSP
	RAX = ram[$U1:8]
	instruction(0x1a9e3)
	$U1:8 = 0x30:8 + RSP
	RCX = ram[$U1:8]
	instruction(0x1a9e8)
	RSI = R14
	instruction(0x1a9eb)
	RDI = 0x10:8
	instruction(0x1a9f0)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1a9f3)
	$U3:1 = !ZF
	$U1:8 = RAX
	$U2:1 = !$U3:1
	if $U2:1 jump <L293>
<L1>:
	RCX = $U1:8
<L2>:
	instruction(0x1a9f7)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX ^ EDX
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a9f9)
	$U1:8 = 0x30:8 + RSP
	$U2:8 = RCX
	ram[$U1:8] = $U2:8
	instruction(0x1a9fe)
	$U1:8 = 0x1aa03:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x18d70:8

0xa0da  TEST EAX,EAX
0xa0dc  JS 0xaec3
<L0> (entry=0xa0da):
	instruction(0xa0da)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xa0dc)
	if SF jump 0xaec3:8

0xaec3  MOV EAX,dword ptr [0x3c2a0]
0xaec9  MOV EDI,dword ptr [RBP + -0xd4]
0xaecf  LEA R12,[0x2edde]
0xaed6  XOR R15D,R15D
0xaed9  MOV dword ptr [RBP + -0xd8],EAX
0xaedf  CMP EDI,-0x1
0xaee2  JZ 0xa50d
<L0> (entry=0xaec3):
	instruction(0xaec3)
	EAX = ram[0x3c2a0:8]
	RAX = zext(EAX)
	instruction(0xaec9)
	$U1:8 = RBP + 0xffffffffffffff2c:8
	EDI = ram[$U1:8]
	RDI = zext(EDI)
	instruction(0xaecf)
	R12 = 0x2edde:8
	instruction(0xaed6)
	CF = 0x0:1
	OF = 0x0:1
	R15D = R15D ^ R15D
	R15 = zext(R15D)
	SF = R15D s< 0x0:4
	ZF = R15D == 0x0:4
	$U1:4 = R15D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xaed9)
	$U1:8 = RBP + 0xffffffffffffff28:8
	$U2:4 = EAX
	ram[$U1:8] = $U2:4
	instruction(0xaedf)
	CF = EDI < 0xffffffff:4
	OF = EDI sborrow 0xffffffff:4
	$U1:4 = EDI - 0xffffffff:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xaee2)
	if ZF jump 0xa50d:8

0x221ef  CMP qword ptr [0x3bc18],0x0
0x221f7  JNZ 0x2269e
<L0> (entry=0x221ef):
	instruction(0x221ef)
	$U5:8 = ram[0x3bc18:8]
	CF = $U5:8 < 0x0:8
	$U6:8 = ram[0x3bc18:8]
	OF = $U6:8 sborrow 0x0:8
	$U7:8 = ram[0x3bc18:8]
	$U1:8 = $U7:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x221f7)
	$U1:1 = !ZF
	if $U1:1 jump 0x2269e:8

0x246f0  MOVDQU XMM0, xmmword ptr [RCX + 0x10]
0x246f5  MOVDQU XMM1, xmmword ptr [RCX + 0x20]
0x246fa  CMP qword ptr [0x3bf30],0x0
0x24702  SHUFPD XMM0, XMM1, 0x2
0x24707  MOVAPS xmmword ptr [0x3bf60], XMM0
0x2470e  JZ 0x2420a
<L0> (entry=0x246f0):
	instruction(0x246f0)
	$U1:8 = RCX + 0x10:8
	XMM0 = ram[$U1:8]
	instruction(0x246f5)
	$U1:8 = RCX + 0x20:8
	XMM1 = ram[$U1:8]
	instruction(0x246fa)
	$U5:8 = ram[0x3bf30:8]
	CF = $U5:8 < 0x0:8
	$U6:8 = ram[0x3bf30:8]
	OF = $U6:8 sborrow 0x0:8
	$U7:8 = ram[0x3bf30:8]
	$U1:8 = $U7:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x24702)
	arg0 = 0x2:8
	XMM0 = shufpd(XMM0, XMM1)
	instruction(0x24707)
	$U1:16 = XMM0
	ram[0x3bf60:8] = $U1:16
	instruction(0x2470e)
	if ZF jump 0x2420a:8

0x22196  ADD qword ptr [RAX + 0x8],R12
0x2219a  MOV RAX,qword ptr [0x3bcc0]
0x221a1  TEST RAX,RAX
0x221a4  JZ 0x221aa
<L0> (entry=0x22196):
	instruction(0x22196)
	$U4:8 = RAX + 0x8:8
	$U5:8 = ram[$U4:8]
	CF = $U5:8 carry R12
	$U6:8 = ram[$U4:8]
	OF = $U6:8 scarry R12
	$U7:8 = ram[$U4:8]
	$U8:8 = $U7:8 + R12
	ram[$U4:8] = $U8:8
	$U9:8 = ram[$U4:8]
	SF = $U9:8 s< 0x0:8
	$U10:8 = ram[$U4:8]
	ZF = $U10:8 == 0x0:8
	$U11:8 = ram[$U4:8]
	$U1:8 = $U11:8 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2219a)
	RAX = ram[0x3bcc0:8]
	instruction(0x221a1)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x221a4)
	if ZF jump 0x221aa:8

0x1888c  MOV RCX,qword ptr [RSI]
0x1888f  TEST R11B,R11B
0x18892  JZ 0x188d0
<L0> (entry=0x1888c):
	instruction(0x1888c)
	RCX = ram[RSI]
	instruction(0x1888f)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = R11B & R11B
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x18892)
	if ZF jump 0x188d0:8

0x10653  MOVSXD RDX,R12D
0x10656  SHL RDX,0x4
0x1065a  MOV qword ptr [RBP + RDX*0x1 + -0x428],0x0
0x10666  MOV RDX,RBX
0x10669  CMP AL,0x25
0x1066b  JNZ 0x10598
<L0> (entry=0x10653):
	instruction(0x10653)
	RDX = sext(R12D)
	instruction(0x10656)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RDX
	RDX = RDX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RDX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RDX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RDX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RDX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1065a)
	$U2:8 = 0xfffffffffffffbd8:8 + RBP
	$U3:8 = RDX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	$U4:8 = 0x0:8
	ram[$U1:8] = $U4:8
	instruction(0x10666)
	RDX = RBX
	instruction(0x10669)
	CF = AL < 0x25:1
	OF = AL sborrow 0x25:1
	$U1:1 = AL - 0x25:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1066b)
	$U1:1 = !ZF
	if $U1:1 jump 0x10598:8

0x1ea1b  TEST AL,AL
0x1ea1d  JNZ 0x1e9d8
<L0> (entry=0x1ea1b):
	instruction(0x1ea1b)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = AL & AL
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1ea1d)
	$U1:1 = !ZF
	if $U1:1 jump 0x1e9d8:8

0x26a97  XOR EAX,EAX
0x26a99  RET
<L0> (entry=0x26a97):
	instruction(0x26a97)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x26a99)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x1ec8f  MOV R8,RAX
0x1ec92  MOV RDI,RSI
0x1ec95  NOP dword ptr [RAX]
0x1ec98  SUB RSI,0x1
0x1ec9c  TEST SIL,0x1
0x1eca0  JZ 0x1ed30
<L0> (entry=0x1ec8f):
	instruction(0x1ec8f)
	R8 = RAX
	instruction(0x1ec92)
	RDI = RSI
	instruction(0x1ec95)
	instruction(0x1ec98)
	CF = RSI < 0x1:8
	OF = RSI sborrow 0x1:8
	RSI = RSI - 0x1:8
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ec9c)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = SIL & 0x1:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1eca0)
	if ZF jump 0x1ed30:8

0x205c4  MOV EAX,dword ptr [RSP + 0x3c]
0x205c8  MOV dword ptr [0x3aa98],EAX
0x205ce  CMP byte ptr [RSP + 0x1c],0x0
0x205d3  JZ 0x205df
<L0> (entry=0x205c4):
	instruction(0x205c4)
	$U1:8 = 0x3c:8 + RSP
	EAX = ram[$U1:8]
	RAX = zext(EAX)
	instruction(0x205c8)
	$U1:4 = EAX
	ram[0x3aa98:8] = $U1:4
	instruction(0x205ce)
	$U5:8 = 0x1c:8 + RSP
	$U6:1 = ram[$U5:8]
	CF = $U6:1 < 0x0:1
	$U7:1 = ram[$U5:8]
	OF = $U7:1 sborrow 0x0:1
	$U8:1 = ram[$U5:8]
	$U1:1 = $U8:1 - 0x0:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x205d3)
	if ZF jump 0x205df:8

0xe40c  MOV RDX,RAX
0xe40f  NEG RDX
0xe412  CMP RDX,RBX
0xe415  JBE 0xe430
<L0> (entry=0xe40c):
	instruction(0xe40c)
	RDX = RAX
	instruction(0xe40f)
	CF = RDX != 0x0:8
	OF = 0x0:8 sborrow RDX
	RDX = -RDX
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xe412)
	CF = RDX < RBX
	OF = RDX sborrow RBX
	$U1:8 = RDX - RBX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xe415)
	$U1:1 = CF || ZF
	if $U1:1 jump 0xe430:8

0x9b6e  MOV R8,qword ptr [RDX + 0x28]
0x9b72  CMP R8,0xc
0x9b76  JBE 0x9bc6
<L0> (entry=0x9b6e):
	instruction(0x9b6e)
	$U1:8 = RDX + 0x28:8
	R8 = ram[$U1:8]
	instruction(0x9b72)
	CF = R8 < 0xc:8
	OF = R8 sborrow 0xc:8
	$U1:8 = R8 - 0xc:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x9b76)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x9bc6:8

0x2374b  MOV RAX,qword ptr [R15 + 0x430]
0x23752  MOV R14,qword ptr [RBP + -0x2a0]
0x23759  MOV RCX,qword ptr [R15 + 0x360]
0x23760  MOV RDX,qword ptr [R15 + 0x368]
0x23767  TEST RAX,RAX
0x2376a  JZ 0x23776
<L0> (entry=0x2374b):
	instruction(0x2374b)
	$U1:8 = R15 + 0x430:8
	RAX = ram[$U1:8]
	instruction(0x23752)
	$U1:8 = RBP + 0xfffffffffffffd60:8
	R14 = ram[$U1:8]
	instruction(0x23759)
	$U1:8 = R15 + 0x360:8
	RCX = ram[$U1:8]
	instruction(0x23760)
	$U1:8 = R15 + 0x368:8
	RDX = ram[$U1:8]
	instruction(0x23767)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2376a)
	if ZF jump 0x23776:8

0x3050  ENDBR64
0x3054  JMP qword ptr [0x3b018]
<L0> (entry=0x3050):
	instruction(0x3050)
	instruction(0x3054)
	$U1:8 = ram[0x3b018:8]
	jump $U1:8

0x2bfef  MOV CL,byte ptr [RSI]
0x2bff1  JZ 0x2bffd
<L0> (entry=0x2bfef):
	instruction(0x2bfef)
	CL = ram[RSI]
	instruction(0x2bff1)
	if ZF jump 0x2bffd:8

0x1eb72  MOV EDX,R12D
0x1eb75  MOV ECX,EBX
0x1eb77  SHL EDX,CL
0x1eb79  MOVSXD RDX,EDX
0x1eb7c  TEST RDX,R14
0x1eb7f  JZ 0x1eb68
<L0> (entry=0x1eb72):
	instruction(0x1eb72)
	EDX = R12D
	RDX = zext(EDX)
	instruction(0x1eb75)
	ECX = EBX
	RCX = zext(ECX)
	instruction(0x1eb77)
	$U1:1 = CL & 0x1f:1
	$U2:4 = EDX
	EDX = EDX << $U1:1
	RDX = zext(EDX)
	$U3:1 = $U1:1 != 0x0:1
	$U5:1 = $U1:1 - 0x1:1
	$U6:4 = $U2:4 << $U5:1
	$U4:1 = $U6:4 s< 0x0:4
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:1 == 0x1:1
	$U12:1 = EDX s< 0x0:4
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:1 != 0x0:1
	$U17:1 = EDX s< 0x0:4
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = EDX == 0x0:4
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:4 = EDX & 0xff:4
	$U27:1 = count_ones($U26:4)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1eb79)
	RDX = sext(EDX)
	instruction(0x1eb7c)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RDX & R14
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1eb7f)
	if ZF jump 0x1eb68:8

0x17738  MOV R13,qword ptr [0x3c208]
0x1773f  TEST R13,R13
0x17742  JZ 0x17ba0
<L0> (entry=0x17738):
	instruction(0x17738)
	R13 = ram[0x3c208:8]
	instruction(0x1773f)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R13 & R13
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x17742)
	if ZF jump 0x17ba0:8

0x7b3b  MOV RAX,qword ptr [RBX + 0x30]
0x7b3f  SUB RAX,0x4
0x7b43  TEST RAX,-0x5
0x7b49  JNZ 0x7b10
<L0> (entry=0x7b3b):
	instruction(0x7b3b)
	$U1:8 = RBX + 0x30:8
	RAX = ram[$U1:8]
	instruction(0x7b3f)
	CF = RAX < 0x4:8
	OF = RAX sborrow 0x4:8
	RAX = RAX - 0x4:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7b43)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & 0xfffffffffffffffb:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7b49)
	$U1:1 = !ZF
	if $U1:1 jump 0x7b10:8

0x5b2a  MOVQ XMM3, RBX
0x5b2f  MOVQ XMM0, RAX
0x5b34  MOV RAX,qword ptr [0x3b040]
0x5b3b  PUNPCKLQDQ XMM0, XMM3
0x5b3f  MOVUPS xmmword ptr [R12], XMM0
0x5b44  TEST RAX,RAX
0x5b47  JZ 0x5b90
<L0> (entry=0x5b2a):
	instruction(0x5b2a)
	XMM3 = zext(RBX)
	instruction(0x5b2f)
	XMM0 = zext(RAX)
	instruction(0x5b34)
	RAX = ram[0x3b040:8]
	instruction(0x5b3b)
	XMM0_Qb = XMM3_Qa
	instruction(0x5b3f)
	$U1:16 = XMM0
	ram[R12] = $U1:16
	instruction(0x5b44)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x5b47)
	if ZF jump 0x5b90:8

0xeae4  LEA RAX,[RBX + RBX*0x4]
0xeae8  LEA RDX,[0x3b040]
0xeaef  MOV qword ptr [R14 + 0x390],0x4
0xeafa  SHL RAX,0x5
0xeafe  LEA RSI,[R14 + 0x370]
0xeb05  MOV RAX,qword ptr [RDX + RAX*0x1]
0xeb09  MOV qword ptr [R14 + 0x398],RSI
0xeb10  TEST RAX,RAX
0xeb13  JZ 0xec80
<L0> (entry=0xeae4):
	instruction(0xeae4)
	$U2:8 = RBX * 0x4:8
	$U1:8 = RBX + $U2:8
	RAX = $U1:8
	instruction(0xeae8)
	RDX = 0x3b040:8
	instruction(0xeaef)
	$U1:8 = R14 + 0x390:8
	$U2:8 = 0x4:8
	ram[$U1:8] = $U2:8
	instruction(0xeafa)
	$U1:8 = 0x5:8 & 0x3f:8
	$U2:8 = RAX
	RAX = RAX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RAX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RAX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RAX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RAX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0xeafe)
	$U1:8 = R14 + 0x370:8
	RSI = $U1:8
	instruction(0xeb05)
	$U2:8 = RAX * 0x1:8
	$U1:8 = RDX + $U2:8
	RAX = ram[$U1:8]
	instruction(0xeb09)
	$U1:8 = R14 + 0x398:8
	$U2:8 = RSI
	ram[$U1:8] = $U2:8
	instruction(0xeb10)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xeb13)
	if ZF jump 0xec80:8

0x29625  LEA RDI,[RDI + RAX*0x1]
0x29629  LEA RSI,[RSI + RCX*0x1]
0x2962d  TEST R8D,R8D
0x29630  JZ 0x29640
<L0> (entry=0x29625):
	instruction(0x29625)
	$U2:8 = RAX * 0x1:8
	$U1:8 = RDI + $U2:8
	RDI = $U1:8
	instruction(0x29629)
	$U2:8 = RCX * 0x1:8
	$U1:8 = RSI + $U2:8
	RSI = $U1:8
	instruction(0x2962d)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = R8D & R8D
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x29630)
	if ZF jump 0x29640:8

0xe548  SUB RSP,0x8
0xe54c  MOV RDX,qword ptr [0x3c188]
0xe553  XOR ESI,ESI
0xe555  MOV RDI,RCX
0xe558  SUB RDX,RCX
0xe55b  CALL 0x2c1a0
<L0> (entry=0xe548):
	instruction(0xe548)
	CF = RSP < 0x8:8
	OF = RSP sborrow 0x8:8
	RSP = RSP - 0x8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xe54c)
	RDX = ram[0x3c188:8]
	instruction(0xe553)
	CF = 0x0:1
	OF = 0x0:1
	ESI = ESI ^ ESI
	RSI = zext(ESI)
	SF = ESI s< 0x0:4
	ZF = ESI == 0x0:4
	$U1:4 = ESI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xe555)
	RDI = RCX
	instruction(0xe558)
	CF = RDX < RCX
	OF = RDX sborrow RCX
	RDX = RDX - RCX
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xe55b)
	$U1:8 = 0xe560:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2c1a0:8

0x52f4  MOV RAX,qword ptr [RBP + -0x4b0]
0x52fb  TEST RAX,RAX
0x52fe  JZ 0x5308
<L0> (entry=0x52f4):
	instruction(0x52f4)
	$U1:8 = RBP + 0xfffffffffffffb50:8
	RAX = ram[$U1:8]
	instruction(0x52fb)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x52fe)
	if ZF jump 0x5308:8

0x1e4fc  MOV qword ptr [RBP + -0x50],RBX
0x1e500  XOR EBX,EBX
0x1e502  MOV dword ptr [RBP + -0x8c],EAX
0x1e508  MOV qword ptr [RBP + -0x48],0x0
0x1e510  MOV dword ptr [RBP + -0x38],0xffffffff
0x1e517  MOV qword ptr [RBP + -0x40],0x0
0x1e51f  JMP 0x1e53a
<L0> (entry=0x1e4fc):
	instruction(0x1e4fc)
	$U1:8 = RBP + 0xffffffffffffffb0:8
	$U2:8 = RBX
	ram[$U1:8] = $U2:8
	instruction(0x1e500)
	CF = 0x0:1
	OF = 0x0:1
	EBX = EBX ^ EBX
	RBX = zext(EBX)
	SF = EBX s< 0x0:4
	ZF = EBX == 0x0:4
	$U1:4 = EBX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e502)
	$U1:8 = RBP + 0xffffffffffffff74:8
	$U2:4 = EAX
	ram[$U1:8] = $U2:4
	instruction(0x1e508)
	$U1:8 = RBP + 0xffffffffffffffb8:8
	$U2:8 = 0x0:8
	ram[$U1:8] = $U2:8
	instruction(0x1e510)
	$U1:8 = RBP + 0xffffffffffffffc8:8
	$U2:4 = 0xffffffff:4
	ram[$U1:8] = $U2:4
	instruction(0x1e517)
	$U1:8 = RBP + 0xffffffffffffffc0:8
	$U2:8 = 0x0:8
	ram[$U1:8] = $U2:8
	instruction(0x1e51f)
	jump 0x1e53a:8

0x207ff  CALL 0x2ba40
<L0> (entry=0x207ff):
	$U1:8 = 0x20804:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2ba40:8

0x5aec  LEA R14,[RAX + 0x1]
0x5af0  MOV RDI,R13
0x5af3  CALL 0x2ba40
<L0> (entry=0x5aec):
	instruction(0x5aec)
	$U1:8 = RAX + 0x1:8
	R14 = $U1:8
	instruction(0x5af0)
	RDI = R13
	instruction(0x5af3)
	$U1:8 = 0x5af8:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2ba40:8

0x5a20  CMP dword ptr [RBP + -0x4a0],-0x1
0x5a27  JNZ 0x5a33
<L0> (entry=0x5a20):
	instruction(0x5a20)
	$U5:8 = RBP + 0xfffffffffffffb60:8
	$U6:4 = ram[$U5:8]
	CF = $U6:4 < 0xffffffff:4
	$U7:4 = ram[$U5:8]
	OF = $U7:4 sborrow 0xffffffff:4
	$U8:4 = ram[$U5:8]
	$U1:4 = $U8:4 - 0xffffffff:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x5a27)
	$U1:1 = !ZF
	if $U1:1 jump 0x5a33:8

0x2223f  PXOR XMM0, XMM0
0x22243  MOV R10,qword ptr [0x3bbe8]
0x2224a  MOVAPS xmmword ptr [RBP + -0x70], XMM0
0x2224e  MOVAPS xmmword ptr [RBP + -0x60], XMM0
0x22252  MOVAPS xmmword ptr [RBP + -0x50], XMM0
0x22256  MOVAPS xmmword ptr [RBP + -0x40], XMM0
0x2225a  TEST RCX,RCX
0x2225d  JZ 0x22610
<L0> (entry=0x2223f):
	instruction(0x2223f)
	XMM0 = XMM0 ^ XMM0
	instruction(0x22243)
	R10 = ram[0x3bbe8:8]
	instruction(0x2224a)
	$U1:8 = RBP + 0xffffffffffffff90:8
	$U2:16 = XMM0
	ram[$U1:8] = $U2:16
	instruction(0x2224e)
	$U1:8 = RBP + 0xffffffffffffffa0:8
	$U2:16 = XMM0
	ram[$U1:8] = $U2:16
	instruction(0x22252)
	$U1:8 = RBP + 0xffffffffffffffb0:8
	$U2:16 = XMM0
	ram[$U1:8] = $U2:16
	instruction(0x22256)
	$U1:8 = RBP + 0xffffffffffffffc0:8
	$U2:16 = XMM0
	ram[$U1:8] = $U2:16
	instruction(0x2225a)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RCX & RCX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2225d)
	if ZF jump 0x22610:8

0x23380  ADD RAX,0x38
0x23384  CMP R12,RAX
0x23387  JA 0x23330
<L0> (entry=0x23380):
	instruction(0x23380)
	CF = RAX carry 0x38:8
	OF = RAX scarry 0x38:8
	RAX = RAX + 0x38:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x23384)
	CF = R12 < RAX
	OF = R12 sborrow RAX
	$U1:8 = R12 - RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23387)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x23330:8

0x1e592  TEST AL,AL
0x1e594  JNZ 0x1e578
<L0> (entry=0x1e592):
	instruction(0x1e592)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = AL & AL
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e594)
	$U1:1 = !ZF
	if $U1:1 jump 0x1e578:8

0x27e6b  CMP RAX,-0xfff
0x27e71  JNC 0x27e74
<L0> (entry=0x27e6b):
	instruction(0x27e6b)
	CF = RAX < 0xfffffffffffff001:8
	OF = RAX sborrow 0xfffffffffffff001:8
	$U1:8 = RAX - 0xfffffffffffff001:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x27e71)
	$U1:1 = !CF
	if $U1:1 jump 0x27e74:8

0xed38  AND R8D,0x20000000
0xed3f  JNZ 0xed78
<L0> (entry=0xed38):
	instruction(0xed38)
	CF = 0x0:1
	OF = 0x0:1
	R8D = R8D & 0x20000000:4
	R8 = zext(R8D)
	SF = R8D s< 0x0:4
	ZF = R8D == 0x0:4
	$U1:4 = R8D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xed3f)
	$U1:1 = !ZF
	if $U1:1 jump 0xed78:8

0x18858  MOV R9,qword ptr [R10]
0x1885b  MOV R10,qword ptr [RAX + 0x38]
0x1885f  TEST ECX,ECX
0x18861  SETNZ R11B
0x18865  MOV RAX,R10
0x18868  TEST RDI,RDI
0x1886b  JZ 0x18870
<L0> (entry=0x18858):
	instruction(0x18858)
	R9 = ram[R10]
	instruction(0x1885b)
	$U1:8 = RAX + 0x38:8
	R10 = ram[$U1:8]
	instruction(0x1885f)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = ECX & ECX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x18861)
	$U1:1 = !ZF
	R11B = $U1:1
	instruction(0x18865)
	RAX = R10
	instruction(0x18868)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RDI & RDI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1886b)
	if ZF jump 0x18870:8

0x10554  CMP AL,0x25
0x10556  JZ 0x10560
<L0> (entry=0x10554):
	instruction(0x10554)
	CF = AL < 0x25:1
	OF = AL sborrow 0x25:1
	$U1:1 = AL - 0x25:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x10556)
	if ZF jump 0x10560:8

0xe64c  TEST EAX,EAX
0xe64e  JS 0xe65d
<L0> (entry=0xe64c):
	instruction(0xe64c)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xe64e)
	if SF jump 0xe65d:8

0xe417  MOV qword ptr [0x3c178],RAX
0xe41e  MOV qword ptr [0x3c188],RCX
0xe425  ADD RSP,0x8
0xe429  POP RBX
0xe42a  POP RBP
0xe42b  RET
<L0> (entry=0xe417):
	instruction(0xe417)
	$U1:8 = RAX
	ram[0x3c178:8] = $U1:8
	instruction(0xe41e)
	$U1:8 = RCX
	ram[0x3c188:8] = $U1:8
	instruction(0xe425)
	CF = RSP carry 0x8:8
	OF = RSP scarry 0x8:8
	RSP = RSP + 0x8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xe429)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0xe42a)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBP = $U1:8
	instruction(0xe42b)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0xe6ad  MOV RBX,qword ptr [RBX + 0x38]
0xe6b1  TEST RBX,RBX
0xe6b4  JNZ 0xe6c9
<L0> (entry=0xe6ad):
	instruction(0xe6ad)
	$U1:8 = RBX + 0x38:8
	RBX = ram[$U1:8]
	instruction(0xe6b1)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RBX & RBX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xe6b4)
	$U1:1 = !ZF
	if $U1:1 jump 0xe6c9:8

0x27e90  ENDBR64
0x27e94  MOV ESI,0xe7
0x27e99  MOV EDX,0x3c
0x27e9e  JMP 0x27ead
<L0> (entry=0x27e90):
	instruction(0x27e90)
	instruction(0x27e94)
	RSI = 0xe7:8
	instruction(0x27e99)
	RDX = 0x3c:8
	instruction(0x27e9e)
	jump 0x27ead:8

0x18993  LEA RBX,[0x39b00]
0x1899a  MOV R12,-0x58
0x189a1  SUB R12,RBX
0x189a4  NOP dword ptr [RAX]
0x189a8  TEST RBP,RBP
0x189ab  JZ 0x189ed
<L0> (entry=0x18993):
	instruction(0x18993)
	RBX = 0x39b00:8
	instruction(0x1899a)
	R12 = 0xffffffffffffffa8:8
	instruction(0x189a1)
	CF = R12 < RBX
	OF = R12 sborrow RBX
	R12 = R12 - RBX
	SF = R12 s< 0x0:8
	ZF = R12 == 0x0:8
	$U1:8 = R12 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x189a4)
	instruction(0x189a8)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RBP & RBP
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x189ab)
	if ZF jump 0x189ed:8

0x4840  ENDBR64
0x4844  PUSH RBP
0x4845  MOV R9D,EDX
0x4848  MOVD XMM4, ECX
0x484c  MOVD XMM5, R8D
0x4851  LEA EAX,[R9 + 0x2]
0x4855  PUNPCKLDQ XMM4, XMM5
0x4859  LEA RAX,[RAX + RAX*0x2]
0x485d  MOV RBP,RSP
0x4860  LEA RAX,[0x17 + RAX*0x8]
0x4868  PUSH R15
0x486a  PUSH R14
0x486c  SHR RAX,0x4
0x4870  MOV R14,RDI
0x4873  MOV RDI,RSI
0x4876  PUSH R13
0x4878  SHL RAX,0x4
0x487c  PUSH R12
0x487e  PUSH RBX
0x487f  SUB RSP,0x4d8
0x4886  MOV dword ptr [RBP + -0x4ec],ECX
0x488c  MOV RCX,RAX
0x488f  AND RCX,-0x1000
0x4896  MOV RDX,RSP
0x4899  MOVQ qword ptr [RBP + -0x4d8], XMM4
0x48a1  SUB RDX,RCX
0x48a4  CMP RSP,RDX
0x48a7  JZ 0x48be
<L0> (entry=0x4840):
	instruction(0x4840)
	instruction(0x4844)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x4845)
	R9D = EDX
	R9 = zext(R9D)
	instruction(0x4848)
	XMM4 = zext(ECX)
	instruction(0x484c)
	XMM5 = zext(R8D)
	instruction(0x4851)
	$U1:8 = R9 + 0x2:8
	EAX = $U1:4
	RAX = zext(EAX)
	instruction(0x4855)
	XMM4_Dd = XMM5_Db
	XMM4_Dc = XMM4_Db
	XMM4_Db = XMM5_Da
	instruction(0x4859)
	$U2:8 = RAX * 0x2:8
	$U1:8 = RAX + $U2:8
	RAX = $U1:8
	instruction(0x485d)
	RBP = RSP
	instruction(0x4860)
	$U2:8 = RAX * 0x8:8
	$U1:8 = 0x17:8 + $U2:8
	RAX = $U1:8
	instruction(0x4868)
	$U1:8 = R15
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x486a)
	$U1:8 = R14
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x486c)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RAX
	RAX = RAX >> $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 >> $U5:8
	$U7:8 = $U6:8 & 0x1:8
	$U4:1 = $U7:8 != 0x0:8
	$U8:1 = !$U3:1
	$U9:1 = $U8:1 && CF
	$U10:1 = $U3:1 && $U4:1
	CF = $U9:1 || $U10:1
	$U11:1 = $U1:8 == 0x1:8
	$U12:1 = $U2:8 s< 0x0:8
	$U13:1 = !$U11:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U11:1 && $U12:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RAX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RAX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RAX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x4870)
	R14 = RDI
	instruction(0x4873)
	RDI = RSI
	instruction(0x4876)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x4878)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RAX
	RAX = RAX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RAX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RAX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RAX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RAX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x487c)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x487e)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x487f)
	CF = RSP < 0x4d8:8
	OF = RSP sborrow 0x4d8:8
	RSP = RSP - 0x4d8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x4886)
	$U1:8 = RBP + 0xfffffffffffffb14:8
	$U2:4 = ECX
	ram[$U1:8] = $U2:4
	instruction(0x488c)
	RCX = RAX
	instruction(0x488f)
	CF = 0x0:1
	OF = 0x0:1
	RCX = RCX & 0xfffffffffffff000:8
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x4896)
	RDX = RSP
	instruction(0x4899)
	$U1:8 = RBP + 0xfffffffffffffb28:8
	$U2:8 = XMM4_Qa
	ram[$U1:8] = $U2:8
	instruction(0x48a1)
	CF = RDX < RCX
	OF = RDX sborrow RCX
	RDX = RDX - RCX
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x48a4)
	CF = RSP < RDX
	OF = RSP sborrow RDX
	$U1:8 = RSP - RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x48a7)
	if ZF jump 0x48be:8

0x1069b  MOV ECX,0xffffffff
0x106a0  CMP AL,0x2e
0x106a2  JZ 0x10920
<L0> (entry=0x1069b):
	instruction(0x1069b)
	RCX = 0xffffffff:8
	instruction(0x106a0)
	CF = AL < 0x2e:1
	OF = AL sborrow 0x2e:1
	$U1:1 = AL - 0x2e:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x106a2)
	if ZF jump 0x10920:8

0x27ead  MOV EAX,ESI
0x27eaf  SYSCALL
<L0> (entry=0x27ead):
	instruction(0x27ead)
	EAX = ESI
	RAX = zext(EAX)
	instruction(0x27eaf)
	RCX = 0x27eb1:8
	$U1:1 = NT & 0x1:1
	$U2:8 = zext($U1:1)
	$U3:8 = 0x4000:8 * $U2:8
	$U4:1 = OF & 0x1:1
	$U5:8 = zext($U4:1)
	$U6:8 = 0x800:8 * $U5:8
	$U7:8 = $U3:8 | $U6:8
	$U8:1 = DF & 0x1:1
	$U9:8 = zext($U8:1)
	$U10:8 = 0x400:8 * $U9:8
	$U11:8 = $U7:8 | $U10:8
	$U12:1 = IF & 0x1:1
	$U13:8 = zext($U12:1)
	$U14:8 = 0x200:8 * $U13:8
	$U15:8 = $U11:8 | $U14:8
	$U16:1 = TF & 0x1:1
	$U17:8 = zext($U16:1)
	$U18:8 = 0x100:8 * $U17:8
	$U19:8 = $U15:8 | $U18:8
	$U20:1 = SF & 0x1:1
	$U21:8 = zext($U20:1)
	$U22:8 = 0x80:8 * $U21:8
	$U23:8 = $U19:8 | $U22:8
	$U24:1 = ZF & 0x1:1
	$U25:8 = zext($U24:1)
	$U26:8 = 0x40:8 * $U25:8
	$U27:8 = $U23:8 | $U26:8
	$U28:1 = AF & 0x1:1
	$U29:8 = zext($U28:1)
	$U30:8 = 0x10:8 * $U29:8
	$U31:8 = $U27:8 | $U30:8
	$U32:1 = PF & 0x1:1
	$U33:8 = zext($U32:1)
	$U34:8 = 0x4:8 * $U33:8
	$U35:8 = $U31:8 | $U34:8
	$U36:1 = CF & 0x1:1
	$U37:8 = zext($U36:1)
	$U38:8 = 0x1:8 * $U37:8
	R11 = $U35:8 | $U38:8
	NEXT_PC = 0x27eb1:8
	exception(0x101:4, 0x0:4)

0x7f9e  MOV RAX,qword ptr [0x39ab0]
0x7fa5  ADD RAX,qword ptr [0x3c170]
0x7fac  LEA RAX,[RSI + RAX*0x1 + 0x17]
0x7fb1  MOV RSI,RSP
0x7fb4  MOV RCX,RAX
0x7fb7  AND RAX,-0x1000
0x7fbd  SUB RSI,RAX
0x7fc0  AND RCX,-0x10
0x7fc4  CMP RSP,RSI
0x7fc7  JZ 0x7fde
<L0> (entry=0x7f9e):
	instruction(0x7f9e)
	RAX = ram[0x39ab0:8]
	instruction(0x7fa5)
	$U4:8 = ram[0x3c170:8]
	CF = RAX carry $U4:8
	$U5:8 = ram[0x3c170:8]
	OF = RAX scarry $U5:8
	$U6:8 = ram[0x3c170:8]
	RAX = RAX + $U6:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7fac)
	$U2:8 = 0x17:8 + RSI
	$U3:8 = RAX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	RAX = $U1:8
	instruction(0x7fb1)
	RSI = RSP
	instruction(0x7fb4)
	RCX = RAX
	instruction(0x7fb7)
	CF = 0x0:1
	OF = 0x0:1
	RAX = RAX & 0xfffffffffffff000:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7fbd)
	CF = RSI < RAX
	OF = RSI sborrow RAX
	RSI = RSI - RAX
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7fc0)
	CF = 0x0:1
	OF = 0x0:1
	RCX = RCX & 0xfffffffffffffff0:8
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7fc4)
	CF = RSP < RSI
	OF = RSP sborrow RSI
	$U1:8 = RSP - RSI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7fc7)
	if ZF jump 0x7fde:8

0x4fc4  MOV ECX,EAX
0x4fc6  MOV qword ptr [RDX + RCX*0x8],R14
0x4fca  AND byte ptr [R14 + 0x31c],0x9f
0x4fd2  MOV RSI,qword ptr [RSI + 0x10]
0x4fd6  TEST RSI,RSI
0x4fd9  JZ 0x54f0
<L0> (entry=0x4fc4):
	instruction(0x4fc4)
	ECX = EAX
	RCX = zext(ECX)
	instruction(0x4fc6)
	$U2:8 = RCX * 0x8:8
	$U1:8 = RDX + $U2:8
	$U3:8 = R14
	ram[$U1:8] = $U3:8
	instruction(0x4fca)
	$U4:8 = R14 + 0x31c:8
	CF = 0x0:1
	OF = 0x0:1
	$U5:1 = ram[$U4:8]
	$U6:1 = $U5:1 & 0x9f:1
	ram[$U4:8] = $U6:1
	$U7:1 = ram[$U4:8]
	SF = $U7:1 s< 0x0:1
	$U8:1 = ram[$U4:8]
	ZF = $U8:1 == 0x0:1
	$U9:1 = ram[$U4:8]
	$U1:1 = $U9:1 & 0xff:1
	$U2:1 = count_ones($U1:1)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x4fd2)
	$U1:8 = RSI + 0x10:8
	RSI = ram[$U1:8]
	instruction(0x4fd6)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RSI & RSI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x4fd9)
	if ZF jump 0x54f0:8

0x10649  CMP R12D,0x3f
0x1064d  JG 0x10b6e
<L0> (entry=0x10649):
	instruction(0x10649)
	CF = R12D < 0x3f:4
	OF = R12D sborrow 0x3f:4
	$U1:4 = R12D - 0x3f:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1064d)
	$U2:1 = !ZF
	$U3:1 = OF == SF
	$U1:1 = $U2:1 && $U3:1
	if $U1:1 jump 0x10b6e:8

0x1055c  TEST CL,CL
0x1055e  JNZ 0x10548
<L0> (entry=0x1055c):
	instruction(0x1055c)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = CL & CL
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1055e)
	$U1:1 = !ZF
	if $U1:1 jump 0x10548:8

0x189ed  ADD RSP,0x28
0x189f1  POP RBX
0x189f2  POP RBP
0x189f3  POP R12
0x189f5  POP R13
0x189f7  POP R14
0x189f9  POP R15
0x189fb  RET
<L0> (entry=0x189ed):
	instruction(0x189ed)
	CF = RSP carry 0x28:8
	OF = RSP scarry 0x28:8
	RSP = RSP + 0x28:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x189f1)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0x189f2)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBP = $U1:8
	instruction(0x189f3)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R12 = $U1:8
	instruction(0x189f5)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R13 = $U1:8
	instruction(0x189f7)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R14 = $U1:8
	instruction(0x189f9)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R15 = $U1:8
	instruction(0x189fb)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x1df90  ENDBR64
0x1df94  MOV RDX,qword ptr [RDI]
0x1df97  MOV RAX,qword ptr [RDX]
0x1df9a  TEST RAX,RAX
0x1df9d  JNZ 0x1dfb5
<L0> (entry=0x1df90):
	instruction(0x1df90)
	instruction(0x1df94)
	RDX = ram[RDI]
	instruction(0x1df97)
	RAX = ram[RDX]
	instruction(0x1df9a)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1df9d)
	$U1:1 = !ZF
	if $U1:1 jump 0x1dfb5:8

0x242ab  CMP dword ptr [RBP + -0x38],0x6
0x242af  JZ 0x25060
<L0> (entry=0x242ab):
	instruction(0x242ab)
	$U5:8 = RBP + 0xffffffffffffffc8:8
	$U6:4 = ram[$U5:8]
	CF = $U6:4 < 0x6:4
	$U7:4 = ram[$U5:8]
	OF = $U7:4 sborrow 0x6:4
	$U8:4 = ram[$U5:8]
	$U1:4 = $U8:4 - 0x6:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x242af)
	if ZF jump 0x25060:8

0x8059  MOV dword ptr [RBP + -0xc8],0x0
0x8063  MOV R13,RAX
0x8066  LEA RAX,[RBP + -0xc0]
0x806d  MOV qword ptr [RBP + -0x100],RAX
0x8074  MOV RAX,R12
0x8077  MOV R12,RBX
0x807a  MOV RBX,RAX
0x807d  MOV RAX,qword ptr [0x39ab8]
0x8084  CMP RAX,RBX
0x8087  JBE 0x81b0
<L0> (entry=0x8059):
	instruction(0x8059)
	$U1:8 = RBP + 0xffffffffffffff38:8
	$U2:4 = 0x0:4
	ram[$U1:8] = $U2:4
	instruction(0x8063)
	R13 = RAX
	instruction(0x8066)
	$U1:8 = RBP + 0xffffffffffffff40:8
	RAX = $U1:8
	instruction(0x806d)
	$U1:8 = RBP + 0xffffffffffffff00:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x8074)
	RAX = R12
	instruction(0x8077)
	R12 = RBX
	instruction(0x807a)
	RBX = RAX
	instruction(0x807d)
	RAX = ram[0x39ab8:8]
	instruction(0x8084)
	CF = RAX < RBX
	OF = RAX sborrow RBX
	$U1:8 = RAX - RBX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x8087)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x81b0:8

0x10560  CMP R12D,0x3f
0x10564  JG 0x10b6e
<L0> (entry=0x10560):
	instruction(0x10560)
	CF = R12D < 0x3f:4
	OF = R12D sborrow 0x3f:4
	$U1:4 = R12D - 0x3f:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x10564)
	$U2:1 = !ZF
	$U3:1 = OF == SF
	$U1:1 = $U2:1 && $U3:1
	if $U1:1 jump 0x10b6e:8

0x8046  MOV RDX,qword ptr [RBX + 0x20]
0x804a  MOV RSI,qword ptr [RBX + 0x18]
0x804e  MOV RDI,R14
0x8051  XOR R12D,R12D
0x8054  CALL 0x2bfa0
<L0> (entry=0x8046):
	instruction(0x8046)
	$U1:8 = RBX + 0x20:8
	RDX = ram[$U1:8]
	instruction(0x804a)
	$U1:8 = RBX + 0x18:8
	RSI = ram[$U1:8]
	instruction(0x804e)
	RDI = R14
	instruction(0x8051)
	CF = 0x0:1
	OF = 0x0:1
	R12D = R12D ^ R12D
	R12 = zext(R12D)
	SF = R12D s< 0x0:4
	ZF = R12D == 0x0:4
	$U1:4 = R12D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x8054)
	$U1:8 = 0x8059:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x2bfa0:8

0x18894  MOV RSI,R10
0x18897  CMP RAX,R10
0x1889a  JC 0x18930
<L0> (entry=0x18894):
	instruction(0x18894)
	RSI = R10
	instruction(0x18897)
	CF = RAX < R10
	OF = RAX sborrow R10
	$U1:8 = RAX - R10
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1889a)
	if CF jump 0x18930:8

0x238e1  CMP qword ptr [R15 + 0x78],0x0
0x238e6  JZ 0x238fa
<L0> (entry=0x238e1):
	instruction(0x238e1)
	$U5:8 = R15 + 0x78:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x0:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x0:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x238e6)
	if ZF jump 0x238fa:8

0x1e5c5  MOV EAX,dword ptr [RBP + -0x88]
0x1e5cb  MOV R12,qword ptr [RBP + -0x70]
0x1e5cf  MOV qword ptr [RBP + -0x48],0x0
0x1e5d7  XOR EBX,EBX
0x1e5d9  MOV dword ptr [0x3c220],EAX
0x1e5df  MOV RAX,qword ptr [RBP + -0xa8]
0x1e5e6  MOV qword ptr [RBP + -0x50],RAX
0x1e5ea  JMP 0x1e61e
<L0> (entry=0x1e5c5):
	instruction(0x1e5c5)
	$U1:8 = RBP + 0xffffffffffffff78:8
	EAX = ram[$U1:8]
	RAX = zext(EAX)
	instruction(0x1e5cb)
	$U1:8 = RBP + 0xffffffffffffff90:8
	R12 = ram[$U1:8]
	instruction(0x1e5cf)
	$U1:8 = RBP + 0xffffffffffffffb8:8
	$U2:8 = 0x0:8
	ram[$U1:8] = $U2:8
	instruction(0x1e5d7)
	CF = 0x0:1
	OF = 0x0:1
	EBX = EBX ^ EBX
	RBX = zext(EBX)
	SF = EBX s< 0x0:4
	ZF = EBX == 0x0:4
	$U1:4 = EBX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e5d9)
	$U1:4 = EAX
	ram[0x3c220:8] = $U1:4
	instruction(0x1e5df)
	$U1:8 = RBP + 0xffffffffffffff58:8
	RAX = ram[$U1:8]
	instruction(0x1e5e6)
	$U1:8 = RBP + 0xffffffffffffffb0:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1e5ea)
	jump 0x1e61e:8

0x24367  MOV RDI,qword ptr [0x3add0]
0x2436e  TEST RDI,RDI
0x24371  JZ 0x2437a
<L0> (entry=0x24367):
	instruction(0x24367)
	RDI = ram[0x3add0:8]
	instruction(0x2436e)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RDI & RDI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x24371)
	if ZF jump 0x2437a:8

0xb4e6  TEST EAX,EAX
0xb4e8  JNZ 0xb470
<L0> (entry=0xb4e6):
	instruction(0xb4e6)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & EAX
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb4e8)
	$U1:1 = !ZF
	if $U1:1 jump 0xb470:8

0x23451  CMP dword ptr [RDX + 0xc],0x554e47
0x23458  JNZ 0x23420
<L0> (entry=0x23451):
	instruction(0x23451)
	$U5:8 = RDX + 0xc:8
	$U6:4 = ram[$U5:8]
	CF = $U6:4 < 0x554e47:4
	$U7:4 = ram[$U5:8]
	OF = $U7:4 sborrow 0x554e47:4
	$U8:4 = ram[$U5:8]
	$U1:4 = $U8:4 - 0x554e47:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23458)
	$U1:1 = !ZF
	if $U1:1 jump 0x23420:8

0x1982e  POP RBX
0x1982f  POP RBP
0x19830  MOV qword ptr [R9],R8
0x19833  POP R12
0x19835  POP R13
0x19837  MOV dword ptr [R15],EDI
0x1983a  POP R14
0x1983c  POP R15
0x1983e  RET
<L0> (entry=0x1982e):
	instruction(0x1982e)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0x1982f)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBP = $U1:8
	instruction(0x19830)
	$U1:8 = R8
	ram[R9] = $U1:8
	instruction(0x19833)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R12 = $U1:8
	instruction(0x19835)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R13 = $U1:8
	instruction(0x19837)
	$U1:4 = EDI
	ram[R15] = $U1:4
	instruction(0x1983a)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R14 = $U1:8
	instruction(0x1983c)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R15 = $U1:8
	instruction(0x1983e)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x1ea9b  MOV RDI,R13
0x1ea9e  CALL 0x1f220
<L0> (entry=0x1ea9b):
	instruction(0x1ea9b)
	RDI = R13
	instruction(0x1ea9e)
	$U1:8 = 0x1eaa3:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x1f220:8

0x239e5  CMP qword ptr [0x3adc8],0x0
0x239ed  JZ 0x247d3
<L0> (entry=0x239e5):
	instruction(0x239e5)
	$U5:8 = ram[0x3adc8:8]
	CF = $U5:8 < 0x0:8
	$U6:8 = ram[0x3adc8:8]
	OF = $U6:8 sborrow 0x0:8
	$U7:8 = ram[0x3adc8:8]
	$U1:8 = $U7:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x239ed)
	if ZF jump 0x247d3:8

0x1f0c0  ENDBR64
0x1f0c4  PUSH RBP
0x1f0c5  PUSH RBX
0x1f0c6  SUB RSP,0x8
0x1f0ca  MOV RBP,qword ptr [RDI]
0x1f0cd  TEST RBP,RBP
0x1f0d0  JZ 0x1f130
<L0> (entry=0x1f0c0):
	instruction(0x1f0c0)
	instruction(0x1f0c4)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1f0c5)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1f0c6)
	CF = RSP < 0x8:8
	OF = RSP sborrow 0x8:8
	RSP = RSP - 0x8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1f0ca)
	RBP = ram[RDI]
	instruction(0x1f0cd)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RBP & RBP
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1f0d0)
	if ZF jump 0x1f130:8

0x7df0  MOV RDX,0x3010102464c457f
0x7dfa  CMP qword ptr [R13 + 0x8],RDX
0x7dfe  JZ 0x79f1
<L0> (entry=0x7df0):
	instruction(0x7df0)
	RDX = 0x3010102464c457f:8
	instruction(0x7dfa)
	$U5:8 = R13 + 0x8:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < RDX
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow RDX
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7dfe)
	if ZF jump 0x79f1:8

0x2420a  MOV RDX,qword ptr [R15 + 0x68]
0x2420e  MOV RAX,qword ptr [R15 + 0x268]
0x24215  MOV RBX,qword ptr [RDX + 0x8]
0x24219  TEST byte ptr [R15 + 0x31e],0x20
0x24221  JZ 0x24226
<L0> (entry=0x2420a):
	instruction(0x2420a)
	$U1:8 = R15 + 0x68:8
	RDX = ram[$U1:8]
	instruction(0x2420e)
	$U1:8 = R15 + 0x268:8
	RAX = ram[$U1:8]
	instruction(0x24215)
	$U1:8 = RDX + 0x8:8
	RBX = ram[$U1:8]
	instruction(0x24219)
	$U5:8 = R15 + 0x31e:8
	CF = 0x0:1
	OF = 0x0:1
	$U6:1 = ram[$U5:8]
	$U1:1 = $U6:1 & 0x20:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x24221)
	if ZF jump 0x24226:8

0x221c6  CMP qword ptr [RAX + 0x8],0x7
0x221cb  JNZ 0x2271a
<L0> (entry=0x221c6):
	instruction(0x221c6)
	$U5:8 = RAX + 0x8:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x7:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x7:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x7:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x221cb)
	$U1:1 = !ZF
	if $U1:1 jump 0x2271a:8

0x4334  CMP qword ptr [RAX + 0x8],0x0
0x4339  JZ 0x4340
<L0> (entry=0x4334):
	instruction(0x4334)
	$U5:8 = RAX + 0x8:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x0:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x0:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x4339)
	if ZF jump 0x4340:8

0x22363  CMP qword ptr [0x3bcc0],0x0
0x2236b  JZ 0x226fb
<L0> (entry=0x22363):
	instruction(0x22363)
	$U5:8 = ram[0x3bcc0:8]
	CF = $U5:8 < 0x0:8
	$U6:8 = ram[0x3bcc0:8]
	OF = $U6:8 sborrow 0x0:8
	$U7:8 = ram[0x3bcc0:8]
	$U1:8 = $U7:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2236b)
	if ZF jump 0x226fb:8

0x4f89  MOV RSI,qword ptr [RBP + -0x4f8]
0x4f90  XOR EAX,EAX
0x4f92  MOV EDI,0xffffffff
0x4f97  JMP 0x4fb7
<L0> (entry=0x4f89):
	instruction(0x4f89)
	$U1:8 = RBP + 0xfffffffffffffb08:8
	RSI = ram[$U1:8]
	instruction(0x4f90)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x4f92)
	RDI = 0xffffffff:8
	instruction(0x4f97)
	jump 0x4fb7:8

0x1af57  MOV EDI,0xbf
0x1af5c  MOV RBP,RAX
0x1af5f  MOV qword ptr [RSP + 0x38],RAX
0x1af64  CALL 0x19f10
<L0> (entry=0x1af57):
	instruction(0x1af57)
	RDI = 0xbf:8
	instruction(0x1af5c)
	RBP = RAX
	instruction(0x1af5f)
	$U1:8 = 0x38:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1af64)
	$U1:8 = 0x1af69:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x19f10:8

0xb5d0  MOV RAX,qword ptr [0x3aa90]
0xb5d7  MOV R9,R12
0xb5da  MOV RCX,R11
0xb5dd  MOV RDI,R13
0xb5e0  MOV qword ptr [RSP + 0x60],RAX
0xb5e5  PUSH RBP
0xb5e6  LEA RAX,[RSP + 0x68]
0xb5eb  PUSH RAX
0xb5ec  PUSH RBX
0xb5ed  MOV EAX,dword ptr [RSP + 0x24]
0xb5f1  PUSH RAX
0xb5f2  MOV R8,qword ptr [RSP + 0x78]
0xb5f7  MOV RSI,qword ptr [RSP + 0x40]
0xb5fc  CALL 0x9bd0
<L0> (entry=0xb5d0):
	instruction(0xb5d0)
	RAX = ram[0x3aa90:8]
	instruction(0xb5d7)
	R9 = R12
	instruction(0xb5da)
	RCX = R11
	instruction(0xb5dd)
	RDI = R13
	instruction(0xb5e0)
	$U1:8 = 0x60:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0xb5e5)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xb5e6)
	$U1:8 = 0x68:8 + RSP
	RAX = $U1:8
	instruction(0xb5eb)
	$U1:8 = RAX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xb5ec)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xb5ed)
	$U1:8 = 0x24:8 + RSP
	EAX = ram[$U1:8]
	RAX = zext(EAX)
	instruction(0xb5f1)
	$U1:8 = RAX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0xb5f2)
	$U1:8 = 0x78:8 + RSP
	R8 = ram[$U1:8]
	instruction(0xb5f7)
	$U1:8 = 0x40:8 + RSP
	RSI = ram[$U1:8]
	instruction(0xb5fc)
	$U1:8 = 0xb601:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x9bd0:8

0x10f20  ENDBR64
0x10f24  PUSH RAX
0x10f25  POP RAX
0x10f26  SUB RSP,0xd8
0x10f2d  MOV R10,RDI
0x10f30  MOV qword ptr [RSP + 0x28],RSI
0x10f35  MOV qword ptr [RSP + 0x30],RDX
0x10f3a  MOV qword ptr [RSP + 0x38],RCX
0x10f3f  MOV qword ptr [RSP + 0x40],R8
0x10f44  MOV qword ptr [RSP + 0x48],R9
0x10f49  TEST AL,AL
0x10f4b  JZ 0x10f84
<L0> (entry=0x10f20):
	instruction(0x10f20)
	instruction(0x10f24)
	$U1:8 = RAX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x10f25)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RAX = $U1:8
	instruction(0x10f26)
	CF = RSP < 0xd8:8
	OF = RSP sborrow 0xd8:8
	RSP = RSP - 0xd8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x10f2d)
	R10 = RDI
	instruction(0x10f30)
	$U1:8 = 0x28:8 + RSP
	$U2:8 = RSI
	ram[$U1:8] = $U2:8
	instruction(0x10f35)
	$U1:8 = 0x30:8 + RSP
	$U2:8 = RDX
	ram[$U1:8] = $U2:8
	instruction(0x10f3a)
	$U1:8 = 0x38:8 + RSP
	$U2:8 = RCX
	ram[$U1:8] = $U2:8
	instruction(0x10f3f)
	$U1:8 = 0x40:8 + RSP
	$U2:8 = R8
	ram[$U1:8] = $U2:8
	instruction(0x10f44)
	$U1:8 = 0x48:8 + RSP
	$U2:8 = R9
	ram[$U1:8] = $U2:8
	instruction(0x10f49)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = AL & AL
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x10f4b)
	if ZF jump 0x10f84:8

0x220e0  MOV RSI,RDI
0x220e3  SUB RSI,RAX
0x220e6  CMP RSI,0xf
0x220ea  JBE 0x220c0
<L0> (entry=0x220e0):
	instruction(0x220e0)
	RSI = RDI
	instruction(0x220e3)
	CF = RSI < RAX
	OF = RSI sborrow RAX
	RSI = RSI - RAX
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x220e6)
	CF = RSI < 0xf:8
	OF = RSI sborrow 0xf:8
	$U1:8 = RSI - 0xf:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x220ea)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x220c0:8

0x1e742  MOV RAX,qword ptr [RBP + -0xb0]
0x1e749  MOV RCX,qword ptr [RBP + -0x88]
0x1e750  MOV ESI,0x1
0x1e755  ADD RAX,0xe
0x1e759  MOV qword ptr [RBP + -0xd0],RAX
0x1e760  LEA RAX,[RCX*0x8]
0x1e768  SUB RAX,RCX
0x1e76b  MOV RCX,qword ptr [RBP + -0x80]
0x1e76f  LEA RAX,[RCX + RAX*0x2]
0x1e773  XOR ECX,ECX
0x1e775  CMP qword ptr [RBP + -0xa0],0x0
0x1e77d  MOV qword ptr [RBP + -0xd8],RAX
0x1e784  JZ 0x1eec7
<L0> (entry=0x1e742):
	instruction(0x1e742)
	$U1:8 = RBP + 0xffffffffffffff50:8
	RAX = ram[$U1:8]
	instruction(0x1e749)
	$U1:8 = RBP + 0xffffffffffffff78:8
	RCX = ram[$U1:8]
	instruction(0x1e750)
	RSI = 0x1:8
	instruction(0x1e755)
	CF = RAX carry 0xe:8
	OF = RAX scarry 0xe:8
	RAX = RAX + 0xe:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e759)
	$U1:8 = RBP + 0xffffffffffffff30:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1e760)
	$U1:8 = RCX * 0x8:8
	RAX = $U1:8
	instruction(0x1e768)
	CF = RAX < RCX
	OF = RAX sborrow RCX
	RAX = RAX - RCX
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e76b)
	$U1:8 = RBP + 0xffffffffffffff80:8
	RCX = ram[$U1:8]
	instruction(0x1e76f)
	$U2:8 = RAX * 0x2:8
	$U1:8 = RCX + $U2:8
	RAX = $U1:8
	instruction(0x1e773)
	CF = 0x0:1
	OF = 0x0:1
	ECX = ECX ^ ECX
	RCX = zext(ECX)
	SF = ECX s< 0x0:4
	ZF = ECX == 0x0:4
	$U1:4 = ECX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e775)
	$U5:8 = RBP + 0xffffffffffffff60:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x0:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x0:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x0:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e77d)
	$U1:8 = RBP + 0xffffffffffffff28:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1e784)
	if ZF jump 0x1eec7:8

0x1ef3e  MOV dword ptr [RBP + -0xa0],0x3
0x1ef48  JMP 0x1ee2c
<L0> (entry=0x1ef3e):
	instruction(0x1ef3e)
	$U1:8 = RBP + 0xffffffffffffff60:8
	$U2:4 = 0x3:4
	ram[$U1:8] = $U2:4
	instruction(0x1ef48)
	jump 0x1ee2c:8

0x1ac91  MOV RSI,R14
0x1ac94  MOV EDI,0x11
0x1ac99  LEA RDX,[0x203c0]
0x1aca0  CALL 0x18d70
<L0> (entry=0x1ac91):
	instruction(0x1ac91)
	RSI = R14
	instruction(0x1ac94)
	RDI = 0x11:8
	instruction(0x1ac99)
	RDX = 0x203c0:8
	instruction(0x1aca0)
	$U1:8 = 0x1aca5:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x18d70:8

0x1f220  ENDBR64
0x1f224  PUSH RBP
0x1f225  PUSH RBX
0x1f226  MOV RBX,RDI
0x1f229  SUB RSP,0x8
0x1f22d  MOV RBP,qword ptr [RBX]
0x1f230  TEST RBP,RBP
0x1f233  JZ 0x1f2b0
<L0> (entry=0x1f220):
	instruction(0x1f220)
	instruction(0x1f224)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1f225)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1f226)
	RBX = RDI
	instruction(0x1f229)
	CF = RSP < 0x8:8
	OF = RSP sborrow 0x8:8
	RSP = RSP - 0x8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1f22d)
	RBP = ram[RBX]
	instruction(0x1f230)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RBP & RBP
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1f233)
	if ZF jump 0x1f2b0:8

0x4e68  MOV RAX,R13
0x4e6b  JMP 0x4c5b
<L0> (entry=0x4e68):
	instruction(0x4e68)
	RAX = R13
	instruction(0x4e6b)
	jump 0x4c5b:8

0x28220  ENDBR64
0x28224  MOV ECX,ESI
0x28226  MOV EAX,EDI
0x28228  AND RCX,0x3f
0x2822c  AND RAX,0x3f
0x28230  CMP ECX,0x30
0x28233  JA 0x28280
<L0> (entry=0x28220):
	instruction(0x28220)
	instruction(0x28224)
	ECX = ESI
	RCX = zext(ECX)
	instruction(0x28226)
	EAX = EDI
	RAX = zext(EAX)
	instruction(0x28228)
	CF = 0x0:1
	OF = 0x0:1
	RCX = RCX & 0x3f:8
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2822c)
	CF = 0x0:1
	OF = 0x0:1
	RAX = RAX & 0x3f:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x28230)
	CF = ECX < 0x30:4
	OF = ECX sborrow 0x30:4
	$U1:4 = ECX - 0x30:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x28233)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x28280:8

0x4460  ENDBR64
0x4464  PUSH RBX
0x4465  MOV RBX,RDI
0x4468  MOV RDI,qword ptr [RDI]
0x446b  MOV ECX,dword ptr [RBX + 0x8]
0x446e  MOV RSI,qword ptr [RBX + 0x18]
0x4472  MOVZX EAX,byte ptr [RDI + 0x31c]
0x4479  MOV R8D,dword ptr [RBX + 0xc]
0x447d  MOV R9,qword ptr [RDI + 0x30]
0x4481  MOV EDX,EAX
0x4483  AND EDX,0x3
0x4486  TEST AL,0x3
0x4488  MOV EAX,0x1
0x448d  CMOVZ EDX,EAX
0x4490  CALL 0xb410
<L0> (entry=0x4460):
	instruction(0x4460)
	instruction(0x4464)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x4465)
	RBX = RDI
	instruction(0x4468)
	RDI = ram[RDI]
	instruction(0x446b)
	$U1:8 = RBX + 0x8:8
	ECX = ram[$U1:8]
	RCX = zext(ECX)
	instruction(0x446e)
	$U1:8 = RBX + 0x18:8
	RSI = ram[$U1:8]
	instruction(0x4472)
	$U1:8 = RDI + 0x31c:8
	$U2:1 = ram[$U1:8]
	EAX = zext($U2:1)
	RAX = zext(EAX)
	instruction(0x4479)
	$U1:8 = RBX + 0xc:8
	R8D = ram[$U1:8]
	R8 = zext(R8D)
	instruction(0x447d)
	$U1:8 = RDI + 0x30:8
	R9 = ram[$U1:8]
	instruction(0x4481)
	EDX = EAX
	RDX = zext(EDX)
	instruction(0x4483)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX & 0x3:4
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x4486)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = AL & 0x3:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x4488)
	RAX = 0x1:8
	instruction(0x448d)
	$U1:4 = EAX
	RDX = zext(EDX)
	$U2:1 = !ZF
	if $U2:1 jump <L735>
<L1>:
	EDX = $U1:4
<L2>:
	instruction(0x4490)
	$U1:8 = 0x4495:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0xb410:8

0x8118  CMP R8D,-0x1
0x811c  JZ 0x8250
<L0> (entry=0x8118):
	instruction(0x8118)
	CF = R8D < 0xffffffff:4
	OF = R8D sborrow 0xffffffff:4
	$U1:4 = R8D - 0xffffffff:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x811c)
	if ZF jump 0x8250:8

0x1e0e5  MOV EDX,0x400
0x1e0ea  LEA RSI,[RSP + 0x10]
0x1e0ef  MOV qword ptr [RSP + 0x8],RCX
0x1e0f4  CALL 0x1f330
<L0> (entry=0x1e0e5):
	instruction(0x1e0e5)
	RDX = 0x400:8
	instruction(0x1e0ea)
	$U1:8 = 0x10:8 + RSP
	RSI = $U1:8
	instruction(0x1e0ef)
	$U1:8 = 0x8:8 + RSP
	$U2:8 = RCX
	ram[$U1:8] = $U2:8
	instruction(0x1e0f4)
	$U1:8 = 0x1e0f9:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x1f330:8

0x234f7  MOV R14D,R8D
0x234fa  AND R14D,0xffff7fff
0x23501  CMP R14D,0xc0000002
0x23508  JNZ 0x234a0
<L0> (entry=0x234f7):
	instruction(0x234f7)
	R14D = R8D
	R14 = zext(R14D)
	instruction(0x234fa)
	CF = 0x0:1
	OF = 0x0:1
	R14D = R14D & 0xffff7fff:4
	R14 = zext(R14D)
	SF = R14D s< 0x0:4
	ZF = R14D == 0x0:4
	$U1:4 = R14D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x23501)
	CF = R14D < 0xc0000002:4
	OF = R14D sborrow 0xc0000002:4
	$U1:4 = R14D - 0xc0000002:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23508)
	$U1:1 = !ZF
	if $U1:1 jump 0x234a0:8

0x237a4  MOV RAX,qword ptr [0x3bba0]
0x237ab  TEST RAX,RAX
0x237ae  JZ 0x2381b
<L0> (entry=0x237a4):
	instruction(0x237a4)
	RAX = ram[0x3bba0:8]
	instruction(0x237ab)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x237ae)
	if ZF jump 0x2381b:8

0x4f52  MOV RBX,RAX
0x4f55  TEST RAX,RAX
0x4f58  JZ 0x5a09
<L0> (entry=0x4f52):
	instruction(0x4f52)
	RBX = RAX
	instruction(0x4f55)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x4f58)
	if ZF jump 0x5a09:8

0x27880  ENDBR64
0x27884  MOV RDX,RSI
0x27887  TEST EDI,EDI
0x27889  JS 0x278a0
<L0> (entry=0x27880):
	instruction(0x27880)
	instruction(0x27884)
	RDX = RSI
	instruction(0x27887)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EDI & EDI
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x27889)
	if SF jump 0x278a0:8

0x2346b  AND ECX,0xfffffffc
0x2346e  OR ECX,0x1
0x23471  MOV byte ptr [R15 + 0x321],CL
0x23478  MOV EDI,dword ptr [RDX + 0x4]
0x2347b  CMP EDI,0x7
0x2347e  JBE 0x233af
<L0> (entry=0x2346b):
	instruction(0x2346b)
	CF = 0x0:1
	OF = 0x0:1
	ECX = ECX & 0xfffffffc:4
	RCX = zext(ECX)
	SF = ECX s< 0x0:4
	ZF = ECX == 0x0:4
	$U1:4 = ECX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2346e)
	CF = 0x0:1
	OF = 0x0:1
	ECX = ECX | 0x1:4
	RCX = zext(ECX)
	SF = ECX s< 0x0:4
	ZF = ECX == 0x0:4
	$U1:4 = ECX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x23471)
	$U1:8 = R15 + 0x321:8
	$U2:1 = CL
	ram[$U1:8] = $U2:1
	instruction(0x23478)
	$U1:8 = RDX + 0x4:8
	EDI = ram[$U1:8]
	RDI = zext(EDI)
	instruction(0x2347b)
	CF = EDI < 0x7:4
	OF = EDI sborrow 0x7:4
	$U1:4 = EDI - 0x7:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2347e)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x233af:8

0x23898  MOV RSI,RDI
0x2389b  SUB RSI,RAX
0x2389e  CMP RSI,0xf
0x238a2  JBE 0x23878
<L0> (entry=0x23898):
	instruction(0x23898)
	RSI = RDI
	instruction(0x2389b)
	CF = RSI < RAX
	OF = RSI sborrow RAX
	RSI = RSI - RAX
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2389e)
	CF = RSI < 0xf:8
	OF = RSI sborrow 0xf:8
	$U1:8 = RSI - 0xf:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x238a2)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x23878:8

0x236c3  CMP RSI,R11
0x236c6  JZ 0x236d3
<L0> (entry=0x236c3):
	instruction(0x236c3)
	CF = RSI < R11
	OF = RSI sborrow R11
	$U1:8 = RSI - R11
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x236c6)
	if ZF jump 0x236d3:8

0x2829a  JA 0x282a3
<L0> (entry=0x2829a):
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x282a3:8

0x10598  CMP AL,0xa
0x1059a  JZ 0x105d8
<L0> (entry=0x10598):
	instruction(0x10598)
	CF = AL < 0xa:1
	OF = AL sborrow 0xa:1
	$U1:1 = AL - 0xa:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1059a)
	if ZF jump 0x105d8:8

0x1f278  SUB RAX,RBP
0x1f27b  MOV EDX,dword ptr [RBX + 0x18]
0x1f27e  MOV qword ptr [RBX + 0x8],RAX
0x1f282  MOV ECX,EDX
0x1f284  SHR ECX,0x1
0x1f286  AND EDX,0x1
0x1f289  MOV dword ptr [RBX + 0x18],ECX
0x1f28c  JZ 0x1f22d
<L0> (entry=0x1f278):
	instruction(0x1f278)
	CF = RAX < RBP
	OF = RAX sborrow RBP
	RAX = RAX - RBP
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1f27b)
	$U1:8 = RBX + 0x18:8
	EDX = ram[$U1:8]
	RDX = zext(EDX)
	instruction(0x1f27e)
	$U1:8 = RBX + 0x8:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1f282)
	ECX = EDX
	RCX = zext(ECX)
	instruction(0x1f284)
	$U1:4 = ECX & 0x1:4
	CF = $U1:4 != 0x0:4
	OF = 0x0:1
	ECX = ECX >> 0x1:8
	RCX = zext(ECX)
	SF = ECX s< 0x0:4
	ZF = ECX == 0x0:4
	$U2:4 = ECX & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1f286)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX & 0x1:4
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1f289)
	$U1:8 = RBX + 0x18:8
	$U2:4 = ECX
	ram[$U1:8] = $U2:4
	instruction(0x1f28c)
	if ZF jump 0x1f22d:8

0x1a010  PUSH R15
0x1a012  PUSH R14
0x1a014  PUSH R13
0x1a016  PUSH R12
0x1a018  PUSH RBP
0x1a019  PUSH RBX
0x1a01a  SUB RSP,0xa0
0x1a021  MOV EBX,dword ptr [0x3abac]
0x1a027  MOV R11D,dword ptr [0x3ab6c]
0x1a02e  MOV R8D,dword ptr [0x3ab8c]
0x1a035  MOV R14D,dword ptr [0x3ab70]
0x1a03c  MOV dword ptr [RSP + -0x70],EBX
0x1a040  AND EBX,0x200161
0x1a046  MOV ECX,R11D
0x1a049  MOV EAX,R11D
0x1a04c  OR EBX,dword ptr [0x3abbc]
0x1a052  MOV R13D,dword ptr [0x3ab88]
0x1a059  AND EAX,0x2d82203
0x1a05e  AND ECX,0x8000000
0x1a064  MOV R15D,EBX
0x1a067  MOV dword ptr [RSP + -0x6c],EBX
0x1a06b  MOV EBX,dword ptr [0x3abb0]
0x1a071  MOV EDX,R8D
0x1a074  OR EAX,dword ptr [0x3ab7c]
0x1a07a  MOV ESI,R11D
0x1a07d  AND EDX,0x10
0x1a080  MOV R9D,R14D
0x1a083  AND EBX,0x8000000
0x1a089  MOVD XMM0, R15D
0x1a08e  OR EAX,ECX
0x1a090  MOV EDI,R13D
0x1a093  OR EBX,dword ptr [0x3abc0]
0x1a099  AND ESI,0x40000000
0x1a09f  MOV dword ptr [RSP + -0x74],EDX
0x1a0a3  AND R9D,0x17888110
0x1a0aa  MOV R10D,dword ptr [0x3ab90]
0x1a0b1  MOV R15D,dword ptr [0x3ac24]
0x1a0b8  MOVD XMM1, EBX
0x1a0bc  OR ESI,EAX
0x1a0be  MOV EBX,dword ptr [0x3ac08]
0x1a0c4  OR R9D,dword ptr [0x3ab80]
0x1a0cb  MOV EAX,R8D
0x1a0ce  PUNPCKLDQ XMM0, XMM1
0x1a0d2  AND EDI,0x218c0318
0x1a0d8  MOV EDX,R10D
0x1a0db  OR EDI,dword ptr [0x3ab98]
0x1a0e1  MOV dword ptr [0x3ab80],R9D
0x1a0e8  AND EBX,0x200
0x1a0ee  OR dword ptr [0x3ac18],EBX
0x1a0f4  MOV EBX,R15D
0x1a0f7  AND EAX,0x1a400131
0x1a0fc  MOV dword ptr [0x3ab98],EDI
0x1a102  OR EAX,dword ptr [0x3ab9c]
0x1a108  AND EDX,0x14810
0x1a10e  AND EBX,0x1c00
0x1a114  MOV dword ptr [0x3ab7c],ESI
0x1a11a  OR EDX,dword ptr [0x3aba0]
0x1a120  MOVQ qword ptr [0x3abbc], XMM0
0x1a128  OR EBX,dword ptr [0x3ac34]
0x1a12e  MOV EBP,dword ptr [0x3ac68]
0x1a134  MOV dword ptr [0x3ac34],EBX
0x1a13a  AND EBP,0x10
0x1a13d  OR dword ptr [0x3ac78],EBP
0x1a143  TEST R10D,0x800
0x1a14a  JNZ 0x1a15d
<L0> (entry=0x1a010):
	instruction(0x1a010)
	$U1:8 = R15
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1a012)
	$U1:8 = R14
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1a014)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1a016)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1a018)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1a019)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1a01a)
	CF = RSP < 0xa0:8
	OF = RSP sborrow 0xa0:8
	RSP = RSP - 0xa0:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a021)
	EBX = ram[0x3abac:8]
	RBX = zext(EBX)
	instruction(0x1a027)
	R11D = ram[0x3ab6c:8]
	R11 = zext(R11D)
	instruction(0x1a02e)
	R8D = ram[0x3ab8c:8]
	R8 = zext(R8D)
	instruction(0x1a035)
	R14D = ram[0x3ab70:8]
	R14 = zext(R14D)
	instruction(0x1a03c)
	$U1:8 = 0xffffffffffffff90:8 + RSP
	$U2:4 = EBX
	ram[$U1:8] = $U2:4
	instruction(0x1a040)
	CF = 0x0:1
	OF = 0x0:1
	EBX = EBX & 0x200161:4
	RBX = zext(EBX)
	SF = EBX s< 0x0:4
	ZF = EBX == 0x0:4
	$U1:4 = EBX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a046)
	ECX = R11D
	RCX = zext(ECX)
	instruction(0x1a049)
	EAX = R11D
	RAX = zext(EAX)
	instruction(0x1a04c)
	CF = 0x0:1
	OF = 0x0:1
	$U4:4 = ram[0x3abbc:8]
	EBX = EBX | $U4:4
	RBX = zext(EBX)
	SF = EBX s< 0x0:4
	ZF = EBX == 0x0:4
	$U1:4 = EBX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a052)
	R13D = ram[0x3ab88:8]
	R13 = zext(R13D)
	instruction(0x1a059)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX & 0x2d82203:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a05e)
	CF = 0x0:1
	OF = 0x0:1
	ECX = ECX & 0x8000000:4
	RCX = zext(ECX)
	SF = ECX s< 0x0:4
	ZF = ECX == 0x0:4
	$U1:4 = ECX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a064)
	R15D = EBX
	R15 = zext(R15D)
	instruction(0x1a067)
	$U1:8 = 0xffffffffffffff94:8 + RSP
	$U2:4 = EBX
	ram[$U1:8] = $U2:4
	instruction(0x1a06b)
	EBX = ram[0x3abb0:8]
	RBX = zext(EBX)
	instruction(0x1a071)
	EDX = R8D
	RDX = zext(EDX)
	instruction(0x1a074)
	CF = 0x0:1
	OF = 0x0:1
	$U4:4 = ram[0x3ab7c:8]
	EAX = EAX | $U4:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a07a)
	ESI = R11D
	RSI = zext(ESI)
	instruction(0x1a07d)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX & 0x10:4
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a080)
	R9D = R14D
	R9 = zext(R9D)
	instruction(0x1a083)
	CF = 0x0:1
	OF = 0x0:1
	EBX = EBX & 0x8000000:4
	RBX = zext(EBX)
	SF = EBX s< 0x0:4
	ZF = EBX == 0x0:4
	$U1:4 = EBX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a089)
	XMM0 = zext(R15D)
	instruction(0x1a08e)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX | ECX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a090)
	EDI = R13D
	RDI = zext(EDI)
	instruction(0x1a093)
	CF = 0x0:1
	OF = 0x0:1
	$U4:4 = ram[0x3abc0:8]
	EBX = EBX | $U4:4
	RBX = zext(EBX)
	SF = EBX s< 0x0:4
	ZF = EBX == 0x0:4
	$U1:4 = EBX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a099)
	CF = 0x0:1
	OF = 0x0:1
	ESI = ESI & 0x40000000:4
	RSI = zext(ESI)
	SF = ESI s< 0x0:4
	ZF = ESI == 0x0:4
	$U1:4 = ESI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a09f)
	$U1:8 = 0xffffffffffffff8c:8 + RSP
	$U2:4 = EDX
	ram[$U1:8] = $U2:4
	instruction(0x1a0a3)
	CF = 0x0:1
	OF = 0x0:1
	R9D = R9D & 0x17888110:4
	R9 = zext(R9D)
	SF = R9D s< 0x0:4
	ZF = R9D == 0x0:4
	$U1:4 = R9D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a0aa)
	R10D = ram[0x3ab90:8]
	R10 = zext(R10D)
	instruction(0x1a0b1)
	R15D = ram[0x3ac24:8]
	R15 = zext(R15D)
	instruction(0x1a0b8)
	XMM1 = zext(EBX)
	instruction(0x1a0bc)
	CF = 0x0:1
	OF = 0x0:1
	ESI = ESI | EAX
	RSI = zext(ESI)
	SF = ESI s< 0x0:4
	ZF = ESI == 0x0:4
	$U1:4 = ESI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a0be)
	EBX = ram[0x3ac08:8]
	RBX = zext(EBX)
	instruction(0x1a0c4)
	CF = 0x0:1
	OF = 0x0:1
	$U4:4 = ram[0x3ab80:8]
	R9D = R9D | $U4:4
	R9 = zext(R9D)
	SF = R9D s< 0x0:4
	ZF = R9D == 0x0:4
	$U1:4 = R9D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a0cb)
	EAX = R8D
	RAX = zext(EAX)
	instruction(0x1a0ce)
	XMM0_Dd = XMM1_Db
	XMM0_Dc = XMM0_Db
	XMM0_Db = XMM1_Da
	instruction(0x1a0d2)
	CF = 0x0:1
	OF = 0x0:1
	EDI = EDI & 0x218c0318:4
	RDI = zext(EDI)
	SF = EDI s< 0x0:4
	ZF = EDI == 0x0:4
	$U1:4 = EDI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a0d8)
	EDX = R10D
	RDX = zext(EDX)
	instruction(0x1a0db)
	CF = 0x0:1
	OF = 0x0:1
	$U4:4 = ram[0x3ab98:8]
	EDI = EDI | $U4:4
	RDI = zext(EDI)
	SF = EDI s< 0x0:4
	ZF = EDI == 0x0:4
	$U1:4 = EDI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a0e1)
	$U1:4 = R9D
	ram[0x3ab80:8] = $U1:4
	instruction(0x1a0e8)
	CF = 0x0:1
	OF = 0x0:1
	EBX = EBX & 0x200:4
	RBX = zext(EBX)
	SF = EBX s< 0x0:4
	ZF = EBX == 0x0:4
	$U1:4 = EBX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a0ee)
	CF = 0x0:1
	OF = 0x0:1
	$U4:4 = ram[0x3ac18:8]
	$U5:4 = $U4:4 | EBX
	ram[0x3ac18:8] = $U5:4
	$U6:4 = ram[0x3ac18:8]
	SF = $U6:4 s< 0x0:4
	$U7:4 = ram[0x3ac18:8]
	ZF = $U7:4 == 0x0:4
	$U8:4 = ram[0x3ac18:8]
	$U1:4 = $U8:4 & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a0f4)
	EBX = R15D
	RBX = zext(EBX)
	instruction(0x1a0f7)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX & 0x1a400131:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a0fc)
	$U1:4 = EDI
	ram[0x3ab98:8] = $U1:4
	instruction(0x1a102)
	CF = 0x0:1
	OF = 0x0:1
	$U4:4 = ram[0x3ab9c:8]
	EAX = EAX | $U4:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a108)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX & 0x14810:4
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a10e)
	CF = 0x0:1
	OF = 0x0:1
	EBX = EBX & 0x1c00:4
	RBX = zext(EBX)
	SF = EBX s< 0x0:4
	ZF = EBX == 0x0:4
	$U1:4 = EBX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a114)
	$U1:4 = ESI
	ram[0x3ab7c:8] = $U1:4
	instruction(0x1a11a)
	CF = 0x0:1
	OF = 0x0:1
	$U4:4 = ram[0x3aba0:8]
	EDX = EDX | $U4:4
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a120)
	$U1:8 = XMM0_Qa
	ram[0x3abbc:8] = $U1:8
	instruction(0x1a128)
	CF = 0x0:1
	OF = 0x0:1
	$U4:4 = ram[0x3ac34:8]
	EBX = EBX | $U4:4
	RBX = zext(EBX)
	SF = EBX s< 0x0:4
	ZF = EBX == 0x0:4
	$U1:4 = EBX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a12e)
	EBP = ram[0x3ac68:8]
	RBP = zext(EBP)
	instruction(0x1a134)
	$U1:4 = EBX
	ram[0x3ac34:8] = $U1:4
	instruction(0x1a13a)
	CF = 0x0:1
	OF = 0x0:1
	EBP = EBP & 0x10:4
	RBP = zext(EBP)
	SF = EBP s< 0x0:4
	ZF = EBP == 0x0:4
	$U1:4 = EBP & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a13d)
	CF = 0x0:1
	OF = 0x0:1
	$U4:4 = ram[0x3ac78:8]
	$U5:4 = $U4:4 | EBP
	ram[0x3ac78:8] = $U5:4
	$U6:4 = ram[0x3ac78:8]
	SF = $U6:4 s< 0x0:4
	$U7:4 = ram[0x3ac78:8]
	ZF = $U7:4 == 0x0:4
	$U8:4 = ram[0x3ac78:8]
	$U1:4 = $U8:4 & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1a143)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = R10D & 0x800:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1a14a)
	$U1:1 = !ZF
	if $U1:1 jump 0x1a15d:8

0x7c1d  MOV ESI,dword ptr [R12 + 0x10]
0x7c22  MOV EAX,dword ptr [R12 + 0x14]
0x7c27  MOV ECX,dword ptr [R12 + 0x18]
0x7c2c  MOV EDX,dword ptr [R12 + 0x1c]
0x7c31  TEST ESI,ESI
0x7c33  JNZ 0x7a30
<L0> (entry=0x7c1d):
	instruction(0x7c1d)
	$U1:8 = 0x10:8 + R12
	ESI = ram[$U1:8]
	RSI = zext(ESI)
	instruction(0x7c22)
	$U1:8 = 0x14:8 + R12
	EAX = ram[$U1:8]
	RAX = zext(EAX)
	instruction(0x7c27)
	$U1:8 = 0x18:8 + R12
	ECX = ram[$U1:8]
	RCX = zext(ECX)
	instruction(0x7c2c)
	$U1:8 = 0x1c:8 + R12
	EDX = ram[$U1:8]
	RDX = zext(EDX)
	instruction(0x7c31)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = ESI & ESI
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7c33)
	$U1:1 = !ZF
	if $U1:1 jump 0x7a30:8

0x2324f  MOV RAX,qword ptr [RBP + -0x268]
0x23256  XOR ESI,ESI
0x23258  MOV RDI,R15
0x2325b  MOV qword ptr [R15 + 0x2a8],RAX
0x23262  MOVZX EAX,word ptr [RBP + -0x288]
0x23269  MOV word ptr [R15 + 0x2b8],AX
0x23271  MOV RAX,qword ptr [RBP + -0x280]
0x23278  MOV RAX,qword ptr [RAX]
0x2327b  MOV qword ptr [R15 + 0x2b0],RAX
0x23282  CALL 0xe8f0
<L0> (entry=0x2324f):
	instruction(0x2324f)
	$U1:8 = RBP + 0xfffffffffffffd98:8
	RAX = ram[$U1:8]
	instruction(0x23256)
	CF = 0x0:1
	OF = 0x0:1
	ESI = ESI ^ ESI
	RSI = zext(ESI)
	SF = ESI s< 0x0:4
	ZF = ESI == 0x0:4
	$U1:4 = ESI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x23258)
	RDI = R15
	instruction(0x2325b)
	$U1:8 = R15 + 0x2a8:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x23262)
	$U1:8 = RBP + 0xfffffffffffffd78:8
	$U2:2 = ram[$U1:8]
	EAX = zext($U2:2)
	RAX = zext(EAX)
	instruction(0x23269)
	$U1:8 = R15 + 0x2b8:8
	$U2:2 = AX
	ram[$U1:8] = $U2:2
	instruction(0x23271)
	$U1:8 = RBP + 0xfffffffffffffd80:8
	RAX = ram[$U1:8]
	instruction(0x23278)
	RAX = ram[RAX]
	instruction(0x2327b)
	$U1:8 = R15 + 0x2b0:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x23282)
	$U1:8 = 0x23287:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0xe8f0:8

0x7ff0  AND EDX,0x4000000
0x7ff6  LEA RAX,[RSP + 0xf]
0x7ffb  MOV dword ptr [RBP + -0xf8],0x0
0x8005  MOV dword ptr [RBP + -0xf4],EDX
0x800b  AND RAX,-0x10
0x800f  MOV qword ptr [RBP + -0x118],0x0
0x801a  MOV R14,RAX
0x801d  NOP dword ptr [RAX]
0x8020  MOV RAX,qword ptr [RBP + -0xf0]
0x8027  MOV RBX,qword ptr [RAX]
0x802a  LEA RAX,[0x3aae0]
0x8031  MOV EAX,dword ptr [RAX]
0x8033  MOV R8D,EAX
0x8036  MOV dword ptr [RBP + -0xc8],EAX
0x803c  AND R8D,0x1
0x8040  JNZ 0x8358
<L0> (entry=0x7ff0):
	instruction(0x7ff0)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX & 0x4000000:4
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7ff6)
	$U1:8 = 0xf:8 + RSP
	RAX = $U1:8
	instruction(0x7ffb)
	$U1:8 = RBP + 0xffffffffffffff08:8
	$U2:4 = 0x0:4
	ram[$U1:8] = $U2:4
	instruction(0x8005)
	$U1:8 = RBP + 0xffffffffffffff0c:8
	$U2:4 = EDX
	ram[$U1:8] = $U2:4
	instruction(0x800b)
	CF = 0x0:1
	OF = 0x0:1
	RAX = RAX & 0xfffffffffffffff0:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x800f)
	$U1:8 = RBP + 0xfffffffffffffee8:8
	$U2:8 = 0x0:8
	ram[$U1:8] = $U2:8
	instruction(0x801a)
	R14 = RAX
	instruction(0x801d)
	instruction(0x8020)
	$U1:8 = RBP + 0xffffffffffffff10:8
	RAX = ram[$U1:8]
	instruction(0x8027)
	RBX = ram[RAX]
	instruction(0x802a)
	RAX = 0x3aae0:8
	instruction(0x8031)
	EAX = ram[RAX]
	RAX = zext(EAX)
	instruction(0x8033)
	R8D = EAX
	R8 = zext(R8D)
	instruction(0x8036)
	$U1:8 = RBP + 0xffffffffffffff38:8
	$U2:4 = EAX
	ram[$U1:8] = $U2:4
	instruction(0x803c)
	CF = 0x0:1
	OF = 0x0:1
	R8D = R8D & 0x1:4
	R8 = zext(R8D)
	SF = R8D s< 0x0:4
	ZF = R8D == 0x0:4
	$U1:4 = R8D & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x8040)
	$U1:1 = !ZF
	if $U1:1 jump 0x8358:8

0x5297  MOV RDX,qword ptr [RBX]
0x529a  LEA RCX,[0x3b040]
0x52a1  MOV ESI,R12D
0x52a4  MOV RDI,RBX
0x52a7  MOV RAX,qword ptr [RDX + 0x30]
0x52ab  LEA RAX,[RAX + RAX*0x4]
0x52af  SHL RAX,0x5
0x52b3  CMP qword ptr [RCX + RAX*0x1 + 0x20],RDX
0x52b8  SETNZ DL
0x52bb  XOR ECX,ECX
0x52bd  MOVZX EDX,DL
0x52c0  CALL 0x14730
<L0> (entry=0x5297):
	instruction(0x5297)
	RDX = ram[RBX]
	instruction(0x529a)
	RCX = 0x3b040:8
	instruction(0x52a1)
	ESI = R12D
	RSI = zext(ESI)
	instruction(0x52a4)
	RDI = RBX
	instruction(0x52a7)
	$U1:8 = RDX + 0x30:8
	RAX = ram[$U1:8]
	instruction(0x52ab)
	$U2:8 = RAX * 0x4:8
	$U1:8 = RAX + $U2:8
	RAX = $U1:8
	instruction(0x52af)
	$U1:8 = 0x5:8 & 0x3f:8
	$U2:8 = RAX
	RAX = RAX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RAX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RAX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RAX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RAX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x52b3)
	$U6:8 = 0x20:8 + RCX
	$U7:8 = RAX * 0x1:8
	$U5:8 = $U6:8 + $U7:8
	$U8:8 = ram[$U5:8]
	CF = $U8:8 < RDX
	$U9:8 = ram[$U5:8]
	OF = $U9:8 sborrow RDX
	$U10:8 = ram[$U5:8]
	$U1:8 = $U10:8 - RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x52b8)
	$U1:1 = !ZF
	DL = $U1:1
	instruction(0x52bb)
	CF = 0x0:1
	OF = 0x0:1
	ECX = ECX ^ ECX
	RCX = zext(ECX)
	SF = ECX s< 0x0:4
	ZF = ECX == 0x0:4
	$U1:4 = ECX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x52bd)
	EDX = zext(DL)
	RDX = zext(EDX)
	instruction(0x52c0)
	$U1:8 = 0x52c5:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x14730:8

0x240c7  MOV qword ptr [0x3adf8],RAX
0x240ce  CALL 0x20a40
<L0> (entry=0x240c7):
	instruction(0x240c7)
	$U1:8 = RAX
	ram[0x3adf8:8] = $U1:8
	instruction(0x240ce)
	$U1:8 = 0x240d3:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x20a40:8

0x14a9d  CMP R11,qword ptr [RBP + -0x40]
0x14aa1  JNZ 0x14a78
<L0> (entry=0x14a9d):
	instruction(0x14a9d)
	$U5:8 = RBP + 0xffffffffffffffc0:8
	$U6:8 = ram[$U5:8]
	CF = R11 < $U6:8
	$U7:8 = ram[$U5:8]
	OF = R11 sborrow $U7:8
	$U8:8 = ram[$U5:8]
	$U1:8 = R11 - $U8:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x14aa1)
	$U1:1 = !ZF
	if $U1:1 jump 0x14a78:8

0x8091  CMP dword ptr [R12 + RBX*0x4 + 0x24],0x1
0x8097  JZ 0x8238
<L0> (entry=0x8091):
	instruction(0x8091)
	$U6:8 = 0x24:8 + R12
	$U7:8 = RBX * 0x4:8
	$U5:8 = $U6:8 + $U7:8
	$U8:4 = ram[$U5:8]
	CF = $U8:4 < 0x1:4
	$U9:4 = ram[$U5:8]
	OF = $U9:4 sborrow 0x1:4
	$U10:4 = ram[$U5:8]
	$U1:4 = $U10:4 - 0x1:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x8097)
	if ZF jump 0x8238:8

0x1acbd  MOV RAX,-0x10000000000081
0x1acc7  AND qword ptr [0x3ab9c],RAX
0x1acce  ADD RSP,0xd8
0x1acd5  POP RBX
0x1acd6  POP RBP
0x1acd7  POP R12
0x1acd9  POP R13
0x1acdb  POP R14
0x1acdd  POP R15
0x1acdf  RET
<L0> (entry=0x1acbd):
	instruction(0x1acbd)
	RAX = 0xffefffffffffff7f:8
	instruction(0x1acc7)
	CF = 0x0:1
	OF = 0x0:1
	$U4:8 = ram[0x3ab9c:8]
	$U5:8 = $U4:8 & RAX
	ram[0x3ab9c:8] = $U5:8
	$U6:8 = ram[0x3ab9c:8]
	SF = $U6:8 s< 0x0:8
	$U7:8 = ram[0x3ab9c:8]
	ZF = $U7:8 == 0x0:8
	$U8:8 = ram[0x3ab9c:8]
	$U1:8 = $U8:8 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1acce)
	CF = RSP carry 0xd8:8
	OF = RSP scarry 0xd8:8
	RSP = RSP + 0xd8:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1acd5)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0x1acd6)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBP = $U1:8
	instruction(0x1acd7)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R12 = $U1:8
	instruction(0x1acd9)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R13 = $U1:8
	instruction(0x1acdb)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R14 = $U1:8
	instruction(0x1acdd)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R15 = $U1:8
	instruction(0x1acdf)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x2335c  CMP ECX,0x6474e552
0x23362  JNZ 0x23380
<L0> (entry=0x2335c):
	instruction(0x2335c)
	CF = ECX < 0x6474e552:4
	OF = ECX sborrow 0x6474e552:4
	$U1:4 = ECX - 0x6474e552:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x23362)
	$U1:1 = !ZF
	if $U1:1 jump 0x23380:8

0x1abf2  MOV EAX,dword ptr [0x3ab7c]
0x1abf8  TEST EAX,0x8000000
0x1abfd  JZ 0x1ad48
<L0> (entry=0x1abf2):
	instruction(0x1abf2)
	EAX = ram[0x3ab7c:8]
	RAX = zext(EAX)
	instruction(0x1abf8)
	CF = 0x0:1
	OF = 0x0:1
	$U1:4 = EAX & 0x8000000:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1abfd)
	if ZF jump 0x1ad48:8

0x223ec  CMP R14,0x12
0x223f0  JZ 0x22490
<L0> (entry=0x223ec):
	instruction(0x223ec)
	CF = R14 < 0x12:8
	OF = R14 sborrow 0x12:8
	$U1:8 = R14 - 0x12:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x223f0)
	if ZF jump 0x22490:8

0x221a6  ADD qword ptr [RAX + 0x8],R12
0x221aa  MOV RAX,qword ptr [0x3bd90]
0x221b1  TEST RAX,RAX
0x221b4  JZ 0x221ba
<L0> (entry=0x221a6):
	instruction(0x221a6)
	$U4:8 = RAX + 0x8:8
	$U5:8 = ram[$U4:8]
	CF = $U5:8 carry R12
	$U6:8 = ram[$U4:8]
	OF = $U6:8 scarry R12
	$U7:8 = ram[$U4:8]
	$U8:8 = $U7:8 + R12
	ram[$U4:8] = $U8:8
	$U9:8 = ram[$U4:8]
	SF = $U9:8 s< 0x0:8
	$U10:8 = ram[$U4:8]
	ZF = $U10:8 == 0x0:8
	$U11:8 = ram[$U4:8]
	$U1:8 = $U11:8 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x221aa)
	RAX = ram[0x3bd90:8]
	instruction(0x221b1)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x221b4)
	if ZF jump 0x221ba:8

0x221d1  MOV RCX,qword ptr [0x3bb68]
0x221d8  TEST RCX,RCX
0x221db  JZ 0x221ef
<L0> (entry=0x221d1):
	instruction(0x221d1)
	RCX = ram[0x3bb68:8]
	instruction(0x221d8)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RCX & RCX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x221db)
	if ZF jump 0x221ef:8

0xe514  JMP qword ptr [0x3aa60]
<L0> (entry=0xe514):
	$U1:8 = ram[0x3aa60:8]
	jump $U1:8

0x23340  MOVSXD RCX,dword ptr [RDX + RCX*0x4]
0x23344  ADD RCX,RDX
0x23347  JMP RCX
<L0> (entry=0x23340):
	instruction(0x23340)
	$U2:8 = RCX * 0x4:8
	$U1:8 = RDX + $U2:8
	$U3:4 = ram[$U1:8]
	RCX = sext($U3:4)
	instruction(0x23344)
	CF = RCX carry RDX
	OF = RCX scarry RDX
	RCX = RCX + RDX
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x23347)
	jump RCX

0x1eab5  MOV RAX,qword ptr [RBP + -0x58]
0x1eab9  MOV RCX,qword ptr [RBP + -0xb8]
0x1eac0  MOV qword ptr [RBX + 0x10],R14
0x1eac4  LEA R12,[RAX + RCX*0x1 + -0x10]
0x1eac9  MOV EAX,dword ptr [RBP + -0xa0]
0x1eacf  LEA ECX,[RAX + -0x1]
0x1ead2  MOV EAX,0x1
0x1ead7  SHL EAX,CL
0x1ead9  CMP qword ptr [RBP + -0x80],0x2
0x1eade  MOV dword ptr [RBP + -0x8c],ECX
0x1eae4  MOV dword ptr [RBP + -0x88],EAX
0x1eaea  JZ 0x1ee48
<L0> (entry=0x1eab5):
	instruction(0x1eab5)
	$U1:8 = RBP + 0xffffffffffffffa8:8
	RAX = ram[$U1:8]
	instruction(0x1eab9)
	$U1:8 = RBP + 0xffffffffffffff48:8
	RCX = ram[$U1:8]
	instruction(0x1eac0)
	$U1:8 = RBX + 0x10:8
	$U2:8 = R14
	ram[$U1:8] = $U2:8
	instruction(0x1eac4)
	$U2:8 = 0xfffffffffffffff0:8 + RAX
	$U3:8 = RCX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	R12 = $U1:8
	instruction(0x1eac9)
	$U1:8 = RBP + 0xffffffffffffff60:8
	EAX = ram[$U1:8]
	RAX = zext(EAX)
	instruction(0x1eacf)
	$U1:8 = RAX + 0xffffffffffffffff:8
	ECX = $U1:4
	RCX = zext(ECX)
	instruction(0x1ead2)
	RAX = 0x1:8
	instruction(0x1ead7)
	$U1:1 = CL & 0x1f:1
	$U2:4 = EAX
	EAX = EAX << $U1:1
	RAX = zext(EAX)
	$U3:1 = $U1:1 != 0x0:1
	$U5:1 = $U1:1 - 0x1:1
	$U6:4 = $U2:4 << $U5:1
	$U4:1 = $U6:4 s< 0x0:4
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:1 == 0x1:1
	$U12:1 = EAX s< 0x0:4
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:1 != 0x0:1
	$U17:1 = EAX s< 0x0:4
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = EAX == 0x0:4
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:4 = EAX & 0xff:4
	$U27:1 = count_ones($U26:4)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1ead9)
	$U5:8 = RBP + 0xffffffffffffff80:8
	$U6:8 = ram[$U5:8]
	CF = $U6:8 < 0x2:8
	$U7:8 = ram[$U5:8]
	OF = $U7:8 sborrow 0x2:8
	$U8:8 = ram[$U5:8]
	$U1:8 = $U8:8 - 0x2:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1eade)
	$U1:8 = RBP + 0xffffffffffffff74:8
	$U2:4 = ECX
	ram[$U1:8] = $U2:4
	instruction(0x1eae4)
	$U1:8 = RBP + 0xffffffffffffff78:8
	$U2:4 = EAX
	ram[$U1:8] = $U2:4
	instruction(0x1eaea)
	if ZF jump 0x1ee48:8

0xb648  ADD RAX,0x1
0xb64c  MOV qword ptr [RSP + 0x40],RAX
0xb651  TEST byte ptr [0x3aae0],0x1
0xb658  JNZ 0xbc08
<L0> (entry=0xb648):
	instruction(0xb648)
	CF = RAX carry 0x1:8
	OF = RAX scarry 0x1:8
	RAX = RAX + 0x1:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0xb64c)
	$U1:8 = 0x40:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0xb651)
	CF = 0x0:1
	OF = 0x0:1
	$U5:1 = ram[0x3aae0:8]
	$U1:1 = $U5:1 & 0x1:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb658)
	$U1:1 = !ZF
	if $U1:1 jump 0xbc08:8

0x19ff9  MOV RAX,-0x1
0x1a000  RET
<L0> (entry=0x19ff9):
	instruction(0x19ff9)
	RAX = 0xffffffffffffffff:8
	instruction(0x1a000)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x20548  TEST R8B,R8B
0x2054b  JZ 0x20559
<L0> (entry=0x20548):
	instruction(0x20548)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = R8B & R8B
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2054b)
	if ZF jump 0x20559:8

0x1f00c  RET
<L0> (entry=0x1f00c):
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x2c1c8  MOVUPS xmmword ptr [RDI + RDX*0x1 + -0x10], XMM0
0x2c1cd  MOVUPS xmmword ptr [RDI], XMM0
0x2c1d0  RET
<L0> (entry=0x2c1c8):
	instruction(0x2c1c8)
	$U2:8 = 0xfffffffffffffff0:8 + RDI
	$U3:8 = RDX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	$U4:16 = XMM0
	ram[$U1:8] = $U4:16
	instruction(0x2c1cd)
	$U1:16 = XMM0
	ram[RDI] = $U1:16
	instruction(0x2c1d0)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x1a7f6  MOVD XMM3, EAX
0x1a7fa  MOV EAX,dword ptr [0x3ab70]
0x1a800  MOVD XMM0, R10D
0x1a805  PUNPCKLDQ XMM0, XMM3
0x1a809  TEST AH,0x1
0x1a80c  JZ 0x1a815
<L0> (entry=0x1a7f6):
	instruction(0x1a7f6)
	XMM3 = zext(EAX)
	instruction(0x1a7fa)
	EAX = ram[0x3ab70:8]
	RAX = zext(EAX)
	instruction(0x1a800)
	XMM0 = zext(R10D)
	instruction(0x1a805)
	XMM0_Dd = XMM3_Db
	XMM0_Dc = XMM0_Db
	XMM0_Db = XMM3_Da
	instruction(0x1a809)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = AH & 0x1:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1a80c)
	if ZF jump 0x1a815:8

0x983f  LEA RAX,[0x2d038]
0x9846  CMP RAX,R12
0x9849  JZ 0x98b0
<L0> (entry=0x983f):
	instruction(0x983f)
	RAX = 0x2d038:8
	instruction(0x9846)
	CF = RAX < R12
	OF = RAX sborrow R12
	$U1:8 = RAX - R12
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x9849)
	if ZF jump 0x98b0:8

0x1b43a  TEST byte ptr [0x3ab8b],0x8
0x1b441  JNZ 0x1b488
<L0> (entry=0x1b43a):
	instruction(0x1b43a)
	CF = 0x0:1
	OF = 0x0:1
	$U5:1 = ram[0x3ab8b:8]
	$U1:1 = $U5:1 & 0x8:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1b441)
	$U1:1 = !ZF
	if $U1:1 jump 0x1b488:8

0x2ba7e  AND RAX,-0x10
0x2ba82  PCMPEQB XMM1, xmmword ptr [RAX + 0x10]
0x2ba87  PCMPEQB XMM2, xmmword ptr [RAX + 0x20]
0x2ba8c  PCMPEQB XMM3, xmmword ptr [RAX + 0x30]
0x2ba91  PMOVMSKB EDX, XMM1
0x2ba95  PMOVMSKB R8D, XMM2
0x2ba9a  PMOVMSKB ECX, XMM3
0x2ba9e  SHL RDX,0x10
0x2baa2  SHL RCX,0x10
0x2baa6  OR RCX,R8
0x2baa9  SHL RCX,0x20
0x2baad  OR RDX,RCX
0x2bab0  MOV RCX,RDI
0x2bab3  XOR RCX,RAX
0x2bab6  AND RAX,-0x40
0x2baba  SAR RDX,CL
0x2babd  TEST RDX,RDX
0x2bac0  JZ 0x2bb40
<L0> (entry=0x2ba7e):
	instruction(0x2ba7e)
	CF = 0x0:1
	OF = 0x0:1
	RAX = RAX & 0xfffffffffffffff0:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2ba82)
	$U18:8 = RAX + 0x10:8
	$U1:16 = ram[$U18:8]
	$U2:1 = XMM1_Ba == $U1:1
	XMM1_Ba = $U2:1 * 0xff:1
	$U3:1 = XMM1_Bb == $U1[1]:1
	XMM1_Bb = $U3:1 * 0xff:1
	$U4:1 = XMM1_Bc == $U1[2]:1
	XMM1_Bc = $U4:1 * 0xff:1
	$U5:1 = XMM1_Bd == $U1[3]:1
	XMM1_Bd = $U5:1 * 0xff:1
	$U6:1 = XMM1_Be == $U1[4]:1
	XMM1_Be = $U6:1 * 0xff:1
	$U7:1 = XMM1_Bf == $U1[5]:1
	XMM1_Bf = $U7:1 * 0xff:1
	$U8:1 = XMM1_Bg == $U1[6]:1
	XMM1_Bg = $U8:1 * 0xff:1
	$U9:1 = XMM1_Bh == $U1[7]:1
	XMM1_Bh = $U9:1 * 0xff:1
	$U10:1 = XMM1_Bi == $U1[8]:1
	XMM1_Bi = $U10:1 * 0xff:1
	$U11:1 = XMM1_Bj == $U1[9]:1
	XMM1_Bj = $U11:1 * 0xff:1
	$U12:1 = XMM1_Bk == $U1[10]:1
	XMM1_Bk = $U12:1 * 0xff:1
	$U13:1 = XMM1_Bl == $U1[11]:1
	XMM1_Bl = $U13:1 * 0xff:1
	$U14:1 = XMM1_Bm == $U1[12]:1
	XMM1_Bm = $U14:1 * 0xff:1
	$U15:1 = XMM1_Bn == $U1[13]:1
	XMM1_Bn = $U15:1 * 0xff:1
	$U16:1 = XMM1_Bo == $U1[14]:1
	XMM1_Bo = $U16:1 * 0xff:1
	$U17:1 = XMM1_Bp == $U1[15]:1
	XMM1_Bp = $U17:1 * 0xff:1
	instruction(0x2ba87)
	$U18:8 = RAX + 0x20:8
	$U1:16 = ram[$U18:8]
	$U2:1 = XMM2_Ba == $U1:1
	XMM2_Ba = $U2:1 * 0xff:1
	$U3:1 = XMM2_Bb == $U1[1]:1
	XMM2_Bb = $U3:1 * 0xff:1
	$U4:1 = XMM2_Bc == $U1[2]:1
	XMM2_Bc = $U4:1 * 0xff:1
	$U5:1 = XMM2_Bd == $U1[3]:1
	XMM2_Bd = $U5:1 * 0xff:1
	$U6:1 = XMM2_Be == $U1[4]:1
	XMM2_Be = $U6:1 * 0xff:1
	$U7:1 = XMM2_Bf == $U1[5]:1
	XMM2_Bf = $U7:1 * 0xff:1
	$U8:1 = XMM2_Bg == $U1[6]:1
	XMM2_Bg = $U8:1 * 0xff:1
	$U9:1 = XMM2_Bh == $U1[7]:1
	XMM2_Bh = $U9:1 * 0xff:1
	$U10:1 = XMM2_Bi == $U1[8]:1
	XMM2_Bi = $U10:1 * 0xff:1
	$U11:1 = XMM2_Bj == $U1[9]:1
	XMM2_Bj = $U11:1 * 0xff:1
	$U12:1 = XMM2_Bk == $U1[10]:1
	XMM2_Bk = $U12:1 * 0xff:1
	$U13:1 = XMM2_Bl == $U1[11]:1
	XMM2_Bl = $U13:1 * 0xff:1
	$U14:1 = XMM2_Bm == $U1[12]:1
	XMM2_Bm = $U14:1 * 0xff:1
	$U15:1 = XMM2_Bn == $U1[13]:1
	XMM2_Bn = $U15:1 * 0xff:1
	$U16:1 = XMM2_Bo == $U1[14]:1
	XMM2_Bo = $U16:1 * 0xff:1
	$U17:1 = XMM2_Bp == $U1[15]:1
	XMM2_Bp = $U17:1 * 0xff:1
	instruction(0x2ba8c)
	$U18:8 = RAX + 0x30:8
	$U1:16 = ram[$U18:8]
	$U2:1 = XMM3_Ba == $U1:1
	XMM3_Ba = $U2:1 * 0xff:1
	$U3:1 = XMM3_Bb == $U1[1]:1
	XMM3_Bb = $U3:1 * 0xff:1
	$U4:1 = XMM3_Bc == $U1[2]:1
	XMM3_Bc = $U4:1 * 0xff:1
	$U5:1 = XMM3_Bd == $U1[3]:1
	XMM3_Bd = $U5:1 * 0xff:1
	$U6:1 = XMM3_Be == $U1[4]:1
	XMM3_Be = $U6:1 * 0xff:1
	$U7:1 = XMM3_Bf == $U1[5]:1
	XMM3_Bf = $U7:1 * 0xff:1
	$U8:1 = XMM3_Bg == $U1[6]:1
	XMM3_Bg = $U8:1 * 0xff:1
	$U9:1 = XMM3_Bh == $U1[7]:1
	XMM3_Bh = $U9:1 * 0xff:1
	$U10:1 = XMM3_Bi == $U1[8]:1
	XMM3_Bi = $U10:1 * 0xff:1
	$U11:1 = XMM3_Bj == $U1[9]:1
	XMM3_Bj = $U11:1 * 0xff:1
	$U12:1 = XMM3_Bk == $U1[10]:1
	XMM3_Bk = $U12:1 * 0xff:1
	$U13:1 = XMM3_Bl == $U1[11]:1
	XMM3_Bl = $U13:1 * 0xff:1
	$U14:1 = XMM3_Bm == $U1[12]:1
	XMM3_Bm = $U14:1 * 0xff:1
	$U15:1 = XMM3_Bn == $U1[13]:1
	XMM3_Bn = $U15:1 * 0xff:1
	$U16:1 = XMM3_Bo == $U1[14]:1
	XMM3_Bo = $U16:1 * 0xff:1
	$U17:1 = XMM3_Bp == $U1[15]:1
	XMM3_Bp = $U17:1 * 0xff:1
	instruction(0x2ba91)
	$U1:2 = 0x0:2
	$U2:16 = XMM1 >> 0x7:8
	$U2:16 = $U2:16 & 0x1:16
	$U3:2 = $U1:2 & 0xfffffffffffffffe:2
	$U4:2 = zext($U2:1)
	$U4:2 = $U4:2 & 0x1:2
	$U4:2 = $U4:2 << 0x0:8
	$U1:2 = $U3:2 | $U4:2
	$U5:16 = XMM1 >> 0xf:8
	$U5:16 = $U5:16 & 0x1:16
	$U6:2 = $U1:2 & 0xfffffffffffffffd:2
	$U7:2 = zext($U5:1)
	$U7:2 = $U7:2 & 0x1:2
	$U7:2 = $U7:2 << 0x1:8
	$U1:2 = $U6:2 | $U7:2
	$U8:16 = XMM1 >> 0x17:8
	$U8:16 = $U8:16 & 0x1:16
	$U9:2 = $U1:2 & 0xfffffffffffffffb:2
	$U10:2 = zext($U8:1)
	$U10:2 = $U10:2 & 0x1:2
	$U10:2 = $U10:2 << 0x2:8
	$U1:2 = $U9:2 | $U10:2
	$U11:16 = XMM1 >> 0x1f:8
	$U11:16 = $U11:16 & 0x1:16
	$U12:2 = $U1:2 & 0xfffffffffffffff7:2
	$U13:2 = zext($U11:1)
	$U13:2 = $U13:2 & 0x1:2
	$U13:2 = $U13:2 << 0x3:8
	$U1:2 = $U12:2 | $U13:2
	$U14:16 = XMM1 >> 0x27:8
	$U14:16 = $U14:16 & 0x1:16
	$U15:2 = $U1:2 & 0xffffffffffffffef:2
	$U16:2 = zext($U14:1)
	$U16:2 = $U16:2 & 0x1:2
	$U16:2 = $U16:2 << 0x4:8
	$U1:2 = $U15:2 | $U16:2
	$U17:16 = XMM1 >> 0x2f:8
	$U17:16 = $U17:16 & 0x1:16
	$U18:2 = $U1:2 & 0xffffffffffffffdf:2
	$U19:2 = zext($U17:1)
	$U19:2 = $U19:2 & 0x1:2
	$U19:2 = $U19:2 << 0x5:8
	$U1:2 = $U18:2 | $U19:2
	$U20:16 = XMM1 >> 0x37:8
	$U20:16 = $U20:16 & 0x1:16
	$U21:2 = $U1:2 & 0xffffffffffffffbf:2
	$U22:2 = zext($U20:1)
	$U22:2 = $U22:2 & 0x1:2
	$U22:2 = $U22:2 << 0x6:8
	$U1:2 = $U21:2 | $U22:2
	$U23:16 = XMM1 >> 0x3f:8
	$U23:16 = $U23:16 & 0x1:16
	$U24:2 = $U1:2 & 0xffffffffffffff7f:2
	$U25:2 = zext($U23:1)
	$U25:2 = $U25:2 & 0x1:2
	$U25:2 = $U25:2 << 0x7:8
	$U1:2 = $U24:2 | $U25:2
	$U26:16 = XMM1 >> 0x47:8
	$U26:16 = $U26:16 & 0x1:16
	$U27:2 = $U1:2 & 0xfffffffffffffeff:2
	$U28:2 = zext($U26:1)
	$U28:2 = $U28:2 & 0x1:2
	$U28:2 = $U28:2 << 0x8:8
	$U1:2 = $U27:2 | $U28:2
	$U29:16 = XMM1 >> 0x4f:8
	$U29:16 = $U29:16 & 0x1:16
	$U30:2 = $U1:2 & 0xfffffffffffffdff:2
	$U31:2 = zext($U29:1)
	$U31:2 = $U31:2 & 0x1:2
	$U31:2 = $U31:2 << 0x9:8
	$U1:2 = $U30:2 | $U31:2
	$U32:16 = XMM1 >> 0x57:8
	$U32:16 = $U32:16 & 0x1:16
	$U33:2 = $U1:2 & 0xfffffffffffffbff:2
	$U34:2 = zext($U32:1)
	$U34:2 = $U34:2 & 0x1:2
	$U34:2 = $U34:2 << 0xa:8
	$U1:2 = $U33:2 | $U34:2
	$U35:16 = XMM1 >> 0x5f:8
	$U35:16 = $U35:16 & 0x1:16
	$U36:2 = $U1:2 & 0xfffffffffffff7ff:2
	$U37:2 = zext($U35:1)
	$U37:2 = $U37:2 & 0x1:2
	$U37:2 = $U37:2 << 0xb:8
	$U1:2 = $U36:2 | $U37:2
	$U38:16 = XMM1 >> 0x67:8
	$U38:16 = $U38:16 & 0x1:16
	$U39:2 = $U1:2 & 0xffffffffffffefff:2
	$U40:2 = zext($U38:1)
	$U40:2 = $U40:2 & 0x1:2
	$U40:2 = $U40:2 << 0xc:8
	$U1:2 = $U39:2 | $U40:2
	$U41:16 = XMM1 >> 0x6f:8
	$U41:16 = $U41:16 & 0x1:16
	$U42:2 = $U1:2 & 0xffffffffffffdfff:2
	$U43:2 = zext($U41:1)
	$U43:2 = $U43:2 & 0x1:2
	$U43:2 = $U43:2 << 0xd:8
	$U1:2 = $U42:2 | $U43:2
	$U44:16 = XMM1 >> 0x77:8
	$U44:16 = $U44:16 & 0x1:16
	$U45:2 = $U1:2 & 0xffffffffffffbfff:2
	$U46:2 = zext($U44:1)
	$U46:2 = $U46:2 & 0x1:2
	$U46:2 = $U46:2 << 0xe:8
	$U1:2 = $U45:2 | $U46:2
	$U47:16 = XMM1 >> 0x7f:8
	$U47:16 = $U47:16 & 0x1:16
	$U48:2 = $U1:2 & 0xffffffffffff7fff:2
	$U49:2 = zext($U47:1)
	$U49:2 = $U49:2 & 0x1:2
	$U49:2 = $U49:2 << 0xf:8
	$U1:2 = $U48:2 | $U49:2
	EDX = zext($U1:2)
	RDX = zext(EDX)
	instruction(0x2ba95)
	$U1:2 = 0x0:2
	$U2:16 = XMM2 >> 0x7:8
	$U2:16 = $U2:16 & 0x1:16
	$U3:2 = $U1:2 & 0xfffffffffffffffe:2
	$U4:2 = zext($U2:1)
	$U4:2 = $U4:2 & 0x1:2
	$U4:2 = $U4:2 << 0x0:8
	$U1:2 = $U3:2 | $U4:2
	$U5:16 = XMM2 >> 0xf:8
	$U5:16 = $U5:16 & 0x1:16
	$U6:2 = $U1:2 & 0xfffffffffffffffd:2
	$U7:2 = zext($U5:1)
	$U7:2 = $U7:2 & 0x1:2
	$U7:2 = $U7:2 << 0x1:8
	$U1:2 = $U6:2 | $U7:2
	$U8:16 = XMM2 >> 0x17:8
	$U8:16 = $U8:16 & 0x1:16
	$U9:2 = $U1:2 & 0xfffffffffffffffb:2
	$U10:2 = zext($U8:1)
	$U10:2 = $U10:2 & 0x1:2
	$U10:2 = $U10:2 << 0x2:8
	$U1:2 = $U9:2 | $U10:2
	$U11:16 = XMM2 >> 0x1f:8
	$U11:16 = $U11:16 & 0x1:16
	$U12:2 = $U1:2 & 0xfffffffffffffff7:2
	$U13:2 = zext($U11:1)
	$U13:2 = $U13:2 & 0x1:2
	$U13:2 = $U13:2 << 0x3:8
	$U1:2 = $U12:2 | $U13:2
	$U14:16 = XMM2 >> 0x27:8
	$U14:16 = $U14:16 & 0x1:16
	$U15:2 = $U1:2 & 0xffffffffffffffef:2
	$U16:2 = zext($U14:1)
	$U16:2 = $U16:2 & 0x1:2
	$U16:2 = $U16:2 << 0x4:8
	$U1:2 = $U15:2 | $U16:2
	$U17:16 = XMM2 >> 0x2f:8
	$U17:16 = $U17:16 & 0x1:16
	$U18:2 = $U1:2 & 0xffffffffffffffdf:2
	$U19:2 = zext($U17:1)
	$U19:2 = $U19:2 & 0x1:2
	$U19:2 = $U19:2 << 0x5:8
	$U1:2 = $U18:2 | $U19:2
	$U20:16 = XMM2 >> 0x37:8
	$U20:16 = $U20:16 & 0x1:16
	$U21:2 = $U1:2 & 0xffffffffffffffbf:2
	$U22:2 = zext($U20:1)
	$U22:2 = $U22:2 & 0x1:2
	$U22:2 = $U22:2 << 0x6:8
	$U1:2 = $U21:2 | $U22:2
	$U23:16 = XMM2 >> 0x3f:8
	$U23:16 = $U23:16 & 0x1:16
	$U24:2 = $U1:2 & 0xffffffffffffff7f:2
	$U25:2 = zext($U23:1)
	$U25:2 = $U25:2 & 0x1:2
	$U25:2 = $U25:2 << 0x7:8
	$U1:2 = $U24:2 | $U25:2
	$U26:16 = XMM2 >> 0x47:8
	$U26:16 = $U26:16 & 0x1:16
	$U27:2 = $U1:2 & 0xfffffffffffffeff:2
	$U28:2 = zext($U26:1)
	$U28:2 = $U28:2 & 0x1:2
	$U28:2 = $U28:2 << 0x8:8
	$U1:2 = $U27:2 | $U28:2
	$U29:16 = XMM2 >> 0x4f:8
	$U29:16 = $U29:16 & 0x1:16
	$U30:2 = $U1:2 & 0xfffffffffffffdff:2
	$U31:2 = zext($U29:1)
	$U31:2 = $U31:2 & 0x1:2
	$U31:2 = $U31:2 << 0x9:8
	$U1:2 = $U30:2 | $U31:2
	$U32:16 = XMM2 >> 0x57:8
	$U32:16 = $U32:16 & 0x1:16
	$U33:2 = $U1:2 & 0xfffffffffffffbff:2
	$U34:2 = zext($U32:1)
	$U34:2 = $U34:2 & 0x1:2
	$U34:2 = $U34:2 << 0xa:8
	$U1:2 = $U33:2 | $U34:2
	$U35:16 = XMM2 >> 0x5f:8
	$U35:16 = $U35:16 & 0x1:16
	$U36:2 = $U1:2 & 0xfffffffffffff7ff:2
	$U37:2 = zext($U35:1)
	$U37:2 = $U37:2 & 0x1:2
	$U37:2 = $U37:2 << 0xb:8
	$U1:2 = $U36:2 | $U37:2
	$U38:16 = XMM2 >> 0x67:8
	$U38:16 = $U38:16 & 0x1:16
	$U39:2 = $U1:2 & 0xffffffffffffefff:2
	$U40:2 = zext($U38:1)
	$U40:2 = $U40:2 & 0x1:2
	$U40:2 = $U40:2 << 0xc:8
	$U1:2 = $U39:2 | $U40:2
	$U41:16 = XMM2 >> 0x6f:8
	$U41:16 = $U41:16 & 0x1:16
	$U42:2 = $U1:2 & 0xffffffffffffdfff:2
	$U43:2 = zext($U41:1)
	$U43:2 = $U43:2 & 0x1:2
	$U43:2 = $U43:2 << 0xd:8
	$U1:2 = $U42:2 | $U43:2
	$U44:16 = XMM2 >> 0x77:8
	$U44:16 = $U44:16 & 0x1:16
	$U45:2 = $U1:2 & 0xffffffffffffbfff:2
	$U46:2 = zext($U44:1)
	$U46:2 = $U46:2 & 0x1:2
	$U46:2 = $U46:2 << 0xe:8
	$U1:2 = $U45:2 | $U46:2
	$U47:16 = XMM2 >> 0x7f:8
	$U47:16 = $U47:16 & 0x1:16
	$U48:2 = $U1:2 & 0xffffffffffff7fff:2
	$U49:2 = zext($U47:1)
	$U49:2 = $U49:2 & 0x1:2
	$U49:2 = $U49:2 << 0xf:8
	$U1:2 = $U48:2 | $U49:2
	R8D = zext($U1:2)
	R8 = zext(R8D)
	instruction(0x2ba9a)
	$U1:2 = 0x0:2
	$U2:16 = XMM3 >> 0x7:8
	$U2:16 = $U2:16 & 0x1:16
	$U3:2 = $U1:2 & 0xfffffffffffffffe:2
	$U4:2 = zext($U2:1)
	$U4:2 = $U4:2 & 0x1:2
	$U4:2 = $U4:2 << 0x0:8
	$U1:2 = $U3:2 | $U4:2
	$U5:16 = XMM3 >> 0xf:8
	$U5:16 = $U5:16 & 0x1:16
	$U6:2 = $U1:2 & 0xfffffffffffffffd:2
	$U7:2 = zext($U5:1)
	$U7:2 = $U7:2 & 0x1:2
	$U7:2 = $U7:2 << 0x1:8
	$U1:2 = $U6:2 | $U7:2
	$U8:16 = XMM3 >> 0x17:8
	$U8:16 = $U8:16 & 0x1:16
	$U9:2 = $U1:2 & 0xfffffffffffffffb:2
	$U10:2 = zext($U8:1)
	$U10:2 = $U10:2 & 0x1:2
	$U10:2 = $U10:2 << 0x2:8
	$U1:2 = $U9:2 | $U10:2
	$U11:16 = XMM3 >> 0x1f:8
	$U11:16 = $U11:16 & 0x1:16
	$U12:2 = $U1:2 & 0xfffffffffffffff7:2
	$U13:2 = zext($U11:1)
	$U13:2 = $U13:2 & 0x1:2
	$U13:2 = $U13:2 << 0x3:8
	$U1:2 = $U12:2 | $U13:2
	$U14:16 = XMM3 >> 0x27:8
	$U14:16 = $U14:16 & 0x1:16
	$U15:2 = $U1:2 & 0xffffffffffffffef:2
	$U16:2 = zext($U14:1)
	$U16:2 = $U16:2 & 0x1:2
	$U16:2 = $U16:2 << 0x4:8
	$U1:2 = $U15:2 | $U16:2
	$U17:16 = XMM3 >> 0x2f:8
	$U17:16 = $U17:16 & 0x1:16
	$U18:2 = $U1:2 & 0xffffffffffffffdf:2
	$U19:2 = zext($U17:1)
	$U19:2 = $U19:2 & 0x1:2
	$U19:2 = $U19:2 << 0x5:8
	$U1:2 = $U18:2 | $U19:2
	$U20:16 = XMM3 >> 0x37:8
	$U20:16 = $U20:16 & 0x1:16
	$U21:2 = $U1:2 & 0xffffffffffffffbf:2
	$U22:2 = zext($U20:1)
	$U22:2 = $U22:2 & 0x1:2
	$U22:2 = $U22:2 << 0x6:8
	$U1:2 = $U21:2 | $U22:2
	$U23:16 = XMM3 >> 0x3f:8
	$U23:16 = $U23:16 & 0x1:16
	$U24:2 = $U1:2 & 0xffffffffffffff7f:2
	$U25:2 = zext($U23:1)
	$U25:2 = $U25:2 & 0x1:2
	$U25:2 = $U25:2 << 0x7:8
	$U1:2 = $U24:2 | $U25:2
	$U26:16 = XMM3 >> 0x47:8
	$U26:16 = $U26:16 & 0x1:16
	$U27:2 = $U1:2 & 0xfffffffffffffeff:2
	$U28:2 = zext($U26:1)
	$U28:2 = $U28:2 & 0x1:2
	$U28:2 = $U28:2 << 0x8:8
	$U1:2 = $U27:2 | $U28:2
	$U29:16 = XMM3 >> 0x4f:8
	$U29:16 = $U29:16 & 0x1:16
	$U30:2 = $U1:2 & 0xfffffffffffffdff:2
	$U31:2 = zext($U29:1)
	$U31:2 = $U31:2 & 0x1:2
	$U31:2 = $U31:2 << 0x9:8
	$U1:2 = $U30:2 | $U31:2
	$U32:16 = XMM3 >> 0x57:8
	$U32:16 = $U32:16 & 0x1:16
	$U33:2 = $U1:2 & 0xfffffffffffffbff:2
	$U34:2 = zext($U32:1)
	$U34:2 = $U34:2 & 0x1:2
	$U34:2 = $U34:2 << 0xa:8
	$U1:2 = $U33:2 | $U34:2
	$U35:16 = XMM3 >> 0x5f:8
	$U35:16 = $U35:16 & 0x1:16
	$U36:2 = $U1:2 & 0xfffffffffffff7ff:2
	$U37:2 = zext($U35:1)
	$U37:2 = $U37:2 & 0x1:2
	$U37:2 = $U37:2 << 0xb:8
	$U1:2 = $U36:2 | $U37:2
	$U38:16 = XMM3 >> 0x67:8
	$U38:16 = $U38:16 & 0x1:16
	$U39:2 = $U1:2 & 0xffffffffffffefff:2
	$U40:2 = zext($U38:1)
	$U40:2 = $U40:2 & 0x1:2
	$U40:2 = $U40:2 << 0xc:8
	$U1:2 = $U39:2 | $U40:2
	$U41:16 = XMM3 >> 0x6f:8
	$U41:16 = $U41:16 & 0x1:16
	$U42:2 = $U1:2 & 0xffffffffffffdfff:2
	$U43:2 = zext($U41:1)
	$U43:2 = $U43:2 & 0x1:2
	$U43:2 = $U43:2 << 0xd:8
	$U1:2 = $U42:2 | $U43:2
	$U44:16 = XMM3 >> 0x77:8
	$U44:16 = $U44:16 & 0x1:16
	$U45:2 = $U1:2 & 0xffffffffffffbfff:2
	$U46:2 = zext($U44:1)
	$U46:2 = $U46:2 & 0x1:2
	$U46:2 = $U46:2 << 0xe:8
	$U1:2 = $U45:2 | $U46:2
	$U47:16 = XMM3 >> 0x7f:8
	$U47:16 = $U47:16 & 0x1:16
	$U48:2 = $U1:2 & 0xffffffffffff7fff:2
	$U49:2 = zext($U47:1)
	$U49:2 = $U49:2 & 0x1:2
	$U49:2 = $U49:2 << 0xf:8
	$U1:2 = $U48:2 | $U49:2
	ECX = zext($U1:2)
	RCX = zext(ECX)
	instruction(0x2ba9e)
	$U1:8 = 0x10:8 & 0x3f:8
	$U2:8 = RDX
	RDX = RDX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RDX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RDX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RDX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RDX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x2baa2)
	$U1:8 = 0x10:8 & 0x3f:8
	$U2:8 = RCX
	RCX = RCX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RCX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RCX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RCX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RCX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x2baa6)
	CF = 0x0:1
	OF = 0x0:1
	RCX = RCX | R8
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2baa9)
	$U1:8 = 0x20:8 & 0x3f:8
	$U2:8 = RCX
	RCX = RCX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RCX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RCX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RCX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RCX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x2baad)
	CF = 0x0:1
	OF = 0x0:1
	RDX = RDX | RCX
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2bab0)
	RCX = RDI
	instruction(0x2bab3)
	CF = 0x0:1
	OF = 0x0:1
	RCX = RCX ^ RAX
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2bab6)
	CF = 0x0:1
	OF = 0x0:1
	RAX = RAX & 0xffffffffffffffc0:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2baba)
	$U1:1 = CL & 0x3f:1
	$U2:8 = RDX
	RDX = RDX s>> $U1:1
	$U3:1 = $U1:1 != 0x0:1
	$U5:1 = $U1:1 - 0x1:1
	$U6:8 = $U2:8 s>> $U5:1
	$U7:8 = $U6:8 & 0x1:8
	$U4:1 = $U7:8 != 0x0:8
	$U8:1 = !$U3:1
	$U9:1 = $U8:1 && CF
	$U10:1 = $U3:1 && $U4:1
	CF = $U9:1 || $U10:1
	$U11:1 = $U1:1 == 0x1:1
	$U12:1 = !$U11:1
	OF = $U12:1 && OF
	$U13:1 = $U1:1 != 0x0:1
	$U14:1 = RDX s< 0x0:8
	$U15:1 = !$U13:1
	$U16:1 = $U15:1 && SF
	$U17:1 = $U13:1 && $U14:1
	SF = $U16:1 || $U17:1
	$U18:1 = RDX == 0x0:8
	$U19:1 = !$U13:1
	$U20:1 = $U19:1 && ZF
	$U21:1 = $U13:1 && $U18:1
	ZF = $U20:1 || $U21:1
	$U23:8 = RDX & 0xff:8
	$U24:1 = count_ones($U23:8)
	$U25:1 = $U24:1 & 0x1:1
	$U22:1 = $U25:1 == 0x0:1
	$U26:1 = !$U13:1
	$U27:1 = $U26:1 && PF
	$U28:1 = $U13:1 && $U22:1
	PF = $U27:1 || $U28:1
	instruction(0x2babd)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RDX & RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2bac0)
	if ZF jump 0x2bb40:8

0xb854  MOV R12,qword ptr [R12 + 0x2e0]
0xb85c  TEST R12,R12
0xb85f  JZ 0xbaa8
<L0> (entry=0xb854):
	instruction(0xb854)
	$U1:8 = 0x2e0:8 + R12
	R12 = ram[$U1:8]
	instruction(0xb85c)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R12 & R12
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb85f)
	if ZF jump 0xbaa8:8

0x27af8  MOV EAX,ESI
0x27afa  AND EAX,0x410000
0x27aff  CMP EAX,0x410000
0x27b04  JZ 0x27b28
<L0> (entry=0x27af8):
	instruction(0x27af8)
	EAX = ESI
	RAX = zext(EAX)
	instruction(0x27afa)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX & 0x410000:4
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x27aff)
	CF = EAX < 0x410000:4
	OF = EAX sborrow 0x410000:4
	$U1:4 = EAX - 0x410000:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x27b04)
	if ZF jump 0x27b28:8

0x2208f  MOV EDI,0x6fffffff
0x22094  MOV R10D,0x6ffffdff
0x2209a  MOV EBX,0x6ffffeff
0x2209f  MOV R13D,0x6fffff41
0x220a5  LEA RCX,[0x3bb30]
0x220ac  MOV R11D,0x6ffffe35
0x220b2  MOV R9D,0x32
0x220b8  MOV R8D,0x70000022
0x220be  JMP 0x220da
<L0> (entry=0x2208f):
	instruction(0x2208f)
	RDI = 0x6fffffff:8
	instruction(0x22094)
	R10 = 0x6ffffdff:8
	instruction(0x2209a)
	RBX = 0x6ffffeff:8
	instruction(0x2209f)
	R13 = 0x6fffff41:8
	instruction(0x220a5)
	RCX = 0x3bb30:8
	instruction(0x220ac)
	R11 = 0x6ffffe35:8
	instruction(0x220b2)
	R9 = 0x32:8
	instruction(0x220b8)
	R8 = 0x70000022:8
	instruction(0x220be)
	jump 0x220da:8

0x1ade0  TEST DL,0x20
0x1ade3  JZ 0x1ac7d
<L0> (entry=0x1ade0):
	instruction(0x1ade0)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = DL & 0x20:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1ade3)
	if ZF jump 0x1ac7d:8

0x2bfb0  ENDBR64
0x2bfb4  MOV RAX,RDI
0x2bfb7  CMP RDX,0x10
0x2bfbb  JC 0x2bfe0
<L0> (entry=0x2bfb0):
	instruction(0x2bfb0)
	instruction(0x2bfb4)
	RAX = RDI
	instruction(0x2bfb7)
	CF = RDX < 0x10:8
	OF = RDX sborrow 0x10:8
	$U1:8 = RDX - 0x10:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2bfbb)
	if CF jump 0x2bfe0:8

0xec50  MOV dword ptr [R14 + 0x3e4],0x1
0xec5b  JMP 0xea94
<L0> (entry=0xec50):
	instruction(0xec50)
	$U1:8 = R14 + 0x3e4:8
	$U2:4 = 0x1:4
	ram[$U1:8] = $U2:4
	instruction(0xec5b)
	jump 0xea94:8

0x1eca6  MOV RCX,qword ptr [RAX + -0x18]
0x1ecaa  ADD RCX,qword ptr [RAX + -0x20]
0x1ecae  ADD RAX,0x10
0x1ecb2  MOV qword ptr [RAX + -0x10],RCX
0x1ecb6  CMP RSI,RDX
0x1ecb9  JNZ 0x1ec98
<L0> (entry=0x1eca6):
	instruction(0x1eca6)
	$U1:8 = RAX + 0xffffffffffffffe8:8
	RCX = ram[$U1:8]
	instruction(0x1ecaa)
	$U4:8 = RAX + 0xffffffffffffffe0:8
	$U5:8 = ram[$U4:8]
	CF = RCX carry $U5:8
	$U6:8 = ram[$U4:8]
	OF = RCX scarry $U6:8
	$U7:8 = ram[$U4:8]
	RCX = RCX + $U7:8
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ecae)
	CF = RAX carry 0x10:8
	OF = RAX scarry 0x10:8
	RAX = RAX + 0x10:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ecb2)
	$U1:8 = RAX + 0xfffffffffffffff0:8
	$U2:8 = RCX
	ram[$U1:8] = $U2:8
	instruction(0x1ecb6)
	CF = RSI < RDX
	OF = RSI sborrow RDX
	$U1:8 = RSI - RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1ecb9)
	$U1:1 = !ZF
	if $U1:1 jump 0x1ec98:8

0x7d59  MOV R8,qword ptr [RBP + -0x40]
0x7d5d  CMP RAX,RBX
0x7d60  JNZ 0x7f38
<L0> (entry=0x7d59):
	instruction(0x7d59)
	$U1:8 = RBP + 0xffffffffffffffc0:8
	R8 = ram[$U1:8]
	instruction(0x7d5d)
	CF = RAX < RBX
	OF = RAX sborrow RBX
	$U1:8 = RAX - RBX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7d60)
	$U1:1 = !ZF
	if $U1:1 jump 0x7f38:8

0x7ade  ADD RDX,R8
0x7ae1  CMP R8,RDX
0x7ae4  JNC 0x7ee6
<L0> (entry=0x7ade):
	instruction(0x7ade)
	CF = RDX carry R8
	OF = RDX scarry R8
	RDX = RDX + R8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7ae1)
	CF = R8 < RDX
	OF = R8 sborrow RDX
	$U1:8 = R8 - RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7ae4)
	$U1:1 = !CF
	if $U1:1 jump 0x7ee6:8

0x7c39  MOVZX EAX,AL
0x7c3c  MOVZX ECX,CL
0x7c3f  MOVZX EDX,DL
0x7c42  MOV ESI,dword ptr [0x3aae4]
0x7c48  SHL EAX,0x8
0x7c4b  ADD EAX,ECX
0x7c4d  SHL EAX,0x8
0x7c50  ADD EAX,EDX
0x7c52  CMP EAX,ESI
0x7c54  JBE 0x7a50
<L0> (entry=0x7c39):
	instruction(0x7c39)
	EAX = zext(AL)
	RAX = zext(EAX)
	instruction(0x7c3c)
	ECX = zext(CL)
	RCX = zext(ECX)
	instruction(0x7c3f)
	EDX = zext(DL)
	RDX = zext(EDX)
	instruction(0x7c42)
	ESI = ram[0x3aae4:8]
	RSI = zext(ESI)
	instruction(0x7c48)
	$U1:8 = 0x8:8 & 0x1f:8
	$U2:4 = EAX
	EAX = EAX << $U1:8
	RAX = zext(EAX)
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:4 = $U2:4 << $U5:8
	$U4:1 = $U6:4 s< 0x0:4
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = EAX s< 0x0:4
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = EAX s< 0x0:4
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = EAX == 0x0:4
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:4 = EAX & 0xff:4
	$U27:1 = count_ones($U26:4)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x7c4b)
	CF = EAX carry ECX
	OF = EAX scarry ECX
	EAX = EAX + ECX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7c4d)
	$U1:8 = 0x8:8 & 0x1f:8
	$U2:4 = EAX
	EAX = EAX << $U1:8
	RAX = zext(EAX)
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:4 = $U2:4 << $U5:8
	$U4:1 = $U6:4 s< 0x0:4
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = EAX s< 0x0:4
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = EAX s< 0x0:4
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = EAX == 0x0:4
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:4 = EAX & 0xff:4
	$U27:1 = count_ones($U26:4)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x7c50)
	CF = EAX carry EDX
	OF = EAX scarry EDX
	EAX = EAX + EDX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7c52)
	CF = EAX < ESI
	OF = EAX sborrow ESI
	$U1:4 = EAX - ESI
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7c54)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x7a50:8

0x1df9f  JMP 0x1dfd8
<L0> (entry=0x1df9f):
	jump 0x1dfd8:8

0x14a3f  OR qword ptr [RSP + RDX*0x1 + -0x8],0x0
0x14a45  MOV R11,RSP
0x14a48  TEST AL,AL
0x14a4a  LEA R13,[RBP + -0x41]
0x14a4e  MOV EAX,0x0
0x14a53  LEA RDX,[R11 + R9*0x1]
0x14a57  MOV byte ptr [RBP + -0x41],0x0
0x14a5b  CMOVZ R13,RAX
0x14a5f  MOV R14,R11
0x14a62  MOV qword ptr [RBP + -0x40],RDX
0x14a66  MOV R12,RCX
0x14a69  LEA R15,[RBP + -0x40]
0x14a6d  MOV R10,RCX
0x14a70  JMP 0x14a85
<L0> (entry=0x14a3f):
	instruction(0x14a3f)
	$U5:8 = 0xfffffffffffffff8:8 + RSP
	$U6:8 = RDX * 0x1:8
	$U4:8 = $U5:8 + $U6:8
	CF = 0x0:1
	OF = 0x0:1
	$U7:8 = ram[$U4:8]
	$U8:8 = $U7:8 | 0x0:8
	ram[$U4:8] = $U8:8
	$U9:8 = ram[$U4:8]
	SF = $U9:8 s< 0x0:8
	$U10:8 = ram[$U4:8]
	ZF = $U10:8 == 0x0:8
	$U11:8 = ram[$U4:8]
	$U1:8 = $U11:8 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x14a45)
	R11 = RSP
	instruction(0x14a48)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = AL & AL
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x14a4a)
	$U1:8 = RBP + 0xffffffffffffffbf:8
	R13 = $U1:8
	instruction(0x14a4e)
	RAX = 0x0:8
	instruction(0x14a53)
	$U2:8 = R9 * 0x1:8
	$U1:8 = R11 + $U2:8
	RDX = $U1:8
	instruction(0x14a57)
	$U1:8 = RBP + 0xffffffffffffffbf:8
	$U2:1 = 0x0:1
	ram[$U1:8] = $U2:1
	instruction(0x14a5b)
	$U1:8 = RAX
	$U2:1 = !ZF
	if $U2:1 jump <L983>
<L1>:
	R13 = $U1:8
<L2>:
	instruction(0x14a5f)
	R14 = R11
	instruction(0x14a62)
	$U1:8 = RBP + 0xffffffffffffffc0:8
	$U2:8 = RDX
	ram[$U1:8] = $U2:8
	instruction(0x14a66)
	R12 = RCX
	instruction(0x14a69)
	$U1:8 = RBP + 0xffffffffffffffc0:8
	R15 = $U1:8
	instruction(0x14a6d)
	R10 = RCX
	instruction(0x14a70)
	jump 0x14a85:8

0x1e092  CMP byte ptr [R13],0x0
0x1e097  LEA RCX,[0x2fee9]
0x1e09e  LEA R8,[0x2f299]
0x1e0a5  CMOVZ R8,RCX
0x1e0a9  TEST R12,R12
0x1e0ac  LEA RCX,[0x32748]
0x1e0b3  CMOVZ R12,RCX
0x1e0b7  MOV RCX,qword ptr [0x3aac0]
0x1e0be  LEA RDI,[0x2f7ed]
0x1e0c5  MOV RSI,qword ptr [RCX]
0x1e0c8  PUSH RAX
0x1e0c9  LEA RCX,[0x2efa0]
0x1e0d0  PUSH RDX
0x1e0d1  MOV RDX,R12
0x1e0d4  TEST RSI,RSI
0x1e0d7  CMOVZ RSI,RCX
0x1e0db  MOV RCX,R13
0x1e0de  XOR EAX,EAX
0x1e0e0  CALL 0x10f20
<L0> (entry=0x1e092):
	instruction(0x1e092)
	$U5:1 = ram[R13]
	CF = $U5:1 < 0x0:1
	$U6:1 = ram[R13]
	OF = $U6:1 sborrow 0x0:1
	$U7:1 = ram[R13]
	$U1:1 = $U7:1 - 0x0:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e097)
	RCX = 0x2fee9:8
	instruction(0x1e09e)
	R8 = 0x2f299:8
	instruction(0x1e0a5)
	$U1:8 = RCX
	$U2:1 = !ZF
	if $U2:1 jump <L1012>
<L1>:
	R8 = $U1:8
<L2>:
	instruction(0x1e0a9)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R12 & R12
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e0ac)
	RCX = 0x32748:8
	instruction(0x1e0b3)
	$U1:8 = RCX
	$U2:1 = !ZF
	if $U2:1 jump <L1014>
<L3>:
	R12 = $U1:8
<L4>:
	instruction(0x1e0b7)
	RCX = ram[0x3aac0:8]
	instruction(0x1e0be)
	RDI = 0x2f7ed:8
	instruction(0x1e0c5)
	RSI = ram[RCX]
	instruction(0x1e0c8)
	$U1:8 = RAX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1e0c9)
	RCX = 0x2efa0:8
	instruction(0x1e0d0)
	$U1:8 = RDX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x1e0d1)
	RDX = R12
	instruction(0x1e0d4)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RSI & RSI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e0d7)
	$U1:8 = RCX
	$U2:1 = !ZF
	if $U2:1 jump <L1016>
<L5>:
	RSI = $U1:8
<L6>:
	instruction(0x1e0db)
	RCX = R13
	instruction(0x1e0de)
	CF = 0x0:1
	OF = 0x0:1
	EAX = EAX ^ EAX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e0e0)
	$U1:8 = 0x1e0e5:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x10f20:8

0x1b00a  LEA RSI,[RSP + 0x94]
0x1b012  LEA RDI,[RSP + 0x98]
0x1b01a  MOV RDX,RBX
0x1b01d  MOV qword ptr [RSP + 0x70],RAX
0x1b022  CALL 0x19780
<L0> (entry=0x1b00a):
	instruction(0x1b00a)
	$U1:8 = 0x94:8 + RSP
	RSI = $U1:8
	instruction(0x1b012)
	$U1:8 = 0x98:8 + RSP
	RDI = $U1:8
	instruction(0x1b01a)
	RDX = RBX
	instruction(0x1b01d)
	$U1:8 = 0x70:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1b022)
	$U1:8 = 0x1b027:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x19780:8

0x22a10  TEST R12,R12
0x22a13  JZ 0x22a1f
<L0> (entry=0x22a10):
	instruction(0x22a10)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R12 & R12
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x22a13)
	if ZF jump 0x22a1f:8

0x197d5  MOV EDI,dword ptr [0x3ab70]
0x197db  AND EDI,0x10000000
0x197e1  JZ 0x1982e
<L0> (entry=0x197d5):
	instruction(0x197d5)
	EDI = ram[0x3ab70:8]
	RDI = zext(EDI)
	instruction(0x197db)
	CF = 0x0:1
	OF = 0x0:1
	EDI = EDI & 0x10000000:4
	RDI = zext(EDI)
	SF = EDI s< 0x0:4
	ZF = EDI == 0x0:4
	$U1:4 = EDI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x197e1)
	if ZF jump 0x1982e:8

0x1e86e  MOV ECX,R12D
0x1e871  MOV RSI,qword ptr [RBP + -0x68]
0x1e875  ADD R12,0x1
0x1e879  MOV qword ptr [R14 + 0x8],RAX
0x1e87d  MOV RAX,R13
0x1e880  MOV RDX,qword ptr [RBP + -0x60]
0x1e884  SHL RAX,CL
0x1e887  ADD RSI,0x1
0x1e88b  MOV RCX,RAX
0x1e88e  XOR RCX,RBX
0x1e891  CMP RAX,RBX
0x1e894  JZ 0x1e8a5
<L0> (entry=0x1e86e):
	instruction(0x1e86e)
	ECX = R12D
	RCX = zext(ECX)
	instruction(0x1e871)
	$U1:8 = RBP + 0xffffffffffffff98:8
	RSI = ram[$U1:8]
	instruction(0x1e875)
	CF = R12 carry 0x1:8
	OF = R12 scarry 0x1:8
	R12 = R12 + 0x1:8
	SF = R12 s< 0x0:8
	ZF = R12 == 0x0:8
	$U1:8 = R12 & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e879)
	$U1:8 = R14 + 0x8:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1e87d)
	RAX = R13
	instruction(0x1e880)
	$U1:8 = RBP + 0xffffffffffffffa0:8
	RDX = ram[$U1:8]
	instruction(0x1e884)
	$U1:1 = CL & 0x3f:1
	$U2:8 = RAX
	RAX = RAX << $U1:1
	$U3:1 = $U1:1 != 0x0:1
	$U5:1 = $U1:1 - 0x1:1
	$U6:8 = $U2:8 << $U5:1
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:1 == 0x1:1
	$U12:1 = RAX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:1 != 0x0:1
	$U17:1 = RAX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RAX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RAX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1e887)
	CF = RSI carry 0x1:8
	OF = RSI scarry 0x1:8
	RSI = RSI + 0x1:8
	SF = RSI s< 0x0:8
	ZF = RSI == 0x0:8
	$U1:8 = RSI & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e88b)
	RCX = RAX
	instruction(0x1e88e)
	CF = 0x0:1
	OF = 0x0:1
	RCX = RCX ^ RBX
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1e891)
	CF = RAX < RBX
	OF = RAX sborrow RBX
	$U1:8 = RAX - RBX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1e894)
	if ZF jump 0x1e8a5:8

0x2bfb7  CMP RDX,0x10
0x2bfbb  JC 0x2bfe0
<L0> (entry=0x2bfb7):
	instruction(0x2bfb7)
	CF = RDX < 0x10:8
	OF = RDX sborrow 0x10:8
	$U1:8 = RDX - 0x10:8
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2bfbb)
	if CF jump 0x2bfe0:8

0x242e2  MOV RBX,qword ptr [RBP + -0x290]
0x242e9  MOV qword ptr [RAX + 0x8],RBX
0x242ed  MOV RBX,qword ptr [RBP + -0x290]
0x242f4  MOV dword ptr [RBX + 0x18],0x1
0x242fb  CALL 0x4300
<L0> (entry=0x242e2):
	instruction(0x242e2)
	$U1:8 = RBP + 0xfffffffffffffd70:8
	RBX = ram[$U1:8]
	instruction(0x242e9)
	$U1:8 = RAX + 0x8:8
	$U2:8 = RBX
	ram[$U1:8] = $U2:8
	instruction(0x242ed)
	$U1:8 = RBP + 0xfffffffffffffd70:8
	RBX = ram[$U1:8]
	instruction(0x242f4)
	$U1:8 = RBX + 0x18:8
	$U2:4 = 0x1:4
	ram[$U1:8] = $U2:4
	instruction(0x242fb)
	$U1:8 = 0x24300:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x4300:8

0x220ec  LEA ESI,[RAX + RAX*0x1]
0x220ef  MOV R14D,ESI
0x220f2  SAR R14D,0x1
0x220f5  CMP ESI,-0x8
0x220f8  JBE 0x22108
<L0> (entry=0x220ec):
	instruction(0x220ec)
	$U2:8 = RAX * 0x1:8
	$U1:8 = RAX + $U2:8
	ESI = $U1:4
	RSI = zext(ESI)
	instruction(0x220ef)
	R14D = ESI
	R14 = zext(R14D)
	instruction(0x220f2)
	$U1:4 = R14D & 0x1:4
	CF = $U1:4 != 0x0:4
	OF = 0x0:1
	R14D = R14D s>> 0x1:8
	R14 = zext(R14D)
	SF = R14D s< 0x0:4
	ZF = R14D == 0x0:4
	$U2:4 = R14D & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x220f5)
	CF = ESI < 0xfffffff8:4
	OF = ESI sborrow 0xfffffff8:4
	$U1:4 = ESI - 0xfffffff8:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x220f8)
	$U1:1 = CF || ZF
	if $U1:1 jump 0x22108:8

0x1886d  MOV RAX,qword ptr [RDI]
0x18870  LEA RCX,[RDX*0x8]
0x18878  SUB RCX,RDX
0x1887b  SHL RCX,0x4
0x1887f  MOV RDI,qword ptr [R8 + RCX*0x1 + 0x40]
0x18884  MOV RCX,RDI
0x18887  TEST RSI,RSI
0x1888a  JZ 0x1888f
<L0> (entry=0x1886d):
	instruction(0x1886d)
	RAX = ram[RDI]
	instruction(0x18870)
	$U1:8 = RDX * 0x8:8
	RCX = $U1:8
	instruction(0x18878)
	CF = RCX < RDX
	OF = RCX sborrow RDX
	RCX = RCX - RDX
	SF = RCX s< 0x0:8
	ZF = RCX == 0x0:8
	$U1:8 = RCX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1887b)
	$U1:8 = 0x4:8 & 0x3f:8
	$U2:8 = RCX
	RCX = RCX << $U1:8
	$U3:1 = $U1:8 != 0x0:8
	$U5:8 = $U1:8 - 0x1:8
	$U6:8 = $U2:8 << $U5:8
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:8 == 0x1:8
	$U12:1 = RCX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:8 != 0x0:8
	$U17:1 = RCX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RCX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RCX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1887f)
	$U2:8 = 0x40:8 + R8
	$U3:8 = RCX * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	RDI = ram[$U1:8]
	instruction(0x18884)
	RCX = RDI
	instruction(0x18887)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RSI & RSI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1888a)
	if ZF jump 0x1888f:8

0x23523  CMP R8D,0xb0008000
0x2352a  JNZ 0x261d7
<L0> (entry=0x23523):
	instruction(0x23523)
	CF = R8D < 0xb0008000:4
	OF = R8D sborrow 0xb0008000:4
	$U1:4 = R8D - 0xb0008000:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2352a)
	$U1:1 = !ZF
	if $U1:1 jump 0x261d7:8

0x20812  LEA RDX,[0x3c2d8]
0x20819  CMP RAX,RDX
0x2081c  JZ 0x20850
<L0> (entry=0x20812):
	instruction(0x20812)
	RDX = 0x3c2d8:8
	instruction(0x20819)
	CF = RAX < RDX
	OF = RAX sborrow RDX
	$U1:8 = RAX - RDX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x2081c)
	if ZF jump 0x20850:8

0x1e33e  MOV RCX,qword ptr [RSP + 0x10]
0x1e343  MOV RDI,qword ptr [RSP + 0x18]
0x1e348  CALL RCX
<L0> (entry=0x1e33e):
	instruction(0x1e33e)
	$U1:8 = 0x10:8 + RSP
	RCX = ram[$U1:8]
	instruction(0x1e343)
	$U1:8 = 0x18:8 + RSP
	RDI = ram[$U1:8]
	instruction(0x1e348)
	$U1:8 = RCX
	$U2:8 = 0x1e34a:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U2:8
	call $U1:8

0x278de  CMP EAX,0xfffff000
0x278e3  JA 0x278f0
<L0> (entry=0x278de):
	instruction(0x278de)
	CF = EAX < 0xfffff000:4
	OF = EAX sborrow 0xfffff000:4
	$U1:4 = EAX - 0xfffff000:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x278e3)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x278f0:8

0x1afee  MOV EDI,0xc4
0x1aff3  MOV qword ptr [RSP + 0x68],RAX
0x1aff8  CALL 0x19f10
<L0> (entry=0x1afee):
	instruction(0x1afee)
	RDI = 0xc4:8
	instruction(0x1aff3)
	$U1:8 = 0x68:8 + RSP
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1aff8)
	$U1:8 = 0x1affd:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x19f10:8

0x5b49  TEST byte ptr [RAX + 0x31c],0x4
0x5b50  MOV EAX,0x0
0x5b55  CMOVZ RBX,RAX
0x5b59  MOV qword ptr [R12 + 0x10],RBX
0x5b5e  ADD RSP,0x18
0x5b62  POP RBX
0x5b63  POP RBP
0x5b64  POP R12
0x5b66  POP R13
0x5b68  POP R14
0x5b6a  POP R15
0x5b6c  RET
<L0> (entry=0x5b49):
	instruction(0x5b49)
	$U5:8 = RAX + 0x31c:8
	CF = 0x0:1
	OF = 0x0:1
	$U6:1 = ram[$U5:8]
	$U1:1 = $U6:1 & 0x4:1
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x5b50)
	RAX = 0x0:8
	instruction(0x5b55)
	$U1:8 = RAX
	$U2:1 = !ZF
	if $U2:1 jump <L950>
<L1>:
	RBX = $U1:8
<L2>:
	instruction(0x5b59)
	$U1:8 = 0x10:8 + R12
	$U2:8 = RBX
	ram[$U1:8] = $U2:8
	instruction(0x5b5e)
	CF = RSP carry 0x18:8
	OF = RSP scarry 0x18:8
	RSP = RSP + 0x18:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x5b62)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBX = $U1:8
	instruction(0x5b63)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RBP = $U1:8
	instruction(0x5b64)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R12 = $U1:8
	instruction(0x5b66)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R13 = $U1:8
	instruction(0x5b68)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R14 = $U1:8
	instruction(0x5b6a)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	R15 = $U1:8
	instruction(0x5b6c)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x29640  BSF RDX,RDX
0x29644  MOVZX ECX,byte ptr [RSI + RDX*0x1]
0x29648  MOVZX EAX,byte ptr [RDI + RDX*0x1]
0x2964c  SUB EAX,ECX
0x2964e  RET
<L0> (entry=0x29640):
	instruction(0x29640)
	$tmp0:8 = 0x0:8
	ZF = RDX == 0x0:8
	$U2:1 = ZF == 0x1:1
	if $U2:1 jump <L482>
<L1>:
	$U3:8 = RDX >> $tmp0:8
	$U4:8 = $U3:8 & 0x1:8
	$U5:1 = $U4:8 != 0x0:8
	if $U5:1 jump <L482>
<L2>:
	$tmp0:8 = $tmp0:8 + 0x1:8
	jump <L480>
<L3>:
	RDX = $tmp0:8
	instruction(0x29644)
	$U2:8 = RDX * 0x1:8
	$U1:8 = RSI + $U2:8
	$U3:1 = ram[$U1:8]
	ECX = zext($U3:1)
	RCX = zext(ECX)
	instruction(0x29648)
	$U2:8 = RDX * 0x1:8
	$U1:8 = RDI + $U2:8
	$U3:1 = ram[$U1:8]
	EAX = zext($U3:1)
	RAX = zext(EAX)
	instruction(0x2964c)
	CF = EAX < ECX
	OF = EAX sborrow ECX
	EAX = EAX - ECX
	RAX = zext(EAX)
	SF = EAX s< 0x0:4
	ZF = EAX == 0x0:4
	$U1:4 = EAX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x2964e)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x1ec6b  MOV ESI,dword ptr [RBP + -0xd8]
0x1ec71  MOVZX ECX,byte ptr [RBP + -0x8c]
0x1ec78  MOV EDX,0x1
0x1ec7d  LEA RAX,[RBX + 0x20]
0x1ec81  SUB ESI,0x2
0x1ec84  SHL RDX,CL
0x1ec87  MOVSXD RSI,ESI
0x1ec8a  CMP RDX,RSI
0x1ec8d  JZ 0x1ecc6
<L0> (entry=0x1ec6b):
	instruction(0x1ec6b)
	$U1:8 = RBP + 0xffffffffffffff28:8
	ESI = ram[$U1:8]
	RSI = zext(ESI)
	instruction(0x1ec71)
	$U1:8 = RBP + 0xffffffffffffff74:8
	$U2:1 = ram[$U1:8]
	ECX = zext($U2:1)
	RCX = zext(ECX)
	instruction(0x1ec78)
	RDX = 0x1:8
	instruction(0x1ec7d)
	$U1:8 = RBX + 0x20:8
	RAX = $U1:8
	instruction(0x1ec81)
	CF = ESI < 0x2:4
	OF = ESI sborrow 0x2:4
	ESI = ESI - 0x2:4
	RSI = zext(ESI)
	SF = ESI s< 0x0:4
	ZF = ESI == 0x0:4
	$U1:4 = ESI & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ec84)
	$U1:1 = CL & 0x3f:1
	$U2:8 = RDX
	RDX = RDX << $U1:1
	$U3:1 = $U1:1 != 0x0:1
	$U5:1 = $U1:1 - 0x1:1
	$U6:8 = $U2:8 << $U5:1
	$U4:1 = $U6:8 s< 0x0:8
	$U7:1 = !$U3:1
	$U8:1 = $U7:1 && CF
	$U9:1 = $U3:1 && $U4:1
	CF = $U8:1 || $U9:1
	$U10:1 = $U1:1 == 0x1:1
	$U12:1 = RDX s< 0x0:8
	$U11:1 = CF ^^ $U12:1
	$U13:1 = !$U10:1
	$U14:1 = $U13:1 && OF
	$U15:1 = $U10:1 && $U11:1
	OF = $U14:1 || $U15:1
	$U16:1 = $U1:1 != 0x0:1
	$U17:1 = RDX s< 0x0:8
	$U18:1 = !$U16:1
	$U19:1 = $U18:1 && SF
	$U20:1 = $U16:1 && $U17:1
	SF = $U19:1 || $U20:1
	$U21:1 = RDX == 0x0:8
	$U22:1 = !$U16:1
	$U23:1 = $U22:1 && ZF
	$U24:1 = $U16:1 && $U21:1
	ZF = $U23:1 || $U24:1
	$U26:8 = RDX & 0xff:8
	$U27:1 = count_ones($U26:8)
	$U28:1 = $U27:1 & 0x1:1
	$U25:1 = $U28:1 == 0x0:1
	$U29:1 = !$U16:1
	$U30:1 = $U29:1 && PF
	$U31:1 = $U16:1 && $U25:1
	PF = $U30:1 || $U31:1
	instruction(0x1ec87)
	RSI = sext(ESI)
	instruction(0x1ec8a)
	CF = RDX < RSI
	OF = RDX sborrow RSI
	$U1:8 = RDX - RSI
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1ec8d)
	if ZF jump 0x1ecc6:8

0x1f262  TEST DL,DL
0x1f264  JZ 0x1f2b0
<L0> (entry=0x1f262):
	instruction(0x1f262)
	CF = 0x0:1
	OF = 0x0:1
	$U1:1 = DL & DL
	SF = $U1:1 s< 0x0:1
	ZF = $U1:1 == 0x0:1
	$U2:1 = $U1:1 & 0xff:1
	$U3:1 = count_ones($U2:1)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1f264)
	if ZF jump 0x1f2b0:8

0x9946  MOV RAX,qword ptr [RBP + -0x50]
0x994a  TEST RAX,RAX
0x994d  JZ 0x9954
<L0> (entry=0x9946):
	instruction(0x9946)
	$U1:8 = RBP + 0xffffffffffffffb0:8
	RAX = ram[$U1:8]
	instruction(0x994a)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x994d)
	if ZF jump 0x9954:8

0x24354  MOV RAX,qword ptr [RBP + -0x288]
0x2435b  MOV R13,qword ptr [RAX]
0x2435e  TEST R13,R13
0x24361  JNZ 0x25afe
<L0> (entry=0x24354):
	instruction(0x24354)
	$U1:8 = RBP + 0xfffffffffffffd78:8
	RAX = ram[$U1:8]
	instruction(0x2435b)
	R13 = ram[RAX]
	instruction(0x2435e)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R13 & R13
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x24361)
	$U1:1 = !ZF
	if $U1:1 jump 0x25afe:8

0xe6c9  MOV RSI,qword ptr [RBX]
0xe6cc  MOV RDI,RBP
0xe6cf  CALL 0x28220
<L0> (entry=0xe6c9):
	instruction(0xe6c9)
	RSI = ram[RBX]
	instruction(0xe6cc)
	RDI = RBP
	instruction(0xe6cf)
	$U1:8 = 0xe6d4:8
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	call 0x28220:8

0x1f3a1  LEA RAX,[R8 + -0x7]
0x1f3a5  MOV EDX,0x2072
0x1f3aa  MOV dword ptr [R8 + -0x7],0x6f727245
0x1f3b2  MOV word ptr [RAX + 0x4],DX
0x1f3b6  RET
<L0> (entry=0x1f3a1):
	instruction(0x1f3a1)
	$U1:8 = R8 + 0xfffffffffffffff9:8
	RAX = $U1:8
	instruction(0x1f3a5)
	RDX = 0x2072:8
	instruction(0x1f3aa)
	$U1:8 = R8 + 0xfffffffffffffff9:8
	$U2:4 = 0x6f727245:4
	ram[$U1:8] = $U2:4
	instruction(0x1f3b2)
	$U1:8 = RAX + 0x4:8
	$U2:2 = DX
	ram[$U1:8] = $U2:2
	instruction(0x1f3b6)
	$U1:8 = ram[RSP]
	RSP = RSP + 0x8:8
	RIP = $U1:8
	return RIP

0x10992  MOV RDI,qword ptr [RBP + -0x450]
0x10999  MOV EAX,dword ptr [RDI]
0x1099b  CMP EAX,0x2f
0x1099e  JA 0x10ac4
<L0> (entry=0x10992):
	instruction(0x10992)
	$U1:8 = RBP + 0xfffffffffffffbb0:8
	RDI = ram[$U1:8]
	instruction(0x10999)
	EAX = ram[RDI]
	RAX = zext(EAX)
	instruction(0x1099b)
	CF = EAX < 0x2f:4
	OF = EAX sborrow 0x2f:4
	$U1:4 = EAX - 0x2f:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1099e)
	$U2:1 = CF || ZF
	$U1:1 = !$U2:1
	if $U1:1 jump 0x10ac4:8

0x7f50  PUSH RBP
0x7f51  MOV RBP,RSP
0x7f54  PUSH R15
0x7f56  PUSH R14
0x7f58  PUSH R13
0x7f5a  PUSH R12
0x7f5c  PUSH RBX
0x7f5d  SUB RSP,0x108
0x7f64  MOV RAX,qword ptr [RCX]
0x7f67  MOV qword ptr [RBP + -0xe0],RDI
0x7f6e  MOV qword ptr [RBP + -0xd8],RSI
0x7f75  MOV R15,qword ptr [RBP + 0x10]
0x7f79  MOV qword ptr [RBP + -0x120],RCX
0x7f80  MOV qword ptr [RBP + -0x108],R8
0x7f87  MOV qword ptr [RBP + -0xe8],R9
0x7f8e  MOV qword ptr [RBP + -0xf0],RAX
0x7f95  TEST RAX,RAX
0x7f98  JZ 0x81fd
<L0> (entry=0x7f50):
	instruction(0x7f50)
	$U1:8 = RBP
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x7f51)
	RBP = RSP
	instruction(0x7f54)
	$U1:8 = R15
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x7f56)
	$U1:8 = R14
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x7f58)
	$U1:8 = R13
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x7f5a)
	$U1:8 = R12
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x7f5c)
	$U1:8 = RBX
	RSP = RSP - 0x8:8
	ram[RSP] = $U1:8
	instruction(0x7f5d)
	CF = RSP < 0x108:8
	OF = RSP sborrow 0x108:8
	RSP = RSP - 0x108:8
	SF = RSP s< 0x0:8
	ZF = RSP == 0x0:8
	$U1:8 = RSP & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x7f64)
	RAX = ram[RCX]
	instruction(0x7f67)
	$U1:8 = RBP + 0xffffffffffffff20:8
	$U2:8 = RDI
	ram[$U1:8] = $U2:8
	instruction(0x7f6e)
	$U1:8 = RBP + 0xffffffffffffff28:8
	$U2:8 = RSI
	ram[$U1:8] = $U2:8
	instruction(0x7f75)
	$U1:8 = RBP + 0x10:8
	R15 = ram[$U1:8]
	instruction(0x7f79)
	$U1:8 = RBP + 0xfffffffffffffee0:8
	$U2:8 = RCX
	ram[$U1:8] = $U2:8
	instruction(0x7f80)
	$U1:8 = RBP + 0xfffffffffffffef8:8
	$U2:8 = R8
	ram[$U1:8] = $U2:8
	instruction(0x7f87)
	$U1:8 = RBP + 0xffffffffffffff18:8
	$U2:8 = R9
	ram[$U1:8] = $U2:8
	instruction(0x7f8e)
	$U1:8 = RBP + 0xffffffffffffff10:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x7f95)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RAX & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x7f98)
	if ZF jump 0x81fd:8

0x1ec3f  MOV R10,qword ptr [RDX + -0x8]
0x1ec43  MOV R9,qword ptr [RDI + -0x8]
0x1ec47  SUB RAX,0x1
0x1ec4b  ADD RDX,0x10
0x1ec4f  LEA R9,[R10 + R9*0x1 + 0x1]
0x1ec54  MOV qword ptr [RDX + -0x18],R9
0x1ec58  TEST RSI,RAX
0x1ec5b  JNZ 0x1ec3f
<L0> (entry=0x1ec3f):
	instruction(0x1ec3f)
	$U1:8 = RDX + 0xfffffffffffffff8:8
	R10 = ram[$U1:8]
	instruction(0x1ec43)
	$U1:8 = RDI + 0xfffffffffffffff8:8
	R9 = ram[$U1:8]
	instruction(0x1ec47)
	CF = RAX < 0x1:8
	OF = RAX sborrow 0x1:8
	RAX = RAX - 0x1:8
	SF = RAX s< 0x0:8
	ZF = RAX == 0x0:8
	$U1:8 = RAX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ec4b)
	CF = RDX carry 0x10:8
	OF = RDX scarry 0x10:8
	RDX = RDX + 0x10:8
	SF = RDX s< 0x0:8
	ZF = RDX == 0x0:8
	$U1:8 = RDX & 0xff:8
	$U2:1 = count_ones($U1:8)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1ec4f)
	$U2:8 = 0x1:8 + R10
	$U3:8 = R9 * 0x1:8
	$U1:8 = $U2:8 + $U3:8
	R9 = $U1:8
	instruction(0x1ec54)
	$U1:8 = RDX + 0xffffffffffffffe8:8
	$U2:8 = R9
	ram[$U1:8] = $U2:8
	instruction(0x1ec58)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = RSI & RAX
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1ec5b)
	$U1:1 = !ZF
	if $U1:1 jump 0x1ec3f:8

0x1f27b  MOV EDX,dword ptr [RBX + 0x18]
0x1f27e  MOV qword ptr [RBX + 0x8],RAX
0x1f282  MOV ECX,EDX
0x1f284  SHR ECX,0x1
0x1f286  AND EDX,0x1
0x1f289  MOV dword ptr [RBX + 0x18],ECX
0x1f28c  JZ 0x1f22d
<L0> (entry=0x1f27b):
	instruction(0x1f27b)
	$U1:8 = RBX + 0x18:8
	EDX = ram[$U1:8]
	RDX = zext(EDX)
	instruction(0x1f27e)
	$U1:8 = RBX + 0x8:8
	$U2:8 = RAX
	ram[$U1:8] = $U2:8
	instruction(0x1f282)
	ECX = EDX
	RCX = zext(ECX)
	instruction(0x1f284)
	$U1:4 = ECX & 0x1:4
	CF = $U1:4 != 0x0:4
	OF = 0x0:1
	ECX = ECX >> 0x1:8
	RCX = zext(ECX)
	SF = ECX s< 0x0:4
	ZF = ECX == 0x0:4
	$U2:4 = ECX & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1f286)
	CF = 0x0:1
	OF = 0x0:1
	EDX = EDX & 0x1:4
	RDX = zext(EDX)
	SF = EDX s< 0x0:4
	ZF = EDX == 0x0:4
	$U1:4 = EDX & 0xff:4
	$U2:1 = count_ones($U1:4)
	$U3:1 = $U2:1 & 0x1:1
	PF = $U3:1 == 0x0:1
	instruction(0x1f289)
	$U1:8 = RBX + 0x18:8
	$U2:4 = ECX
	ram[$U1:8] = $U2:4
	instruction(0x1f28c)
	if ZF jump 0x1f22d:8

0x1ebf1  MOV R11,qword ptr [RBP + -0xe0]
0x1ebf8  TEST R11,R11
0x1ebfb  JZ 0x1ef4d
<L0> (entry=0x1ebf1):
	instruction(0x1ebf1)
	$U1:8 = RBP + 0xffffffffffffff20:8
	R11 = ram[$U1:8]
	instruction(0x1ebf8)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R11 & R11
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1ebfb)
	if ZF jump 0x1ef4d:8

0xb94c  TEST R12,R12
0xb94f  JNZ 0xb6c3
<L0> (entry=0xb94c):
	instruction(0xb94c)
	CF = 0x0:1
	OF = 0x0:1
	$U1:8 = R12 & R12
	SF = $U1:8 s< 0x0:8
	ZF = $U1:8 == 0x0:8
	$U2:8 = $U1:8 & 0xff:8
	$U3:1 = count_ones($U2:8)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0xb94f)
	$U1:1 = !ZF
	if $U1:1 jump 0xb6c3:8

0x1a578  CMP ECX,0x6c65746e
0x1a57e  JNZ 0x1a6e0
<L0> (entry=0x1a578):
	instruction(0x1a578)
	CF = ECX < 0x6c65746e:4
	OF = ECX sborrow 0x6c65746e:4
	$U1:4 = ECX - 0x6c65746e:4
	SF = $U1:4 s< 0x0:4
	ZF = $U1:4 == 0x0:4
	$U2:4 = $U1:4 & 0xff:4
	$U3:1 = count_ones($U2:4)
	$U4:1 = $U3:1 & 0x1:1
	PF = $U4:1 == 0x0:1
	instruction(0x1a57e)
	$U1:1 = !ZF
	if $U1:1 jump 0x1a6e0:8

